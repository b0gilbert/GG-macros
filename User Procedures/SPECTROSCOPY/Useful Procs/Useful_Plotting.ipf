#pragma rtGlobals=3		// Use modern global access method.Menu "Plots"	"Color Plot Traces"	"Add Legend"	"Export Plot"	"Duplicate Plotted Trace"	"Save Plotted Traces"	"Save All Plotted Traces"	"Kill Plotted Traces"	"Cursor Positions"	"Browse And Plot"EndFunction PlotNISTSAXS(SAXSName)	String SAXSName		Variable i, NSAXS	String FldrStem = "root:"	String AllFolders, SAXSFolders, MergeFolders, FolderName		AllFolders = ListOfObjectsInFolder(4,FldrStem,SAXSName, "")		MergeFolders = GrepList(AllFolders,"(?i)_ABS")	SAXSFolders = GrepList(MergeFolders,"(?i)"+SAXSName)		NSAXS = ItemsInList(SAXSFolders)	FolderName = StringFromList(0,SAXSFolders)		Display /K=1/W=(899,189,1219,603) as SAXSName 		for (i=0;i<NSAXS;i+=1)		FolderName = StringFromList(i,SAXSFolders)+":"						WAVE IWave = $(FldrStem+FolderName+SAXSName+"_ABS_i")		WAVE QWave = $(FldrStem+FolderName+SAXSName+"_ABS_q")				AppendToGraph IWave vs QWave 	endfor		ModifyGraph log=1	ColorPlotTraces()	AddLegend()	EndFunction PlotAPSSAXSReps(SAXSName)	String SAXSName		Variable i, NSAXS	String FldrStem = "root:USAXS:"	String AllFolders, SAXSFolders, MergeFolders, FolderName		AllFolders = ListOfObjectsInFolder(4,FldrStem,SAXSName, "")		MergeFolders = GrepList(AllFolders,"(?i)_mrg")	SAXSFolders = GrepList(MergeFolders,"(?i)"+SAXSName)		NSAXS = ItemsInList(SAXSFolders)	FolderName = StringFromList(0,SAXSFolders)		Display /K=1/W=(899,189,1219,603) as SAXSName 		for (i=0;i<NSAXS;i+=1)		FolderName = StringFromList(i,SAXSFolders)		WAVE IWave = $(FldrStem+PossiblyQuoteName(FolderName)+":DSM_Int")		WAVE QWave = $(FldrStem+PossiblyQuoteName(FolderName)+":DSM_Qvec")		AppendToGraph IWave/TN=$FolderName vs QWave 	endfor		ModifyGraph log=1	ColorPlotTraces()	AddLegend()	End// This ensures window positions are consistent regardless of monitor resolution or operating system. Function CheckWindowPosition(WindowName,x1,y1,x2,y2)	String WindowName	Variable x1,y1,x2,y2		Variable RFac = 72/ScreenResolution		if (strlen(WindowName) ==0)		WindowName = WinName(0,67)	endif		DoWindow $WindowName	if (V_flag && (strlen(WindowName)<32))		MoveWindow/W=$WindowName x1*RFac, y1*RFac, x2*RFac, y2*RFac	endifEndFunction InitPlotPackage()	NewDataFolder/O/S root:Packages	NewDataFolder/O/S root:Packages:Plotting			MakeStringIfNeeded("gTraceName","")		MakeStringIfNeeded("gPlotName","")		MakeStringIfNeeded("gNewName","")		MakeStringIfNeeded("gSaveName","")		MakeStringIfNeeded("gCutNameText","")		MakeStringIfNeeded("gPasteNameText","")		MakeStringIfNeeded("gExportFolder","home")				MakeVariableIfNeeded("gFolderChoice",1)		MakeVariableIfNeeded("gAdoptChoice",1)				MakeVariableIfNeeded("gOverWriteFlag",1)		MakeVariableIfNeeded("gEOLFlag",1)		MakeVariableIfNeeded("gNANFlag",1)				MakeStringIfNeeded("gCsrName1","A")		MakeStringIfNeeded("gCsrName2","B")		MakeVariableIfNeeded("gCsrVMin",0)		MakeVariableIfNeeded("gCsrVMax",inf)		SetDataFolder root:End// ***************************************************************************// **************** 			Allow functions to use the Execute command to set a global VARIABLE in a control. // ***************************************************************************Function SetControlGlobalVariable(WindowName,CtrlName,FolderName,StrName,CtrlType)	String WindowName,CtrlName,FolderName,StrName	Variable CtrlType		String cmd, VarStr	Variable Version = NumberByKey("IGORVERS", IgorInfo(0))		FolderName 	= ParseFilePath(2,FolderName,":",0,0)		if (strlen(WindowName) == 0)		VarStr = FolderName + StrName	else		VarStr = FolderName + WindowName +":" + StrName	endif		if (Version < 6)		VarStr += "\""		if (CtrlType == 1)			cmd = "PopupMenu " + CtrlName + ",value=#\"" + VarStr		elseif (CtrlType == 2)			cmd = "ValDisplay " + CtrlName + ",value=#\"" + VarStr		endif		Execute cmd	else		if (CtrlType == 1)			PopupMenu $CtrlName, value=#VarStr		elseif (CtrlType == 2)			ValDisplay $CtrlName, value=#VarStr		endif	endifEnd// Allows functions to use the Execute command to set a global VALUE in a control. Function SetMenuControlValue(WindowName,CtrlName,ValueStr,CtrlFlag)	String WindowName,CtrlName,ValueStr	Variable CtrlFlag		String cmd, RGBList		if (CtrlFlag == 1)		if(strlen(WindowName) == 0)			cmd = "PopupMenu " + CtrlName + ",popvalue=\"" + ValueStr + "\""		else			cmd = "PopupMenu " + CtrlName + ",win=" + WindowName +",popvalue=\"" + ValueStr + "\""		endif	elseif (CtrlFlag == 2)		RGBList = ReplaceString("(",ReplaceString(")",ValueStr,""),"")		cmd = "PopupMenu " + CtrlName + ",popColor=("+StringFromList(0,RGBList,",")+","+StringFromList(1,RGBList,",")+","+StringFromList(2,RGBList,",")+")"	endif	//	Print cmd	Execute cmdEnd// ***************************************************************************// **************** 			Enter cursor positions. // ***************************************************************************Function CursorPositions()	String PlotName = WinName(0,1)	if (strlen(PlotName) == 0)		return 0	endif	InitPlotPackage()		String PlottingFolderName = "root:Packages:Plotting"	SVAR gTraceName		= $(PlottingFolderName + ":gTraceName")	SVAR gPlotName		= $(PlottingFolderName + ":gPlotName")	NVAR gCsrVMin		= $(PlottingFolderName + ":gCsrVMin")	NVAR gCsrVMax		= $(PlottingFolderName + ":gCsrVMax")		String TraceName = gTraceName	Prompt TraceName, "Choose the trace to place cursors on", popup, TraceNameList(PlotName,";",1)	Variable CsrVMin = gCsrVMin	Prompt CsrVMin, "Minimum axis value"	Variable CsrVMax = gCsrVMax	Prompt CsrVMax, "Maximum axis value"	DoPrompt "Enter cursor values", TraceName, CsrVMin, CsrVMax	if (V_flag)		return 0	endif		gCsrVMin		= CsrVMin	gCsrVMax		= CsrVMax	gTraceName	= TraceName		Variable CsrPMin	= AxisValueToPoint(XWaveRefFromTrace(PlotName,TraceName), CsrVMin)	Variable CsrPMax	= AxisValueToPoint(XWaveRefFromTrace(PlotName,TraceName), CsrVMax)		Cursor A, $TraceName, CsrPMin	Cursor B, $TraceName, CsrPMaxEnd// ***************************************************************************// **************** 			FREE CURSOR functions// ***************************************************************************Function FreeCsrXValue(PlotName,Csr,LogFlag)	String PlotName, Csr	Variable LogFlag	Variable xValue, point		if (!LogFlag)		xValue = xcsr(Csr,PlotName)	else		GetAxis /Q/W=$PlotName bottom		point = NumberByKey("POINT",CsrInfo($Csr,PlotName))		xValue = FreeCsrPointToLogAxisValue(V_min,V_max,point)	endif		return xValueEndFunction FreeCsrPointFromX(PlotName,Csr,xValue, LogFlag)	String PlotName, Csr	Variable xValue, LogFlag		Variable point		GetAxis /Q bottom		if (!LogFlag)		point = (xValue - V_min)/(V_max-V_min)	else//		GetAxis /Q/W=$PlotName bottom//		point = NumberByKey("POINT",CsrInfo($Csr,PlotName))//		xValue = FreeCsrPointToLogAxisValue(V_min,V_max,point)	endif		point = max(min(point,1),0)		return pointEnd// For translating cursor XPOINT position to x-axis value when plot displayed with a log axisFunction FreeCsrPointToLogAxisValue(AxisMin,AxisMax,point)	Variable AxisMin,AxisMax, point		// Divide the axis into NMax pixels	Variable NMax=100	Variable N 	= NMax*point		// C is a scale factor for the real x-axis value going from pixel N to N+1	Variable C = 10^((1/NMax) * log(AxisMax/AxisMin))		// This is the true x-value. 	Variable Xval 	= AxisMin * C^N		return XvalEnd// ***************************************************************************// **************** 			Plot Display Ranges // ***************************************************************************Function SetPlotDisplayRange(WindowName,XMin,XMax,YMin,YMax,XLog,YLog)	String WindowName	Variable XMin,XMax,YMin,YMax,XLog,YLog		SetAxis /W=$WindowName bottom, XMin, XMax	SetAxis /W=$WindowName left, YMin, YMAX		ModifyGraph /W=$WindowName log(bottom)=XLog	ModifyGraph /W=$WindowName log(left)=YLogEndFunction GetPlotDisplayRange(WindowName,XMin,XMax,YMin,YMax,XLog,YLog)	String WindowName	Variable &XMin,&XMax,&YMin,&YMax,&XLog,&YLog		GetAxis /Q/W=$WindowName bottom	XMin 	= V_min	XMax 	= V_max		GetAxis /Q/W=$WindowName left	YMin 	= V_min	YMax 	= V_max		XLog 		= NumberByKey("log(x)", AxisInfo(WindowName,"bottom"),"=")	YLog 		= NumberByKey("log(x)", AxisInfo(WindowName,"left"),"=")End// ***************************************************************************// **************** 			Capture and Save or Adopt traces from the top plot. // ***************************************************************************Function SaveAllPlottedTraces()	// I don't recall why this has been moved to the SaveOrAdoptTraces() routine. 	InitPlotPackage()		String WindowName = WinName(0,65)	if (strlen(WindowName) == 0)		return 0	endif		GetWindow $WindowName activeSW	String PlotName 	= S_value//	String PlottingFolderName = "root:Packages:Plotting"	SVAR gNewName			= root:Packages:Plotting:gNewName	SVAR gExportFolder		= root:Packages:Plotting:gExportFolder	SVAR gCutNameText		= root:Packages:Plotting:gCutNameText	SVAR gPasteNameText	= root:Packages:Plotting:gPasteNameText		String ExportFolder = StrVarOrDefault("root:Packages:Plotting:gExportFolder","home")	Prompt ExportFolder, "Save location", popup, "home;current export location;new export location;"	String NewName = StrVarOrDefault("root:Packages:Plotting:gNewName","")	Prompt NewName, "New basename, or blank for auto-name"	String CutNameText 	=  StrVarOrDefault("root:Packages:Plotting:gCutNameText","")	Prompt CutNameText, "Cut text from trace names"	String PasteNameText 	= StrVarOrDefault("root:Packages:Plotting:gPasteNameText","")	Prompt PasteNameText, "Insert text into trace names"	DoPrompt "Save plotted data", ExportFolder, NewName, CutNameText, PasteNameText	if (V_flag)		return 0	endif		gExportFolder 	= ExportFolder	gCutNameText 	= CutNameText	gPasteNameText 	= PasteNameText		String TraceName, TraceFolder, AxisFolder, TraceList="", TraceSaveName, FileSaveName	Variable i, j, NumTraces		NumTraces = ItemsInList(TraceNameList(PlotName, ";", 1))		for (i=0;i<NumTraces;i+=1)		// Determine the plotted wave and the data folder		WAVE TraceData 	= WaveRefIndexed(PlotName,i,1)		TraceFolder 	= GetWavesDataFolder(TraceData,0)		TraceName 	= NameOfWave(TraceData)				WAVE TraceAxis 	= XWaveRefFromTrace(PlotName,TraceName)		AxisFolder 	= GetWavesDataFolder(TraceAxis,0)				print AxisFolder		//		NameOfWave(WaveRefIndexed(PlotName,i,1))		//		if (FindListItem(TraceName,TraceList) != -1)	 	// This trace name is already in the list//			j += 1//			TraceSaveName 	= TraceName[0,28] + num2str(j)//		else//			TraceSaveName 	= TraceName//		endif//		TraceList 		= TraceList + TraceName + ";" //		//		if (!TraceIsSpecial(TraceName))//			DataSaveName = ReplaceString("_data",TraceSaveName,"") + "_data"//			if (strlen(CutNameText) > 0)//				DataSaveName 	= ReplaceString(CutNameText,DataSaveName,PasteNameText)//			endif//			if (strlen(NewName) > 0)//				DataSaveName = NewName+DataSaveName//			endif////			AxisSaveName = ReplaceString("_data",DataSaveName,"") + "_axis"			//	AxisSaveName = ReplaceString("_data",DataSaveName,"") + "_axis"//	FileSaveName	= ReplaceString("_data",DataSaveName,"") + ".txt"//	//	WAVE TraceData	= TraceNameToWaveRef(PlotName,TraceName)//	WAVE TraceAxis 	= XWaveRefFromTrace(PlotName,TraceName)//	//	if (!WaveExists(TraceAxis))//		Duplicate /O/D TraceData, $(CheckFolderColon(TempFolderName) + AxisSaveName)//		WAVE TraceAxis = $(CheckFolderColon(TempFolderName) + AxisSaveName)//		TraceAxis = pnt2x(TraceData,p)//		KillFlag = 1//	endif//	//	Duplicate /O TraceData, ExportData//	Duplicate /O TraceAxis, ExportAxis//	//	// Handling NANs in Data//	if (NANFlag == 2)//		StripNANsFromAxisDataErrors(ExportAxis, $"", ExportData, $"")//	elseif (NANFlag == 3)//		ReplaceNANsWithValue(ExportData,0)//	endif//	//	if (OverWriteFlag)//		Save /O/J/P=ExportPath ExportAxis, ExportData as FileSaveName//	else//		Save /J/P=ExportPath ExportAxis, ExportData as FileSaveName//	endif					endfor		return NumTracesEnd		// ***************************************************************************// **************** 			Capture and Save or Adopt traces from the top plot. // ***************************************************************************Function SavePlottedTraces()	// I don't recall why this has been moved to the SaveOrAdoptTraces() routine. 	InitPlotPackage()		String WindowName = WinName(0,65)	if (strlen(WindowName) == 0)		return 0	endif		GetWindow $WindowName activeSW	String PlotName 	= S_value//	String PlottingFolderName = "root:Packages:Plotting"	SVAR gTraceName			= root:Packages:Plotting:gTraceName	SVAR gNewName			= root:Packages:Plotting:gNewName	NVAR gAdoptChoice		= root:Packages:Plotting:gAdoptChoice	SVAR gExportFolder		= root:Packages:Plotting:gExportFolder	SVAR gCutNameText		= root:Packages:Plotting:gCutNameText	SVAR gPasteNameText		= root:Packages:Plotting:gPasteNameText	NVAR gOverWriteFlag 	= root:Packages:Plotting:gOverWriteFlag	NVAR gNANFlag			= root:Packages:Plotting:gNANFlag	NVAR gEOLFlag			= root:Packages:Plotting:gEOLFlag		Variable AdoptChoice = NumVarOrDefault("root:Packages:Plotting:gAdoptChoice",1)	Prompt AdoptChoice, "Options", popup, "Adopt trace(s);Save individual trace(s);Save stacked traces;"	String ExportFolder = StrVarOrDefault("root:Packages:Plotting:gExportFolder","home")	Prompt ExportFolder, "Save location", popup, "home;current export location;new export location;"	String TraceName = StrVarOrDefault("root:Packages:Plotting:gTraceName","")	Prompt TraceName, "Choose the trace", popup, "all;" + TraceNameList(PlotName,";",1)	String NewName = StrVarOrDefault("root:Packages:Plotting:gNewName","")	Prompt NewName, "New name, or blank for auto-name"	String CutNameText 	=  StrVarOrDefault("root:Packages:Plotting:gCutNameText","")	Prompt CutNameText, "Cut text from filename"	String PasteNameText 	= StrVarOrDefault("root:Packages:Plotting:gPasteNameText","")	Prompt PasteNameText, "Insert text into filename"	Variable NANFlag 	= NumVarOrDefault("root:Packages:Plotting:gNANFlag",1)	Prompt NANFlag,"NAN handling",popup,"ignore;strip from data;replace with zero;"	Variable EOLFlag 	= NumVarOrDefault("root:Packages:Plotting:gEOLFlag",1)	Prompt EOLFlag, "End-of-line character", popup, "automatic;Macintosh;Windows;Linux;"	Variable OverWriteFlag 	= NumVarOrDefault("root:Packages:Plotting:gOverWriteFlag",1)	Prompt OverWriteFlag, "Overwrite?", popup, "no;yes;"	DoPrompt "Save plotted data", AdoptChoice, ExportFolder, TraceName, NewName, CutNameText, PasteNameText, NANFlag, OverWriteFlag	if (V_flag)		return 0	endif		gAdoptChoice 		= AdoptChoice	gExportFolder 	= ExportFolder	gCutNameText 		= CutNameText	gPasteNameText 	= PasteNameText	gOverWriteFlag 	= OverWriteFlag	gNANFlag 			= NANFlag	gEOLFlag			= EOLFlag		if (AdoptChoice == 3)		gTraceName 	= "all"	else		gTraceName 	= TraceName	endif	gNewName 	= NewName		if (AdoptChoice > 1)		if (SetExportPath(ExportFolder) == 0)			return 0		endif	endif	SaveOrAdoptTraces(AdoptChoice,PlotName,TraceName,NewName,CutNameText,PasteNameText,NANFlag,OverWriteFlag)EndFunction SaveOrAdoptTraces(AdoptChoice,PlotName,TraceName,NewName,CutNameText,PasteNameText,NANFlag,OverWriteFlag)	Variable AdoptChoice	String PlotName,TraceName,NewName,CutNameText,PasteNameText	Variable NANFlag, OverWriteFlag		InitPlotPackage()	Variable i, j=0, n=0, m=0, Success, offset, NumTraces, AutoName=1, SavedTraces=0		String PlottingFolderName = "root:Packages:Plotting"	String cmd, AxisName, TraceSaveName, DataSaveName, AxisSaveName, FileSaveName, SaveList=""		// Save or adopt a SINGLE named trace. 	if (cmpstr("all",TraceName) != 0)				if (strlen(NewName) > 0)			AutoName 		= 0			CutNameText 	= ""			DataSaveName = ReplaceString("_data",NewName,"") + "_data"		else			DataSaveName = ReplaceString("_data",TraceName,"") + "_data"		endif				DataSaveName = CleanupName(ReplaceString("'",DataSaveName,""),0)					if (AdoptChoice == 1)			Success = AdoptSingleTrace(PlottingFolderName,PlotName,TraceName,DataSaveName,CutNameText,PasteNameText,AutoName)		endif				if (AdoptChoice == 2)			Success = ExportSingleTrace(PlottingFolderName,PlotName,TraceName,DataSaveName,NANFlag,OverWriteFlag)		endif				return 1	endif		NumTraces = ItemsInList(TraceNameList(PlotName, ";", 1))		// Save or adopt ALL traces as n two-column axis -data files	if (AdoptChoice != 3)		for (i=0;i<NumTraces;i+=1)					// This looses the "#2" etc trace name suffixes ...//			TraceName 	= NameOfWave(WaveRefIndexed(PlotName,i,1))			// ... while this does not. 			TraceName 	= StringFromList(i,TraceNameList(PlotName, ";", 1))						if (FindListItem(TraceName,SaveList) != -1)	 	// This trace name is already in the list				j += 1				TraceSaveName 	= TraceName[0,28] + num2str(j)			else				TraceSaveName 	= TraceName			endif			SaveList 		= SaveList + TraceName + ";" 						if (!TraceIsSpecial(TraceName))				DataSaveName = ReplaceString("_data",TraceSaveName,"") + "_data"				DataSaveName = CleanupName(ReplaceString("'",DataSaveName,""),0)//				if (strlen(CutNameText) > 0)//					DataSaveName 	= ReplaceString(CutNameText,DataSaveName,PasteNameText)//				endif				if (strlen(NewName) > 0)					DataSaveName = NewName+DataSaveName				endif												AxisSaveName = ReplaceString("_data",DataSaveName,"") + "_axis"//				AxisSaveName = ReplaceString("_data",TraceSaveName,"") + "_axis"								if (AdoptChoice == 1)					Success 	= AdoptSingleTrace(PlottingFolderName,PlotName,TraceName,DataSaveName,CutNameText,PasteNameText,AutoName)					if (!Success)						return n					else						n +=1 					endif				endif								if (AdoptChoice == 2)					Success 	= ExportSingleTrace(PlottingFolderName,PlotName,TraceName,DataSaveName,NANFlag,OverWriteFlag)					if (!Success)						return m					else						m +=1					endif				endif			endif		endfor				return NumTraces	endif			// Save ALL traces as one axis - n-data column file including plot offsets	if (AdoptChoice == 3)				TraceName 	= CleanUpDataName(NameOfWave(WaveRefIndexed(PlotName,0,1)))		TraceName 	= ReplaceString("_data",TraceName,"")				AxisName 		= CleanUpDataName(NameOfWave(WaveRefIndexed(PlotName,0,2)))		AxisName 		= ReplaceString("_axis",AxisName,"")+"_axis"				if (strlen(NewName) > 0)			FileSaveName = ReplaceString("_data",NewName,"") + ".txt"		else			FileSaveName = ReplaceString("_data",TraceName,"") + ".txt"		endif			Duplicate /O/D WaveRefIndexed(PlotName,0,1), $(CheckFolderColon(PlottingFolderName) + TraceName)		Duplicate /O/D WaveRefIndexed(PlotName,0,2), $(CheckFolderColon(PlottingFolderName) + AxisName)				SaveList = (CheckFolderColon(PlottingFolderName) + AxisName) + ";" + (CheckFolderColon(PlottingFolderName) + TraceName) + ";"			for (i=1;i<NumTraces;i+=1)			if (EqualWaves(WaveRefIndexed(PlotName,0,2), WaveRefIndexed(PlotName,i,2) , 1) == 1)							TraceName 	= NameOfWave(WaveRefIndexed(PlotName,i,1))				offset 			= str2num(StringFromList(1,StringByKey("offset(x)", TraceInfo(PlotName,TraceName,0),"=",";"),","))								TraceName 	= CleanUpDataName(NameOfWave(WaveRefIndexed(PlotName,i,1)))				TraceName 	= ReplaceString("_data",TraceName,"")				Duplicate /O/D WaveRefIndexed(PlotName,i,1), $(CheckFolderColon(PlottingFolderName) + TraceName)				SaveList += (CheckFolderColon(PlottingFolderName) + TraceName) + ";"								if (offset != 0)					WAVE Trace 	= $(CheckFolderColon(PlottingFolderName) + TraceName)					Trace += offset				endif								SavedTraces += 1			endif		endfor				Save /B/I/J/W/P=ExportPath SaveList as FileSaveName				KillWavesFromList(SaveList,1)				return SavedTraces	endifEndFunction AdoptSingleTrace(TempFolderName,PlotName,TraceName,DataSaveName,CutNameText,PasteNameText,AutoName)	String TempFolderName, PlotName,TraceName,DataSaveName,CutNameText,PasteNameText	Variable AutoName		String cmd, DelNumStr, DataNote1, DataNote2, AxisSaveName	WAVE TraceData	= TraceNameToWaveRef(PlotName,TraceName)	//	print NameOfWAve(TraceData)//	print GetWavesDataFolder(TraceData,2)		if (strlen(CutNameText) > 0)		DataSaveName 	= ReplaceString(CutNameText,DataSaveName,PasteNameText)	endif		AxisSaveName = "axis"		Duplicate /O/D TraceData, $(CheckFolderColon(TempFolderName) + "data")	WAVE DataWave = $(CheckFolderColon(TempFolderName) + "data")		DataNote1 	= note(TraceData)	DataNote2 	= "Original name and folder: " + NameOfWave(TraceData) + "\r " + GetWavesDataFolder(TraceData,2)+"\r"	DataNote2 = DataNote2 + DataNote1	Note DataWave, DataNote2			// Add the original trace name to the duplicated wave//	print " **!** Disabled this function **!**"//	DataNote 	= note(TraceData)//	Note /K DataWave, "Original name="+TraceName+";"//	Note DataWave, DataNote			WAVE TraceAxis 	= XWaveRefFromTrace(PlotName,TraceName)	if (WaveExists(TraceAxis) == 1)		Duplicate /O/D TraceAxis, $(CheckFolderColon(TempFolderName) + AxisSaveName)	else		Duplicate /O/D TraceData, $(CheckFolderColon(TempFolderName) + AxisSaveName) /WAVE=TraceAxis		TraceAxis = pnt2x(TraceData,p)	endif//	cmd = "AdoptAxisAndDataFromMemory(\""+AxisSaveName+"\",\"null\",\""+TempFolderName+"\",\""+DataSaveName+"\",\"null\",\""+TempFolderName+"\",\""+ReplaceString("_data",DataSaveName,"")+"\",\"\",0,0)"//	cmd = "AdoptAxisAndDataFromMemory(\"axis\",\"null\",\""+TempFolderName+"\",\"data\",\"null\",\""+TempFolderName+"\",\""+ReplaceString("_data",DataSaveName,"")+"\",\"\","+num2str(!AutoName)+",0)"	cmd = "AdoptAxisAndDataFromMemory(\"axis\",\"null\",\""+TempFolderName+"\",\"data\",\"null\",\""+TempFolderName+"\",\""+ReplaceString("_data",DataSaveName,"")+"\",\"\","+num2str(!AutoName)+",0,0)"	//	print cmd		try		Execute cmd	catch		return 0	endtry		KillWaves /Z $(CheckFolderColon(TempFolderName) + "axis"), $(CheckFolderColon(TempFolderName) + "data")		return 1EndFunction ExportSingleTrace(TempFolderName,PlotName,TraceName,DataSaveName,NANFlag,OverWriteFlag)	String TempFolderName, PlotName,TraceName,DataSaveName	Variable NANFlag, OverWriteFlag		Variable KillFlag = 0	String AxisSaveName, FileSaveName		AxisSaveName = ReplaceString("_data",DataSaveName,"") + "_axis"	FileSaveName	= ReplaceString("_data",DataSaveName,"") + ".txt"		WAVE TraceData	= TraceNameToWaveRef(PlotName,TraceName)	WAVE TraceAxis 	= XWaveRefFromTrace(PlotName,TraceName)		if (!WaveExists(TraceAxis))		Duplicate /O/D TraceData, $(CheckFolderColon(TempFolderName) + AxisSaveName)		WAVE TraceAxis = $(CheckFolderColon(TempFolderName) + AxisSaveName)		TraceAxis = pnt2x(TraceData,p)		KillFlag = 1	endif		Duplicate /O TraceData, ExportData	Duplicate /O TraceAxis, ExportAxis		// Handling NANs in Data	if (NANFlag == 2)		StripNANsFromAxisDataErrors(ExportAxis, $"", ExportData, $"")	elseif (NANFlag == 3)		ReplaceNANsWithValue(ExportData,0)	endif		if (OverWriteFlag)		Save /O/J/P=ExportPath ExportAxis, ExportData as FileSaveName	else		Save /J/P=ExportPath ExportAxis, ExportData as FileSaveName	endif		KillWaves /Z ExportAxis, ExportData		if (KillFlag)		KillWaves /Z TraceAxis	endifEnd// ***************************************************************************// **************** 			Duplicate one trace on the top plot// ***************************************************************************Function DuplicatePlottedTrace()	String cmd, AxisName, DataName, NewAxisName, NewDataName, PlotName = WinName(0,1)	if (strlen(PlotName) == 0)		return 0	endif		InitPlotPackage()		String PlottingFolderName = "root:Packages:Plotting"	SVAR gTraceName		= $("root:Packages:Plotting" + ":gTraceName")	NVAR gFolderChoice	= $("root:Packages:Plotting" + ":gFolderChoice")		String TraceFolderName, DataFolderName, TraceList = TraceNameList(PlotName,";",1)	if (WhichListItem(gTraceName,TraceList) == -1)		gTraceName = StringFromList(0,TraceList)	endif		String TraceName = gTraceName	Prompt TraceName, "Choose the trace to duplicate", popup, TraceList	String NewName	Prompt NewName, "New name, or blank for auto-name"	Variable FolderChoice = gFolderChoice	Prompt FolderChoice, "Data folder for duplicate", popup, "same;root;adopt;"	DoPrompt "Duplicate a plotted trace", TraceName, NewName, FolderChoice	if (V_flag)		return 0	endif		gTraceName	= TraceName	gFolderChoice 	= FolderChoice		if (strlen(NewName) > 0)		NewDataName 		= NewName	else		NewDataName 		= TraceName	endif		TraceFolderName	= GetWavesDataFolder(TraceNameToWaveRef(PlotName,TraceName),1)	AxisName			= NameOfWave(XWaveRefFromTrace(PlotName,TraceName))		if (FolderChoice == 3)		Execute "LoadSpectrumAnalysisPackage()"		DoUpdate		Execute "InitLoadSpectra()"		Execute "InitPlotSpectra()"		Execute "DisplayPlottingPanel()"		cmd = "AdoptAxisAndDataFromMemory(\""+AxisName+"\",\"null\",\""+TraceFolderName+"\",\""+TraceName+"\",\"null\",\""+TraceFolderName+"\",\""+NewDataName+"\",\"\",0,0,0)"		Execute cmd		return 1			elseif (FolderChoice == 2)		DataFolderName = "root"	elseif (FolderChoice == 1)		DataFolderName = TraceFolderName	endif		NewDataName		= UniqueName(ReplaceString("_data",NewDataName,""),1,2) + "_data"	NewAxisName		= ReplaceString("_axis",ReplaceString("_data",NewDataName,""),"") + "_axis"		WAVE TraceData	= TraceNameToWaveRef(PlotName,TraceName)	Duplicate /O/D TraceNameToWaveRef(PlotName,TraceName), $(CheckFolderColon(DataFolderName) + NewDataName)			WAVE TraceAxis 	= XWaveRefFromTrace(PlotName,TraceName)	if (WaveExists(TraceAxis) == 1)		Duplicate /O/D TraceAxis, $(CheckFolderColon(DataFolderName) + NewAxisName)	else		Duplicate /O/D TraceData, $(CheckFolderColon(DataFolderName) + NewAxisName)		WAVE Axis = $(CheckFolderColon(DataFolderName) + NewAxisName)		Axis = pnt2x(TraceData,p)	endif		AppendToGraph /W=$PlotName $(CheckFolderColon(DataFolderName) + NewDataName) vs $(CheckFolderColon(DataFolderName) + NewAxisName)		return 1EndFunction KillPlottedTraces()	String PlotName = WinName(0,1)	if (strlen(PlotName) == 0)		return 0	endif		String TraceList = TraceNameList(PlotName,";",1)	Variable KillChoice	Prompt KillChoice, "Options", popup, "delete selected;retain selected;"	String SelTrace	Prompt SelTrace, "Choose the trace to kill", popup, TraceList	DoPrompt "Deleting trace(s) from plot", KillChoice, SelTrace	if (V_flag)		return 0	endif		KillTracesOnPlot(PlotName,SelTrace,KillChoice)EndFunction KillTracesOnPlot(PlotName,SelTrace,KillChoice)	String PlotName, SelTrace	Variable KillChoice		String TraceName, TraceList = TraceNameList(PlotName,";",1)	Variable i, NTraces = ItemsInList(TraceList)		if (KillChoice == 1)		KillSelectedTrace(PlotName,SelTrace)	else		for (i=0;i<NTraces;i+=1)			TraceName = StringFromList(i,TraceList)			if (cmpstr(TraceName,SelTrace) != 0)				KillSelectedTrace(PlotName,TraceName)			endif		endfor	endifEndFunction KillSelectedTrace(PlotName,SelTrace)	String PlotName,SelTrace	String FullTraceName	= GetWavesDataFolder(TraceNameToWaveRef(PlotName,SelTrace),2)	String FullAxisName	= GetWavesDataFolder(XWaveRefFromTrace(PlotName,SelTrace),2)		RemoveFromGraph /W=$PlotName $SelTrace	KillWaves /Z $(FullTraceName), $(FullAxisName)End// *************************************************************// ****		Add a Shift-Click option for extracting values intersected by a horizontal or vertical bar// *************************************************************Function WaveFromTraceIntersection(PlotName,Intersect,YFlag)	String PlotName	Variable Intersect, YFlag	WAVE /T wDataList 	= root:SPECTRA:wDataList	WAVE wDataSel 	 	= root:SPECTRA:wDataSel	WAVE wDataGroup 	= root:SPECTRA:wDataGroup			String NoteStr, cDateStr, cTimeStr	String TraceName, PlotFolder 		= "root:SPECTRA:Plotting:" + PlotName	Variable i=0, j=0, NumTraces, IntersectPt1, IntersectPt2, SelectAxisFlag=1	Variable AxisDate1, AxisDate, AxisTime1, AxisTime, ElapDate, ElapTime		// This is WRONG as it incorrectly counts Special Traces	NumTraces 	= ItemsInList(TraceNameList(PlotName, ";", 1))// - 1 // assuming one bar ... 	TraceName 	= NameOfWave(WaveRefIndexed(PlotName,0,1))		MakeStringIfNeeded("root:SPECTRA:Plotting:gIntersectName",TraceName)	SVAR gIntersectName 			= $("root:SPECTRA:Plotting:gIntersectName")	MakeVariableIfNeeded("root:SPECTRA:Plotting:gIntersectWidth",1)	NVAR gIntersectWidth 		= $("root:SPECTRA:Plotting:gIntersectWidth")	MakeVariableIfNeeded("root:SPECTRA:Plotting:gIntersectAxisChoice",1)	NVAR gIntersectAxisChoice 	= $("root:SPECTRA:Plotting:gIntersectAxisChoice")	MakeStringIfNeeded("root:SPECTRA:Plotting:gIntersectAxisSelect","")	SVAR gIntersectAxisSelect 		= $("root:SPECTRA:Plotting:gIntersectAxisSelect")		String IntersectChoiceList	String IntersectAxisSelect = gIntersectAxisSelect	String IntersectAxisList = ListOfLoadedSpectra(NPnts=NumTraces)	if (ItemsInList(IntersectAxisList) > 0)		IntersectChoiceList = "manual;creation time;creation date & time;select data below;"	else		SelectAxisFlag = 0		IntersectChoiceList = "manual;creation time;creation date & time;"	endif		SetDataFolder $(PlotFolder)		String IntersectName 	= gIntersectName		Prompt IntersectName,"Name for intersect data"		Variable IntersectWidth 	= gIntersectWidth		Prompt IntersectWidth,"Width for averaging"		Variable IntersectAxisChoice = gIntersectAxisChoice		Prompt IntersectAxisChoice,"Obtain axis from ... ", popup, IntersectChoiceList		Prompt IntersectAxisSelect, "Possible axes", popup, IntersectAxisList		if (SelectAxisFlag)			DoPrompt "Extract intersection values", IntersectName, IntersectWidth, IntersectAxisChoice, IntersectAxisSelect		else			DoPrompt "Extract intersection values", IntersectName, IntersectWidth, IntersectAxisChoice		endif		if (V_Flag)			return -1		endif				gIntersectName 		= IntersectName		gIntersectWidth 		= IntersectWidth		gIntersectAxisChoice  = IntersectAxisChoice		gIntersectAxisSelect 	= IntersectAxisSelect				Make /O/T/N=(NumTraces) IntersectTraces				Make /O/D/N=(NumTraces) IntersectAxis, IntersectAxisError, IntersectData, IntersectDataError		IntersectAxis 			= 0		IntersectAxisError 	= 0		IntersectDataError 	= 0				for (i=0;i<NumTraces;i+=1)			TraceName 		= NameOfWave(WaveRefIndexed(PlotName,i,1))						if (TraceIsSpecial(TraceName))				DeletePoints j, 1, IntersectTraces				DeletePoints j, 1, IntersectAxis, IntersectData, IntersectAxisError, IntersectDataError			else				IntersectTraces[j] =  ReplaceString("_data",TraceName,"")				WAVE TraceData	= TraceNameToWaveRef(PlotName,TraceName)				WAVE TraceAxis 	= XWaveRefFromTrace(PlotName,TraceName)							if (YFlag)					FindLevel /P TraceData, Intersect					if (V_flag)						IntersectData[j] = V_LevelX					else						IntersectData[j] = NAN					endif				else					if (IntersectWidth == 0)						IntersectPt1 	= BinarySearchInterp(TraceAxis, Intersect)						if (IntersectPt1 > -1)							IntersectData[j] = TraceData[IntersectPt1]						else							IntersectData[j] = NAN						endif					else//						IntersectPt1 	= BinarySearchInterp(TraceAxis, Intersect - IntersectWidth/2)//						IntersectPt2 	= BinarySearchInterp(TraceAxis, Intersect + IntersectWidth/2)						IntersectPt1 	= BinarySearchInterp(TraceAxis, Intersect) - IntersectWidth/2						IntersectPt2 	= BinarySearchInterp(TraceAxis, Intersect) + IntersectWidth/2						if ((IntersectPt1 > -1) && (IntersectPt2 > -1))							WaveStats /Q/R=[IntersectPt1,IntersectPt2] TraceData							IntersectData[j] = V_avg							IntersectDataError[j] = V_sdev						else							IntersectData[j] = NAN						endif					endif				endif								if (IntersectAxisChoice == 1)					IntersectAxis[] = p									elseif ((IntersectAxisChoice == 2) || (IntersectAxisChoice == 3))					NoteStr 	= ReplaceString("\r",note(TraceData),";")					cDateStr 	= StringByKey("CreationDate",NoteStr,"=")					cTimeStr 	= StringByKey("CreationTime",NoteStr,"=")															if (j == 0)						AxisDate1 	= DateStr2Secs(cDateStr)						AxisTime1 = TimeStr2Secs(cTimeStr)					else						AxisDate 	= DateStr2Secs(cDateStr)						AxisTime 	= TimeStr2Secs(cTimeStr)												ElapDate 	= AxisDate - AxisDate1						ElapTime 	= AxisTime - AxisTime1												if (IntersectAxisChoice == 2)							IntersectAxis[j] = (ElapTime) / 60						else							IntersectAxis[j] = (ElapDate + ElapTime) / 3600						endif										endif				endif								j += 1			endif		endfor				if (IntersectAxisChoice == 4)			FindValue /TXOP=2/TEXT=IntersectAxisSelect wDataList			WAVE AxisSelect 	= $("root:SPECTRA:Data:Load" + num2str(wDataGroup[V_value]) + ":" + wDataList[V_value])			IntersectAxis = AxisSelect		endif		//--						Note IntersectData, "Data from vertical intersect."		if (IntersectAxisChoice == 2)			Note IntersectData, "Units=min;"		else			Note IntersectData, "Units=hours;"		endif				String FullFolderPath, DataName, FolderPath, InfoName		FullFolderPath 	= AdoptAxisAndDataFromMemory("IntersectAxis","IntersectAxisError","","IntersectData","IntersectDataError","",IntersectName,"",0,0,0)		DataName 			= ParseFilePath(0,FullFolderPath,":",1,0)		FolderPath 		= ParseFilePath(1,FullFolderPath,":",1,0)		InfoName 			= ReplaceString("_data",DataName,"_info")				Duplicate /O IntersectTraces, $ParseFilePath(2,FolderPath,":",0,0) + InfoName				KillWaves /Z IntersectAxis, IntersectData, IntersectDataError				EditData(DataName,FolderPath)		//		wDataSel[numpnts(wDataSel) - 1] = 1//		EditSelectedData(wDataList, wDataSel, wDataGroup,1,0)		SetDataFolder root:EndFunction EditData(DataName,FolderName)	String DataName,FolderName	String AxisAndFolderName, AxisSigAndFolderName, DataAndFolderName, DataSigAndFolderName, InfoAndFolderName, EditList		DataAndFolderName		= ParseFilePath(2,FolderName,":",0,0) + DataName	AxisAndFolderName 		= AnyNameFromDataName(DataAndFolderName,"axis")	AxisSigAndFolderName 	= AnyNameFromDataName(DataAndFolderName,"axis_sig")	DataSigAndFolderName 	= AnyNameFromDataName(DataAndFolderName,"data_sig")	InfoAndFolderName 		= AnyNameFromDataName(DataAndFolderName,"info")		EditList = AxisAndFolderName+";"+AxisSigAndFolderName+";"+DataAndFolderName+";"+DataSigAndFolderName+";"+InfoAndFolderName		DisplayWavesInTable(EditList,ReplaceString("_data",DataName,""))End		Function AddLegend()		Legend/C/N=text0/F=0/A=MCEndFunction ColorPlotTraces()	ColorTraces("")EndFunction ColorTraces(PlotName)	String PlotName		String TraceName, ListOfTraces=AxisTraceListBG(PlotName, "left","")	Variable i=0, j=0, NumTraces=ItemsInList(ListOfTraces)			for (i=0;i<NumTraces;i+=1)		TraceName = StringFromList(i,ListOfTraces)		if (cmpstr(ReturnLastSuffix(TraceName,"_"),"fit") == 0)			ModifyGraph /W=$PlotName rgb($TraceName)=(0,0,65535)//			j += 1		elseif (cmpstr(ReturnLastSuffix(TraceName,"_"),"sim") == 0)			ModifyGraph /W=$PlotName rgb($TraceName)=(0,45535,0)//			j += 1		elseif (cmpstr(ReturnLastSuffix(TraceName,"_"),"res") == 0)			ModifyGraph /W=$PlotName rgb($TraceName)=(17476,17476,17476)		else			GiveTraceRainbowColor(PlotName,j,TraceName,"",0,0)			j += 1		endif	endforEndFunction GiveTraceRainbowColor(WindowName,TraceNum,TraceName,TraceLabel,NameX,NameY)	Variable TraceNum,NameX,NameY	String WindowName, TraceName, TraceLabel		TraceNum = mod(TraceNum,12)	Variable r, g, b	//	SetDrawLayer /W=$WindowName ProgBack	switch (TraceNum)		case 0:			r = 65535; g = 0; b = 0			break		case 1:			r = 0; g = 0; b = 65535			break		case 2:			r = 0; g = 39321; b = 0			break		case 3:			r = 65535; g = 0; b = 52428//			r = 3; g = 52428; b= 1			break		case 4:			r = 1; g = 52428; b= 52428			break		case 5:			r = 1; g = 65535; b = 33232			break		case 6:			r = 0; g = 65535; b = 65535			break		case 7:			r = 0; g = 43690; b = 65535			break		case 8:			r = 1; g = 16019; b = 65535			break		case 9:			r = 0; g = 0; b = 65535			break		case 10:			r = 65535; g = 0; b = 26214			break		case 11:			r = 29524; g = 1; b = 58982			break		default:			r = 29524; g = 1; b = 58982	endswitch		ModifyGraph /W=$WindowName rgb($TraceName)=(r,g,b)			if (strlen(TraceLabel)>0)		SetDrawEnv /W=$WindowName textrgb= (r,g,b)		DrawText /W=$WindowName NameX,NameY,TraceLabel	endifEndFunction /T ReturnColorTableRGB(NTraces,TraceNum,CycleNum,ColorTable,BrktFlag)	Variable NTraces,TraceNum,CycleNum, BrktFlag	String ColorTable		String RGB	Variable TraceRange, NumColors, ColorChoice, r, g, b		ColorTab2Wave $ColorTable	WAVE M_colors	NumColors = dimsize(M_colors,0)	//	CycleNum 	= max(1,CycleNum)//	//	TraceRange = min(TraceNum,CycleNum)//	//	ColorChoice = (mod(TraceNum,CycleNum)/TraceRange) * NumColors	ColorChoice = (TraceNum/NTraces) * NumColors//	r	= min(65535,trunc(M_colors[ColorChoice][0]/10))//	g	= min(65535,trunc(M_colors[ColorChoice][1]/10))//	b	= min(65535,trunc(M_colors[ColorChoice][2]/10))	r	= min(65535,trunc(M_colors[ColorChoice][0]/1))	g	= min(65535,trunc(M_colors[ColorChoice][1]/1))	b	= min(65535,trunc(M_colors[ColorChoice][2]/1))		if (BrktFlag == 1)		RGB = "("+num2str(r)+","+num2str(g)+","+num2str(b)+")"	else		RGB = num2str(r)+","+num2str(g)+","+num2str(b)	endif		return RGBEnd// ***************************************************************************// **************** 			GENERIC PLOTTING ROUTINES AND BUTTONS// ***************************************************************************Function SimplePlot(FnAxis,FnCalc,FnCalc2,Title,YLabel,XLabel,LogFlag)	Wave FnAxis,FnCalc, FnCalc2	String Title,XLabel,YLabel	Variable LogFlag	Display /K=1/W=(298,0,693,335) FnCalc vs FnAxis as Title	CheckWindowPosition("",298,0,693,335)		if (WaveExists(FnCalc2) == 1)		AppendToGraph FnCalc2 vs FnAxis		ModifyGraph rgb($(NameOfWave(FnCalc2)))=(1,16019,65535)	endif		Label left XLabel	Label bottom YLabel	ModifyGraph log=LogFlag		ModifyGraph lSize=2	ModifyGraph grid=2	ModifyGraph tick=0	ModifyGraph margin=0	ModifyGraph mirror=2		ModifyGraph font="Helvetica Light"EndFunction SetPlotPosition(PlotName,TraceFormat)	String PlotName, TraceFormat		strswitch (TraceFormat)		case "Time-Data":			CheckWindowPosition(PlotName,0,44,2000,707)			break		case "Profex":			CheckWindowPosition(PlotName,455,53,1704,716)			break		case "Default-Wide":			CheckWindowPosition(PlotName,0,44,2000,707)			break		default: 			CheckWindowPosition(PlotName,525,44,1234,707)	endswitchEndFunction SetCommonPlotFormat(PlotName,TraceFormat)	String PlotName, TraceFormat		Legend/C/N=text0/F=0/A=MC/B=1		ModifyGraph logHTrip(left)=100,logLTrip(left)=0.001	ModifyGraph lowTrip(left)=0.01//, lowTrip(right)=0.01		ModifyGraph highTrip(bottom)=100000		ModifyGraph tick=0		ModifyGraph /W=$PlotName mrkThick=2, tick=0	ModifyGraph /W=$PlotName fSize=22, axThick=2	ModifyGraph lblMargin(left)=10	ModifyGraph lblMargin(bottom)=5	ModifyGraph margin(bottom)=72	ModifyGraph font="Helvetica Light"		ModifyGraph /W=$PlotName/Z mirror(bottom)=2	MirrorLeftAxisIfRightAxisUnused(PlotName)		SetAxisMargin("left",PlotName,108)		strswitch (TraceFormat)		case "Time-Data":			ModifyGraph /W=$PlotName fSize(bottom)=18,font(bottom)="Times"			ModifyGraph /W=$PlotName dateInfo(bottom)={0,1,0}, grid(bottom)=1,nticks(bottom)=12			break		case "Profex":			//ModifyGraph axisEnab(left)={0.12,0.98}			break		case "Default-Wide":			break	endswitchEndFunction MirrorLeftAxisIfRightAxisUnused(PlotName)	String PlotName		if (strlen(PlotName) == 0)		PlotName = WinName(0,1)	endif		if (ItemsInList(WinList(PlotName,";","WIN:1")) > 0)		if (StrSearch(AxisList(PlotName),"right",0) == -1)			ModifyGraph /W=$PlotName mirror(left)=2		endif	endifEnd// Data list can contain just the wave names or the folder + data namesFunction AppendWavesInListToPlot(WindowName, DataList, AxisName, PlotAxisName, RightFlag)	String WindowName, DataList, AxisName, PlotAxisName	Variable RightFlag		String AppendWaveName	Variable i, NumFitWaves		NumFitWaves 	 = ItemsInList(DataList)	if (cmpstr(";",DataList) != 0)		for (i=0; i<NumFitWaves; i+=1)			AppendWaveName = StringFromList(i,DataList)			if ((exists(AppendWaveName) == 1) &&  (exists(AxisName) == 1))				CheckDisplayed /W=$WindowName $AppendWaveName				if (V_flag == 0 || RightFlag==1)					if (RightFlag == 1)						AppendtoGraph /W=$WindowName /R $AppendWaveName vs $AxisName					else						if (strlen(PlotAxisName) > 0)							// Create a new named axis							AppendtoGraph /W=$WindowName /L=$PlotAxisName $AppendWaveName vs $AxisName						else							AppendtoGraph /W=$WindowName $AppendWaveName vs $AxisName						endif					endif				endif			endif		endfor	endifEndFunction RemoveWavesInListFromPlot(WindowName, DataList)	String WindowName, DataList		String RemoveWaveName	Variable i, NumFitWaves		NumFitWaves = ItemsInList(DataList)	if (NumFitWaves > 0)		for (i=0; i<NumFitWaves; i+=1)			RemoveWaveName = StringFromList(i,DataList)			RemoveAllInstancesOfNamedWave(WindowName,RemoveWaveName)		endfor	endifEndFunction KillTracesWithMatchStr(WindowName,MatchStr)	String WindowName,MatchStr		if (strlen(WindowName) == 0)		WindowName 	= WinName(0,1)	endif	String PlotTraceList = InclusiveWaveList(TraceNameList(WindowName,";",1),MatchStr,";")	RemoveWavesInListFromPlot(WindowName, PlotTraceList)	KillWavesFromList(PlotTraceList,1)EndFunction RemoveAllInstancesOfNamedWave(WindowName,DataName)	String WindowName,DataName		if (strlen(WindowName) == 0)		WindowName = WinName(0,1)	endif		// Get rid of any occurence numbers	DataName = StripSuffixBySeparator(DataName,"#")		if (strlen(WindowName) > 0)		GetWindow $WindowName gsize		if (V_flag == 0)			do				RemoveFromGraph /W=$WindowName $DataName				CheckDisplayed /W=$WindowName $DataName			while(V_flag)		endif	endifEnd// This is a handy function for overlaying data (e.g., residuals) on a right axisFunction ScaleNamedAxisToFractionOfLeft(GraphName,GraphAxis,ScaleFactor,Data,Axis)	String GraphName, GraphAxis	Variable ScaleFactor	Wave Data,Axis		GetAxis /Q/W=$GraphName bottom	WaveStats /Q/M=1/R=[BinarySearch(Axis,V_max),BinarySearch(Axis,V_min)] Data	Variable GraphAxisMin = V_min		GetAxis /Q/W=$GraphName left	Variable PosNegScale =  sign(V_min/V_max) * (abs(V_min)/abs(V_max))		SetAxis /W=$GraphName $GraphAxis, abs(GraphAxisMin)*PosNegScale*ScaleFactor, abs(GraphAxisMin)*ScaleFactorEnd// ***************************************************************// ***** 			Routines for PLOT AXES and INTERPOLATION// ***************************************************************// This is a version of Igor's "AxisInfo", but forFunction /T PlotAxesInfo(WindowName)	String WindowName		String AxesInfo = ""	Variable AxisMin, AxisMax, AxisStep, NewAxisMin, NewAxisMax, NewAxisStep, MinRangeNum=0, MaxRangeNum=0	Variable i, SameAxes=1, LogFlag, Tolerance, NumTraces=ItemsInList(TraceNameList(WindowName, ";", 1),";")	Variable BIG = 2e9, NPts, Axis1NPts		WAVE Axis 	= WaveRefIndexed(WindowName,0,2)	Axis1NPts 	= DimSize(Axis,0)		AxisMin = WaveRefIndexed(WindowName,0,2)[0]	AxisMax = WaveRefIndexed(WindowName,0,2)[Axis1NPts-1]		WaveStats /M=1/Q WaveRefIndexed(WindowName,0,2)	Tolerance = 1e-8 * V_avg		LogFlag 		= NumberByKey("log(x)", AxisInfo(WindowName,"bottom"),"=")		AxisStep	= max(0,abs(CheckConstantStep(WaveRefIndexed(WindowName,0,2),Tolerance,LogFlag)))		// Are the axes identical? 	for (i=1;i<NumTraces;i+=1)		WAVE AxisWAVE 	= WaveRefIndexed(WindowName,i,2)		NPts 	= DimSize(AxisWAVE,0)				NewAxisMin = min(WaveRefIndexed(WindowName,i,2)[0],WaveRefIndexed(WindowName,i,2)[NPts-1])		if (NewAxisMin < AxisMin)			AxisMin = NewAxisMin			MinRangeNum = i			SameAxes = 0		endif		NewAxisMax = max(WaveRefIndexed(WindowName,i,2)[0],WaveRefIndexed(WindowName,i,2)[NPts-1])		if (NewAxisMax > AxisMax)			AxisMax = NewAxisMax			MaxRangeNum = i			SameAxes = 0		endif		if ((AxisMin<0) && (LogFlag==1))			LogFlag 	= 0			AxisStep = 10^AxisStep		endif		NewAxisStep = abs(CheckConstantStep(WaveRefIndexed(WindowName,i,2),Tolerance,LogFlag))		if (NewAxisStep < AxisStep)			AxisStep = NewAxisStep			SameAxes = 0		endif	endfor		AxesInfo = "SameAxes="+num2str(SameAxes) + ";"	AxesInfo += "AxisMin="+num2str(AxisMin) + ";"	AxesInfo += "AxisMax="+num2str(AxisMax) + ";"	AxesInfo += "AxisStep="+num2str(AxisStep) + ";"		return AxesInfoEnd// ***************************************************************************// **************** 			Displaying a List of Data in a Table// ***************************************************************************// Here, the list of data names must include the data folderFunction DisplayWavesInTable(DataList,TableTitle)	String DataList, TableTitle		String DataAndFolderName, DataName	Variable i, Width, NumColumns=ItemsInList(DataList)		DataAndFolderName = StringFromList(0, DataList, ";")	WAVE Data 	= $(DataAndFolderName)		if (waveexists(Data)==1)		Edit /K=1/W=(790,44,1418,364) Data as TableTitle				DataName = ReturnLastSuffix(DataAndFolderName,":")		Width = strlen(DataName) * 5		ModifyTable width(Data)=Width				for (i=1;i<NumColumns;i+=1)			DataAndFolderName = StringFromList(i, DataList, ";")			WAVE Data 	= $(DataAndFolderName)						if (WaveExists(Data))				AppendToTable Data							DataName = ReturnLastSuffix(DataAndFolderName,":")				Width = strlen(DataName) * 5				ModifyTable width(Data)=Width			endif		endfor	endifEnd// ***************************************************************************// **************** 			Exporting Plots as Images// ***************************************************************************Proc ExportTopPlot(ctrlname):ButtonControl	String ctrlname	PauseUpdate; Silent 1	if (WinType("")==1)		ExportNamedPlot("")	endifEndFunction ExportPlot()		if (WinType("")==1)		ExportNamedPlot("")	endifEnd// This Exports the top plotFunction ExportNamedPlot(WindowName)	String WindowName		String OldDF = getDataFolder(1)	NewDataFolder/O root:SPECTRA	NewDataFolder/O root:SPECTRA:Plotting	 		 	MakeStringIfNeeded("root:SPECTRA:Plotting:gExportName",ReplaceString("'",StringFromList(0, TraceNameList("", ";", 1)),""))		MakeVariableIfNeeded("root:SPECTRA:Plotting:gGraphicsStyle",2)		MakeVariableIfNeeded("root:SPECTRA:Plotting:gGraphicsResn",3)				SVAR gExportName	= $("root:SPECTRA:Plotting:gExportName")		NVAR gGraphicsStyle	= $("root:SPECTRA:Plotting:gGraphicsStyle")		NVAR gGraphicsResn	= $("root:SPECTRA:Plotting:gGraphicsResn")				String ExportName=gExportName		Prompt ExportName, "Name for export (no suffix; max 22 chars)"		Variable GraphicsStyle=gGraphicsStyle		Prompt GraphicsStyle, "Export file type", popup, "JPEG;PICT;TIFF;"		Variable GraphicsResn=gGraphicsResn		Prompt GraphicsResn, "Export file resolution", popup, "72;144;216;288;360;432;504;576"				DoPrompt "Enter the plot export parameters",ExportName,GraphicsStyle,GraphicsResn		if (V_flag)			return -1		endif			gExportName		= ExportName		gGraphicsStyle	= GraphicsStyle		gGraphicsResn		= GraphicsResn				Variable Resolution = 72 * GraphicsResn		if (GraphicsStyle == 1)			SavePICT/WIN=$WindowName/T="JPEG"/B=(Resolution) as ExportName+".JPEG"		elseif (GraphicsStyle == 2)			SavePICT/WIN=$WindowName/T="PICT"/B=(Resolution) as ExportName+".PICT"		elseif (GraphicsStyle == 3)			SavePICT/WIN=$WindowName/T="TIFF"/B=(Resolution) as ExportName+".TIFF"		endif			SetDataFolder $(OldDF)EndProc CloseTopPlot(ctrlName) : ButtonControl	String ctrlName		CloseTopPlotCleanly()EndFunction CloseTopPlotCleanly()		String PlotName = WinName(0,65)//	DoWindow /K $PlotName	String PlotDataFolder = "root:SPECTRA:Plotting:"+PlotName	if (DataFolderExists(PlotDataFolder))		KillAllWavesInFolder(PlotDataFolder,"*")		KillDataFolder /Z $ PlotDataFolder	endif//	if( strlen(PlotName) )//		KillDataFolder root:WinGlobals:$PlotName//	endifEnd// ***************************************************************************// **************** 			Operating on all controls in a Graph// ***************************************************************************Function ShowHideAllControls(PlotName,DisableFlag)	String PlotName	Variable DisableFlag	String RecStr = WinRecreation(PlotName,0)		ShowHideControlsInList(PlotName,MakeListOfControls(GrepList(RecStr, "^\tSetVariable", 0 , "\r"),"SetVariable"),"SetVariable",DisableFlag)	ShowHideControlsInList(PlotName,MakeListOfControls(GrepList(RecStr, "^\tButton", 0 , "\r"),"Button"),"Button",DisableFlag)	ShowHideControlsInList(PlotName,MakeListOfControls(GrepList(RecStr, "^\tPopupMenu", 0 , "\r"),"PopupMenu"),"PopupMenu",DisableFlag)	ShowHideControlsInList(PlotName,MakeListOfControls(GrepList(RecStr, "^\tTabControl", 0 , "\r"),"TabControl"),"TabControl",DisableFlag)	ShowHideControlsInList(PlotName,MakeListOfControls(GrepList(RecStr, "^\tGroupBox", 0 , "\r"),"GroupBox"),"GroupBox",DisableFlag)	ShowHideControlsInList(PlotName,MakeListOfControls(GrepList(RecStr, "^\tCheckBox", 0 , "\r"),"CheckBox"),"CheckBox",DisableFlag)EndFunction /T MakeListOfControls(RecreationList,ControlType)	String RecreationList, ControlType		Variable i=0	String ControlList="", RecreationStr, LastStr=""		do		RecreationStr = ReplaceString(" ",ReplaceString("\t",StringFromList(i,RecreationList,"\r"),""),"=")		if (cmpstr(LastStr,RecreationStr) == 0)			break		endif		LastStr = RecreationStr				ControlList += ReplaceString("\r",StringByKey(ControlType,RecreationStr,"=",","),"")+";"		i+=1	while(1)		return CompressList(ControlList,0)EndFunction ShowHideControlsInList(WindowName,ControlList,ControlType,DisableFlag)	String WindowName, ControlList, ControlType	Variable DisableFlag		String cmd	Variable i, NumControls = ItemsInList(ControlList)		for (i=0;i<NumControls;i+=1)		cmd = ControlType + " " + StringFromList(i,ControlList) + ", win=" + WindowName + ", disable=" + num2str(DisableFlag)		Execute cmd	endforEnd// ***************************************************************************// **************** 			Placing the Cursors at the extent of the displayed graph// ***************************************************************************// Work out the maximum displayed x-axis range of trace under Csr A & B Function FullDisplayedRange(WindowName,DataOnlyFlag)	String WindowName	Variable DataOnlyFlag		String TraceList, TraceName	Variable i, NumTraces, AxisPt, MinAxisPt, MaxAxisPt		if (WinType(WindowName) != 1)		return 0	else		// Get the current display range. 		GetAxis /Q/W=$WindowName bottom		TraceList 	= TraceNameList(WindowName,";",1)		if (DataOnlyFlag)			TraceList	= InclusiveWaveList(TraceList,"_data",";")		endif		NumTraces	= ItemsInList(TraceList)				String MinRangeTrace = StringFromList(0,TraceList)		String MaxRangeTrace = StringFromList(1,TraceList)				// Find traces that reach the x-axis extrema		for (i=0;i<NumTraces;i+=1)			TraceName	= StringFromList(i,TraceList)						AxisPt		= BinarySearch(XWaveRefFromTrace(WindowName,TraceName), V_min)			if (AxisPt > -1)				MinAxisPt 		= AxisPt				MinRangeTrace	= TraceName			endif						AxisPt		= BinarySearch(XWaveRefFromTrace(WindowName,TraceName), V_max)			if (AxisPt > -1)				MaxAxisPt 		= AxisPt				MaxRangeTrace	= TraceName			endif					endfor				Cursor /P /W=$WindowName A  $MinRangeTrace min(MinAxisPt,MaxAxisPt)		Cursor /P /W=$WindowName B  $MaxRangeTrace max(MinAxisPt,MaxAxisPt)	endifEnd// This is used in the SAXS routinesFunction DisplayCursors(PlotName, TraceName, AxisName, CsrFolder, CsrAName, CsrBName,ValueFlag)	String PlotName, TraceName, AxisName, CsrFolder, CsrAName, CsrBName	Variable ValueFlag		NVAR gCsrA		= $(CheckFolderColon(CsrFolder)+CsrAName)	NVAR gCsrB		= $(CheckFolderColon(CsrFolder)+CsrBName)		if (strlen(WinList(PlotName, ";", "WIN:1" )) == 0)		return 0	endif		if (strlen(TraceName) > 0)		CheckDisplayed /W=PlotName $TraceName		if (V_flag == 0)			TraceName = StringfromList(0, AxisTraceListBG(PlotName, AxisName,""))		endif	else		TraceName = StringfromList(0, AxisTraceListBG(PlotName, AxisName,""))	endif		if (NVAR_Exists(gCsrA) == 1)		PlaceCursorOnTrace(PlotName, TraceName, "A", gCsrA, ValueFlag)	endif		if (NVAR_Exists(gCsrB) == 1)		PlaceCursorOnTrace(PlotName, TraceName, "B", gCsrB, ValueFlag)	endifEndFunction PlaceCursorOnTrace(PlotName, TraceName, CsrType, CsrParam, ValueFlag)	String PlotName, TraceName, CsrType	Variable CsrParam, ValueFlag		Variable CsrPosn = CsrParam		if (ValueFlag == 1)		CsrPosn	= AxisValueToPoint( XWaveRefFromTrace(PlotName, TraceName), CsrParam)	endif		Cursor /P /W=$PlotName $CsrType $TraceName CsrPosnEndFunction CaptureCursorPositions(PlotName, CsrFolder, CsrAName, CsrBName,ValueFlag)	String PlotName, CsrFolder, CsrAName, CsrBName	Variable ValueFlag		if (strlen(WinList("Porod",";","WIN:1"))==0)		return 0	endif		if (DataFolderExists(CsrFolder) == 0)		NewDataFolder $(CsrFolder)	endif		if (DataFolderExists(CsrFolder) == 1)		MakeVariableIfNeeded(CheckFolderColon(CsrFolder)+CsrAName,NAN)		MakeVariableIfNeeded(CheckFolderColon(CsrFolder)+CsrBName,NAN)				NVAR gCsrA		= $(CheckFolderColon(CsrFolder)+CsrAName)		NVAR gCsrB		= $(CheckFolderColon(CsrFolder)+CsrBName)				Variable CsrA	= GetCursorPositionOrValue(PlotName,"A",1)		Variable CsrB 	= GetCursorPositionOrValue(PlotName,"B",1)				gCsrA 	= min(CsrA,CsrB)		gCsrB	= max(CsrA,CsrB)	else		Print " *** Could not save the cursor positions"	endifendFunction GetCursorPositionOrValue(WindowName,CsrStr,ValueFlag)	String WindowName, CsrStr	Variable ValueFlag		if (strlen(WindowName) > 0)		if (strlen(WinList(WindowName, ";", "WIN:1" )) == 0)			return NAN // The window does not exist		endif	endif		if (CsrIsOnPlot(WindowName,CsrStr) == 0)		// The cursor is not on the plot, so return the relevant display extremum		GetAxis /Q/W=$WindowName bottom		if (cmpstr("A",CsrStr) == 0)			if (ValueFlag == 1)				return V_min			else				return 0			endif		else			if (ValueFlag == 1)				return V_max			else				return Inf			endif		endif	endif		if (ValueFlag == 1)		return CsrXWaveRef($CsrStr,WindowName)[pcsr($CsrStr,WindowName)]	else		return pcsr($CsrStr,WindowName)	endifEndFunction CsrIsOnPlot(WindowName,CsrStr)	String WindowName, CsrStr		// Consider only the name of the primary window. 	if (strlen(WindowName) > 0)		DoWindow $(ParseFilePath(0, WindowName, "#", 0, 0))		if (!V_flag)			return 0		endif	endif		if (strlen(CsrInfo($CsrStr,WindowName)) == 0)		return 0	else		return 1	endifEnd// ***************************************************************************// **************** 			Set the x-axis range and automatically adjust NAMED axis intensity. // ***************************************************************************Function ReturnAxisMinOrMaxIntensity(WindowName,AxisName,LogFlag,StackInc,StackNum,CycleNum,MaxFlag)	String WindowName, AxisName	Variable LogFlag, StackInc,StackNum, CycleNum,MaxFlag		String TraceList, TraceName	Variable i, Offset, NumTraces, LowInt, HighInt, MinInt, MaxInt, NewMinInt, NewMaxInt, IncRange		Variable ExtremeInt, NewExtremeInt	Variable AxisMin, AxisMax	GetAxis /Q bottom	AxisMin = V_min	AxisMax = V_max		if (StrSearch(AxisList(WindowName),AxisName,0) > -1)		TraceList	= AxisTraceListBG(WindowName, AxisName,"")				// Remove traces we don't need to consider. 		TraceList 		= RemoveNonTracesFromList(TraceList)		NumTraces 	= ItemsInList(TraceList, ";")		if (NumTraces > 0)			TraceName = ReplaceString("'",StringFromList(0, TraceList, ";"),"")			ExtremeInt = ReturnTraceMinOrMaxIntensity(WindowName, TraceName, AxisMin, AxisMax, LogFlag, MaxFlag)						if (NumTraces>1)				for (i=1;i<NumTraces;i+=1)					TraceName = ReplaceString("'",StringFromList(i, TraceList, ";"),"")										NewExtremeInt = ReturnTraceMinOrMaxIntensity(WindowName, TraceName, AxisMin, AxisMax, LogFlag, MaxFlag)										Offset = (StackInc * StackNum) * trunc(i/(max(1,CycleNum)))										if (MaxFlag==1)						ExtremeInt = max(ExtremeInt,NewExtremeInt + Offset)					else						ExtremeInt = min(ExtremeInt,NewExtremeInt + Offset)					endif				endfor			endif		endif				return ExtremeInt	else		Print " *** The window "+WindowName+" does not have the axis "+AxisName		return NAN	endifEndFunction /T RemoveNonTracesFromList(TraceList)	String TraceList		TraceList = RemoveFromList("polynomial",TraceList)	TraceList = RemoveFromList("Bar1Height",TraceList)	TraceList = RemoveFromList("Bar2Height",TraceList)	TraceList = RemoveFromList("Bar3Height",TraceList)	TraceList = RemoveFromList("Bar4Height",TraceList)	TraceList = RemoveFromList("DataMinusBG",TraceList)	TraceList = RemoveFromList("DataDivideBG",TraceList)	// Do not consider Igor fit results	TraceList =  GrepList(TraceList,"(?i)^fit_",1,";")		return TraceListEnd// This returns the maximum or minimum y-value of a plotted wave within a range of axis values. // If the INTENSITY axis is plotted on a log-scale, however, it can be tricky to find the best minium value. Function ReturnTraceMinOrMaxIntensity(WindowName, TraceName, AxisMin, AxisMax, LogFlag, MaxFlag)	String WindowName, TraceName	Variable AxisMin, AxisMax, LogFlag, MaxFlag		Variable AxisMinP, AxisMaxP, MinIntRatio = 10e10	AxisMinP = AxisValueToPoint( XWaveRefFromTrace(WindowName, TraceName), AxisMin)	AxisMaxP = AxisValueToPoint( XWaveRefFromTrace(WindowName, TraceName), AxisMax)		Duplicate /O/D TraceNameToWaveRef(WindowName, TraceName), tempWave	WaveStats /Q/M=1/R=[AxisMinP,AxisMaxP] tempWave		if (LogFlag == 1)		// Convert negative values to NANs		tempWave[] = ReplaceThresholdValue(TraceNameToWaveRef(WindowName, TraceName)[p],0,1,tempWave[p],NAN)		// Convert zeroes to NANs		ReplaceZerosWithValue(tempWave,NAN)				WaveStats /M=1/Q/R=[AxisMinP,AxisMaxP] tempWave	endif	KillWaves /Z tempWave		if (V_npnts == 0)		// E.g., the wave is only NANs		return 0	else		if (MaxFlag == 1)			return V_max		else			if (LogFlag == 1)				return max(V_min,V_max/MinIntRatio)			else				return V_min			endif		endif	endifEnd// **** OBselete. Function FindMinAndMaxAxisRange(WindowName,AxisName,MinX,MaxX)	String WindowName,AxisName	Variable &MinX, &MaxX		String TraceList, TraceName	Variable i, NumTraces, FirstAxis=1		// *** Use AxisTraceList instead of TraceNameList	TraceList = AxisTraceListBG(WindowName, AxisName,"")	NumTraces = ItemsInList(TraceList, ";")		if (NumTraces>1)		for (i=0;i<NumTraces;i+=1)			WAVE TraceAxis = XWaveRefFromTrace(WindowName, StringFromList(i,TraceList) )			if (WaveExists(TraceAxis))				WaveStats /M=1/Q TraceAxis				if (FirstAxis)					MinX = V_min					MaxX = V_max					FirstAxis = 0				else					MinX = min(MinX,V_min)					MaxX = max(MaxX,V_max)				endif			endif		endfor	endif		print MinX, MaxXEnd// A very useful alternative to TraceListFunction/S AxisTraceListBG(graphName, axisName,suffix)	String graphName, axisName, suffix		String traceName, traceSuffix, info, temp, result = ""	if (strlen(graphName) == 0)		graphName = WinName(0, 1)	endif		String MatchStr = ReplaceString("*",suffix,"")		GetWindow /Z $graphName gsize	if (V_flag != 0)		return ""			// No such graph	endif		String axInfo = AxisInfo(graphName, axisName)	if (strlen(axInfo) == 0)		return ""			// No such axis	endif			String traceList = TraceNameList(graphName, ";", 1)		Variable GoodTrace, NStars, index = 0	do		traceName		= StringFromList(index, traceList)		if (strlen(traceName) == 0)			break			// No more traces.		endif				GoodTrace = 0		if (strlen(suffix) > 0)			traceSuffix	= ReturnLastSuffix(traceName,"_")			NStars = CountCharsInText(suffix,"*")			if (NStars == 0)				// Need identical match to suffix				if (cmpstr(suffix,traceSuffix) == 0)					GoodTrace = 1				endif			elseif (NStars == 1)				// Look for matched text anywhere in suffix				if (StrSearch(traceSuffix,MatchStr,0) > -1)					GoodTrace = 1				endif			elseif (NStars == 2)				// Look for matched text anywhere in trace name				if (StrSearch(traceName,MatchStr,0) > -1)					GoodTrace = 1				endif			endif					else			GoodTrace = 1		endif				if (GoodTrace == 1)			info = TraceInfo(graphName, traceName, 0)			temp = "XAXIS:" + axisName + ";"			if (strsearch(info, temp, 0) >= 0)				result += traceName+";"			endif			temp = "YAXIS:" + axisName + ";"			if (strsearch(info, temp, 0) >= 0)				result += traceName+";"			endif		endif				index += 1	while(1)		return resultEnd// This avoids the annoying negative numbers if out-of-rangeFunction AxisValueToPoint(DataOrAxis, Value)	Wave DataOrAxis	Variable Value			Variable point = BinarySearch(DataOrAxis, Value)	if ((point == -1) || (point == -3))		return 0	elseif (point == -2)		return numpnts(DataOrAxis)-1	else		return point	endifEnd