#pragma rtGlobals=1		// Use modern global access method.Function TestForemptyFile()	DebuggerOptions			// Get current state	Variable temp = V_debugOnError	DebuggerOptions debugOnError=0	LoadWave/G "Clipboard"	Variable err = GetRTError(1)	Print "Error", err	DebuggerOptions debugOnError=tempEnd// ***************************************************************************// **************** 	The MAIN PANEL for Data & Coefficients Loading// ***************************************************************************Proc LoadSpectra()		PauseUpdate; Silent 1		KillPlotsPanelsAndTables("Table0","tables")	DoWindow SpectraLoadPanel	if (V_flag == 0)		InitLoadSpectra()		InitializeColumnMerge()		InitPlotSpectra()		MakeIzeroFolder()		CreateLoadSpectraPanel()		SetCommonLabels()	endifEndFunction InitLoadSpectra()	// Make waves that list all LOADED data	NewDataFolder/O/S root:SPECTRA		if (exists("wDataList")==0)			Make /N=0/T wDataList		endif		if (exists("wDataSel")==0)			Make /O/N=0 wDataSel		endif		if (exists("wDataGroup")==0)			Make /O/N=0 wDataGroup		endif			NewDataFolder /O root:SPECTRA:Import			// MAKE WAVES THAT LIST THE FILES IN THE HARD DRIVE FOLDER	NewDataFolder/O/S root:SPECTRA:Data		// For ListBox containing all the files in a folder		if (exists("wFileList")==0)			Make /O/N=0/T wFileList		endif		if (exists("wFileSel")==0)			Make /O/N=0 wFileSel		endif			// *** MAKE LOCATION FOR IGOR GLOBAL VARIABLES//	NewDataFolder /O root:WinGlobals		// *** MAKE GLOBAL VARIABLES FOR ALL SPECTRA ROUTINES	NewDataFolder/O/S root:SPECTRA:GLOBALS		String /G gPath2Data, gDataExt, gMatchStr, gStripText, gReplaceText				// The default values for these variables is zero. 		Variable /G gAxisCol, g2DDataFlag, gInvertDataNames, gSegmentChoice		Variable /G gNameSource, gColTitleChoice, gUserNameFlag, gErrorsFlag, gGroupLoadFlag, gStripPrefixFlag				// The default values for these variables is non-zero		MakeVariableifNeeded("gSortFlag",2)		MakeVariableifNeeded("gStripSuffixFlag",1)		MakeVariableIfNeeded("gDataCol",1)		MakeVariableIfNeeded("gAxisSigCol",-1)		MakeVariableIfNeeded("gDataSigCol",-1)		MakeVariableIfNeeded("g1ColAxisInFile",1)		MakeVariableIfNeeded("g1ColNumPts",1)		MakeStringIfNeeded("gColAssignChoice","2-column auto")				// Popup Menu lists		String /G 	gColAssignOptions = "2-column auto;2-column manual;n-column complex;4-column data & errors;n-column data & fit;igor text data & fit;n-column to (n-1) data;n x axis-data;1-column to n data;2-column to n data;"					gColAssignOptions += "RockJockMD;XANES data & Izero;SSRL .dat XANES;ALS .qx XANES;Coefficients;KolXPD Igor txt;Rigaku ASC;Profex data and fit;pH measurement;pH-stat data;Titration data;dielectric S11;DLS Deconvolve Sizes;DLS Elucidate g(t);DLS Elucidate I(n);"					gColAssignOptions += "PAR CV;PAR CV (segmented);PAR LSCV;PAR Chrono;PAR Open;PAR EIS;Temperature log;"					gColAssignOptions += "transient absorption;Eos;TIFF image;FTIR kinetics;Fluorolog EEM;Synergy EEM;savedata hybrid;GenX data and fit;ROD data and fit;PDS rod integration;"//		String /G gNameOptions = "file names;column headings;"		String /G gSortOptions = "none;data names;axis;names & axis;"		String /G gTableOptions = "no;axis & data;data only;all columns;"			SetDataFolder root:End// ***************************************************************************// **************** 	The "peek" option to view a text file as a notebook// ***************************************************************************Function LoadAsNotebook(ctrlname):ButtonControl	String ctrlname		Wave/T FileList		= root:SPECTRA:Data:wFileList	Wave FileSelection	= root:SPECTRA:Data:wFileSel	SVAR gPath2Data 		= root:SPECTRA:GLOBALS:gPath2Data		String FileName, NoteBookName, PathAndFileName		if (strlen(gPath2Data) > 0)		Print " 		... Load file(s) as notebook from",gPath2Data		FindValue /V=1 FileSelection		if (V_value > -1)			FileName 			= FileList[V_value]			NoteBookName 	= UniqueName(CleanUpName(FileName,0),10,0)			PathAndFileName 	= gPath2Data + FileName			KillNamedNotebook(NoteBookName)			OpenNotebook /K=1/N=$NoteBookName PathAndFileName		endif	endifEnd// ***************************************************************************// **************** 	The main routine for Data & Coefficients Loading// ***************************************************************************Function LoadSelectedDataFiles(ctrlname):ButtonControl	String ctrlname		NVAR gSegmentChoice 	= root:SPECTRA:GLOBALS:gSegmentChoice	NVAR g2DDataFlag 			= root:SPECTRA:GLOBALS:g2DDataFlag	NVAR gUserNameFlag 			= root:SPECTRA:GLOBALS:gUserNameFlag	NVAR gStripSuffixFlag		= root:SPECTRA:GLOBALS:gStripSuffixFlag	SVAR gColAssignChoice		= root:SPECTRA:GLOBALS:gColAssignChoice		Wave/T wDataList				= root:SPECTRA:wDataList	Wave wDataGroup				= root:SPECTRA:wDataGroup	Wave/T FileList				= root:SPECTRA:Data:wFileList	Wave FileSelection			= root:SPECTRA:Data:wFileSel		String TwoDDataName, AxisNameList, DataNameList, SampleNameList=""	String FileName, DataName, SampleName, CopySuffix="", OptSuffix="", cmd, PARType	Variable i=0, NLoaded=1, LoadAllFlag=0, NFiles=numpnts(FileList), UserCancelFlag=0, CoeffFlag=0, ContinueFlag=1, SegmentFlag=0, TwoDNameFlag=0		String OldDf = GetDataFolder(1)	SetDataFolder root:SPECTRA:Import		KillWaves /A/Z	SetDataFolder $OldDf		// ----------------------------------------------	// Really want to move all the Coefficients loading stuff to a new routine. 	// ----------------------------------------------	if (cmpstr(gColAssignChoice,"Coefficients") == 0)		InitLoadCoefficients()		SetDataFolder root:COEFFICIENTS:Load		CoeffFlag = 1	endif		// ----------------------------------------------	// Some Data Load procedures need user inputs, so obtain these ONCE	// ----------------------------------------------	UserCancelFlag 	= SetDataLoadPreferences(gColAssignChoice,OptSuffix)	if (UserCancelFlag == 1)		Print " *** Data load cancelled by user."; Abort	endif		gSegmentChoice 	= -1		if (cmpstr(ctrlname,"LoadEveryFileButton")==0)		LoadAllFlag = 1	else		// Check that at least one file is selected		WaveStats /Q/M=1 FileSelection		if (V_avg == 0)			SetDataFolder root:			return 0		endif	endif		// ******* NUMBERING THE LOAD FOLDERS *******	Variable NewLoadFolderNumber , LoadFolderIndex=0	Variable NextLoadFolder 	= NextLoadFolderNumber()	// *************************************		SetDataFolder root:SPECTRA:Import			for (i=0;i<NFiles;i+=1)			if ((FileSelection[i] == 1) || (LoadAllFlag == 1))				FileName = FileList[i]								if (cmpstr("pxp",ReturnLastSuffix(FileName,".")) == 0)					// Skip Igor experiment files				elseif (strlen(FileName) == 0)				else									KillNamedNotebook(FileName)										if (g2DDataFlag)						// When loading mutliple files into a single matrix, give each input wave a simple name ...						SampleName 		= "OneDSpec"+num2str(i)						// ... and look up a filename from the first file only						if (TwoDNameFlag == 0)							DataName 				= DataNameFromFileName(FileName) + OptSuffix							TwoDDataName 		= GetSampleName(DataName,OptSuffix,CopySuffix,gStripSuffixFlag,0,0)							TwoDNameFlag 		= 1						endif					else						DataName 		= DataNameFromFileName(FileName) + OptSuffix						SampleName 	= GetSampleName(DataName,OptSuffix,CopySuffix,gStripSuffixFlag,gUserNameFlag,0)					endif										if ((strlen(SampleName) == 0) || cmpstr("_quit!_",SampleName) == 0)						ContinueFlag = - 1					else											// Calculate the number of the next data load folder to be created. 						NewLoadFolderNumber 	= NextLoadFolder + LoadFolderIndex												// --------------------	The routine for loading COEFFICIENTS   -------------------						if (cmpstr("Coefficients",gColAssignChoice)== 0)							 ContinueFlag = LoadSingleCoefficientsFile(FileName,DataName)						else							// ------------------	The routines for loading MANY SPECTRA PER FILE    -------------------							if (cmpstr("n-column to (n-1) data",gColAssignChoice)== 0)								 ContinueFlag 	= LoadMultipleWavesFromFile(FileName,SampleName,NewLoadFolderNumber,NLoaded)								 							elseif (cmpstr("n x axis-data",gColAssignChoice)== 0)								 ContinueFlag 	= LoadNAxisDataColumns(FileName,SampleName,NewLoadFolderNumber,NLoaded)							elseif (cmpstr("1-column to n data",gColAssignChoice)== 0)								 ContinueFlag 	= Load1ColumnData(FileName,SampleName,NewLoadFolderNumber,NLoaded)								elseif (cmpstr("2-column to n data",gColAssignChoice)== 0)								 ContinueFlag 	= Load2ColumnData(FileName,SampleName,NewLoadFolderNumber,NLoaded)																elseif (cmpstr("KolXPD Igor txt",gColAssignChoice)== 0)								 ContinueFlag 	= LoadKolXPD(FileName,SampleName,NewLoadFolderNumber,NLoaded)									  							elseif (cmpstr("Rigaku ASC",gColAssignChoice)== 0)								 ContinueFlag 	= LoadRigakuASC(FileName,SampleName,NLoaded)					 								 							elseif (cmpstr("Synergy EEM",gColAssignChoice)== 0)								 ContinueFlag 	= LoadEEM("Synergy",FileName,SampleName,NLoaded)								 							elseif (cmpstr("savedata hybrid",gColAssignChoice)== 0)								 ContinueFlag 	= LoadSavedDataHybridMode(FileName,SampleName,NewLoadFolderNumber,NLoaded)								 							elseif (cmpstr("ROD data and fit",gColAssignChoice)== 0)								 ContinueFlag 	= LoadRODDataAndFit(FileName,SampleName,"ROD",NewLoadFolderNumber,NLoaded)								 							elseif (cmpstr("PDS rod integration",gColAssignChoice)== 0)								 ContinueFlag 	= LoadRODDataAndFit(FileName,SampleName,"PDS",NewLoadFolderNumber,NLoaded)														elseif (StrSearch(gColAssignChoice,"PAR",0) > -1)								PARType = ReplaceString("PAR ",gColAssignChoice,"")								ContinueFlag 	= LoadPARFile(FileName,DataName,SampleName,PARType,NLoaded)															else								// --------------	The main routine for loading ONE SPECTRUM PER FILE   -------------------								ContinueFlag 	= LoadSingleDataFile(FileName,DataName,SampleName,SampleNameList,NewLoadFolderNumber,NLoaded)							endif						endif					endif										if (ContinueFlag == -1)						break					endif										// Update the number of the next data load folder to be created. 					if (g2DDataFlag == 0)						LoadFolderIndex 	+= NLoaded					endif				endif			endif		endfor		// ----------------------------------------------				if (CoeffFlag == 1)			NVAR gNumCoeffsLoaded	= root:COEFFICIENTS:GLOBALS:gNumCoeffsLoaded			if (gNumCoeffsLoaded > 0)				setDataFolder root:COEFFICIENTS					Make /D/O/N=(gNumCoeffsLoaded) wCoeffValues,  wCoeffErrors					Make /D/O/N=(gNumCoeffsLoaded) wCoeffAxis=x, wCoeffAxisErrors=NAN					CheckCoeffPlotPanel()			endif		endif				// Convert a set of 1D spectra into a 2D plot		if ((g2DDataFlag == 1) && (ItemsInList(SampleNameList) > 1))			if (Finish2DDataInput(TwoDDataName,SampleNameList,NextLoadFolder) == 1)				DisplayPlottingPanel()			endif		endif			if (LoadFolderIndex > 0)			DisplayPlottingPanel()		endif				SetDataFolder root:End// ***************************************************************************// **************** 		Routine for loading a single Data (text) or Coefficients (binary) file. // ***************************************************************************Function LoadSingleDataFile(FileName,DataName,SampleName,SampleNameList,LoadFolderNumber,NLoaded)	String FileName, DataName, SampleName, &SampleNameList	Variable LoadFolderNumber, &NLoaded		Wave/T wDataList			= root:SPECTRA:wDataList	Wave wDataSelection		= root:SPECTRA:wDataSel	Wave wDataGroup			= root:SPECTRA:wDataGroup		NVAR gSegmentChoice 	= root:SPECTRA:GLOBALS:gSegmentChoice	NVAR g2DDataFlag 		= root:SPECTRA:GLOBALS:g2DDataFlag	SVAR gColAssignChoice 	= root:SPECTRA:GLOBALS:gColAssignChoice		String AxisWaveName, DataWaveName, NewFileName, WavesToKill	String SortWaveList, ListOfNewSampleNames = "", AssocDataList="", AssocDataFolder=""	Variable i, CmplxFlag=0, ErrorsFlag, MonotonicFlag=1, SegmentChoice, SegmentRange, NumLoaded, NewNumLoaded, NumNewData, IndividualFolders=0		// 	Use file-specific loading routines to import columns of data into the SPECTRA:Import folder. 	strswitch(gColAssignChoice)		case "2-column auto":			ListOfNewSampleNames = LoadSingleTextFile(FileName,SampleName,0,0,0,MonotonicFlag,-1)			break					case "2-column manual":			ListOfNewSampleNames = LoadSingleTextFile(FileName,SampleName,0,0,0,MonotonicFlag,-1)			break			//		case "3-column complex"://			CmplxFlag = 1//			ListOfNewSampleNames = LoadComplexTextFile(FileName,SampleName)//			break		case "n-column complex":			CmplxFlag = 1			ListOfNewSampleNames = LoadComplexTextFile(FileName,SampleName)			break					case "4-column data & errors":			ListOfNewSampleNames = LoadSingleTextFile(FileName,SampleName,1,0,0,MonotonicFlag,4)			break					case "n-column data & fit":			ListOfNewSampleNames = LoadSingleTextFile(FileName,SampleName,0,1,0,MonotonicFlag,-1)			break					case "GenX data and fit":			ListOfNewSampleNames = LoadGenXDataFit(FileName, SampleName)			break					case "igor text data & fit":			ListOfNewSampleNames = LoadIgorTextDataFitFile(FileName,SampleName,AssocDataList)			break					case "RockJockMD":			ListOfNewSampleNames = LoadSingleRockJockFile(FileName,SampleName)			break					case "Profex data and fit":			ListOfNewSampleNames = LoadProfexDataFit(FileName,SampleName,AssocDataList)			break					case "XANES data & Izero":			ListOfNewSampleNames = LoadSingleXANESFile(FileName,SampleName)			break					case "SSRL .dat XANES":			ListOfNewSampleNames = LoadSSRLXANESSpectrum(FileName,SampleName)			break				case "ALS .qx XANES":			ListOfNewSampleNames = LoadALSXANESSpectrum(FileName,SampleName)			break						NewFileName = ConvertT70Data(FileName,DataName,SampleName)			if (strlen(NewFileName) > 0)				Print " *** Converting Mettler titration data and loading Volume vs pH from unicode file"				ListOfNewSampleNames = LoadSingleTextFile(NewFileName,SampleName,0,0,0,MonotonicFlag,-1)			else				Print " *** Loading Mettler Titration Volume vs pH from ascii file"				ListOfNewSampleNames = LoadSingleTextFile(FileName,SampleName,0,0,0,MonotonicFlag,-1)			endif			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "pH measurement":			Print " *** Loading Mettler pH measurement file, pH vs. time"			ListOfNewSampleNames = LoadpHMeasurementFile(FileName,DataName,SampleName)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "pH-stat data":			Print " *** Loading Mettler pH-stat file and convering into time-vol data"			ListOfNewSampleNames = LoadpHStatFile(FileName,DataName,SampleName)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "dielectric S11":			Print " *** Loading Keysight S11 GHz impedance parameters"			CmplxFlag = 1			ListOfNewSampleNames = LoadS11File(FileName,SampleName)			break			//		case "dielectric SPEAG"://			Print " *** Loading Speag dielectric data"//			CmplxFlag = 1//			ListOfNewSampleNames = LoadSpeagFile(FileName,SampleName)//			break					case "DLS Deconvolve Sizes":			Print " *** Loading DLS Histogram from Precision Deconvolve output file"			ListOfNewSampleNames = LoadSingleDLSData(FileName,DataName,SampleName,1)			if (strlen(ListOfNewSampleNames)==0)				DoAlert 1,"Load error: Did you select PrecisionDeconvolve instead of PrecisionElucidate file? Abort?"				if (V_flag)					return -1				endif			endif			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case  "DLS Elucidate g(t)": 			Print " *** Loading DLS Correlation Function, g(t), from Precision Elucidate data file"			ListOfNewSampleNames = LoadDLSCorrFn(FileName,SampleName)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "DLS Elucidate I(n)":			Print " *** Loading DLS Detector Intensities, I(t), from Precision Elucidate data file"			ListOfNewSampleNames = LoadSingleDLSData(FileName,DataName,SampleName,3)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "CV data":			Print " *** Loading cyclic voltammetry data"			ListOfNewSampleNames 	= LoadSingleTextFile(FileName,SampleName,0,0,0,MonotonicFlag,-1)			g2DDataFlag 	= 0		// Too difficult to make a 2D array out of this kind of input			break					case "Temperature log":			Print " *** Loading temperature log"			ListOfNewSampleNames 	= LoadTemperatureLog(FileName,SampleName)			break					case "TIFF image":			Print " *** Loading image"			ListOfNewSampleNames 	= Load2DData(gColAssignChoice,FileName,DataName,SampleName,AssocDataList, AssocDataFolder)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "transient absorption":			Print " *** Loading 2D matrix of transient absorption spectra"			ListOfNewSampleNames 	= Load2DData(gColAssignChoice,FileName,DataName,SampleName,AssocDataList, AssocDataFolder)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "Eos":			Print " *** Loading 2D matrix of Eos transient absorption spectra"			ListOfNewSampleNames 	= Load2DData(gColAssignChoice,FileName,DataName,SampleName,AssocDataList, AssocDataFolder)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "Fluorolog EEM":			Print " *** Loading single Excitation-Emission Matrix (EEM) from Fluorolog spectrometer"			ListOfNewSampleNames 	= Load2DData(gColAssignChoice,FileName,DataName,SampleName,AssocDataList, AssocDataFolder)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break					case "FTIR kinetics":			Print " *** Loading 2D matrix of transient absorption spectra"			ListOfNewSampleNames 	= Load2DData(gColAssignChoice,FileName,DataName,SampleName,AssocDataList, AssocDataFolder)			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input			break			//		case "transient absorption t0 corr"://			Print " *** Loading 2D matrix of transient absorption spectra with t0 background correction"//			ListOfNewSampleNames 	= LoadCNMDataT0Corr(FileName,DataName,SampleName,AssocDataList, AssocDataFolder)//			g2DDataFlag 	= 0		// No sense to make a 2D array out of this kind of input//			break				endswitch		if (MonotonicFlag == 0)		if (gSegmentChoice < 0)			SegmentChoice 	= abs(gSegmentChoice)			Prompt SegmentChoice, "Sort or segment non-monotonic data?", popup, "sort axis and data;segment axis and data;do nothing;" 			SegmentRange 		= (sign(gSegmentChoice) < 0) ? 1 : 2			Prompt SegmentRange, "Apply choice to", popup, "this file only;all files in load;"			DoPrompt "Detected a non-monotonic axis", SegmentChoice, SegmentRange			if (V_flag)				Print " *** Data load cancelled by User, or data load problem "				return 0			endif						gSegmentChoice 	= (SegmentRange == 1) ? -1 * SegmentChoice : SegmentChoice		endif				if (abs(gSegmentChoice) == 1)			SortWaveList = ListOfNewSampleNames+"_axis;"+ListOfNewSampleNames+"_data;"			if (ItemsInList(AssocDataList) > 0)				SortWaveList = SortWaveList + AssocDataList			endif			WaveList_Sort(SortWaveList)					elseif (abs(gSegmentChoice) == 2)			ListOfNewSampleNames 	= SegmentData(StringfromList(0,ListOfNewSampleNames),"root:SPECTRA:Import")		endif	endif		// Need to tell the calling function how many individual data load folders have been created ... ? 	// .. NO! ... All the above routines load a single file with multiple associated files. So we should not be creating multiple load folders	NLoaded = ItemsInList(ListOfNewSampleNames)		if (NLoaded > 0)			if (g2DDataFlag == 1)			// Leave the loaded waves in the Import folder for the time being. 			SampleNameList 	= AddListItem(StringFromList(i,ListOfNewSampleNames),SampleNameList)		else					// 2023-02-18 This might break something but the commented-out code is wrong as it stands. 						NewLoadedDataFolder(LoadFolderNumber+i,CmplxFlag,"root:SPECTRA:Import",SampleName+"_axis",SampleName+"_data",SampleName,"",AssocDataList,AssocDataFolder)						WavesToKill 		= FolderWaveList("root:SPECTRA:Import",SampleName+"*",";","",-1,0)			KillWavesFromList(WavesToKill,0)//			for (i=0;i<NLoaded;i+=1)//				//				SampleName 		= StringFromList(i,ListOfNewSampleNames)//				//				// !*!* Redundant. AxisWaveName and DataWaveName are NOT USED in this routine!! //				DataWaveName 	= ReplaceString("_data",SampleName,"") + "_data"//				AxisWaveName 	= ReplaceString("_data",SampleName,"") + "_axis"//				NewLoadedDataFolder(LoadFolderNumber+i,CmplxFlag,"root:SPECTRA:Import",AxisWaveName,DataWaveName,SampleName,"",AssocDataList,AssocDataFolder)//				//			endfor//			//			for (i=0;i<NLoaded;i+=1)//				// clean up the import folder AFTER all the data have been loaded. //				SampleName 		= StringFromList(i,ListOfNewSampleNames)//				WavesToKill 		= FolderWaveList("root:SPECTRA:Import",SampleName+"*",";","",-1,0)//				KillWavesFromList(WavesToKill,0)//			endfor					endif				return 1	else		Print " *** Data load cancelled by User, or data load problem "		return 0	endifEnd// ***************************************************************************// **************** 		Separate routine to set some plotting preferences// ***************************************************************************Function SetDataLoadPreferences(ColAssignChoice,OptSuffix)	String ColAssignChoice, &OptSuffix		// Preset column numbers	NVAR gAxisCol					= root:SPECTRA:GLOBALS:gAxisCol	NVAR gDataCol					= root:SPECTRA:GLOBALS:gDataCol	NVAR gAxisSigCol				= root:SPECTRA:GLOBALS:gAxisSigCol	NVAR gDataSigCol				= root:SPECTRA:GLOBALS:gDataSigCol	NVAR g1ColLoadAxis 			= root:SPECTRA:GLOBALS:g1ColLoadAxis	// Some data axes should definitely not be sorted. 	NVAR gSortFlag				= root:SPECTRA:GLOBALS:gSortFlag	// Variables for auto vs. manual data naming	NVAR gNameSource			= root:SPECTRA:GLOBALS:gNameSource	NVAR gUserNameFlag 			= root:SPECTRA:GLOBALS:gUserNameFlag	// THe list of all possible present axis labels. 	SVAR gCommonXLabels 		= root:SPECTRA:Plotting:gCommonXLabels	SVAR gCommonYLabels 		= root:SPECTRA:Plotting:gCommonYLabels		Variable UserCancelFlag=0	String PrefsFolderName	= "root:SPECTRA:Plotting:Preferences"		// If the Preferences folder does not exist, create it and apply universal default. 	if (DataFolderExists(PrefsFolderName)==0)		NewDataFolder $(PrefsFolderName)		MakeVariableIfNeeded(PrefsFolderName+":gXLabelChoice",WhichListItem("Photon energy",gCommonXLabels))		MakeVariableIfNeeded(PrefsFolderName+":gYLabelChoice",WhichListItem("Intensity",gCommonYLabels))	endif		// Default is to look for the data name in the file name (not column headings). 	gNameSource = 0	strswitch(ColAssignChoice)		case "2-column auto":			gAxisCol 	= 0			gDataCol 	= 1			gAxisSigCol 	= -1			gDataSigCol 	= -1			// No plot preferences			break					case "2-column manual":			UserCancelFlag = PromptForColumnNumbers()						// No plot preferences			break					case "n-column complex":			UserCancelFlag = PromptForComplexType()						// No plot preferences			break	//		case "3-column complex"://			UserCancelFlag = PromptForComplexType()//			//			// No plot preferences//			break					case "4-column data & errors":			gAxisCol 		= 0; gAxisSigCol 	= 1			gDataCol 		= 2; gDataSigCol 	= 3						// No plot preferences			break					case "n-column data & fit":			gAxisCol 	= 0; gDataCol 	= 1			gNameSource = 2						// No plot preferences			break					case "n-column to (n-1) data":			// We want separate spectra in the file to be automatically named. 			UserCancelFlag 		= PromptForAxisColumn()			gUserNameFlag 	= 1						// No plot preferences			break					case "2-column to n data":			// We want separate spectra in the file to be automatically named. 			gUserNameFlag 	= 1						// No plot preferences			break					case "1-column to n data":			// We want separate spectra in the file to be automatically named. 			gUserNameFlag 	= 1						UserCancelFlag 	= PromptFor1ColumnInputs()						// The Witec Raman uses this load style			Variable /G root:SPECTRA:Plotting:Preferences:gLabelPrefs = 1			// The default axes labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice=WhichListItem("Intensity",gCommonYLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice=WhichListItem("Wavenumbers",gCommonXLabels)			// The default units			Variable /G root:SPECTRA:Plotting:Preferences:gXUnitChoice=WhichListItem("counts",SetCommonUnits("Intensity"))			Variable /G root:SPECTRA:Plotting:Preferences:gYUnitChoice=WhichListItem("cm-1",SetCommonUnits("Wavenumbers"))						break					case "ALS .qx XANES":			UserCancelFlag = PromptForALSXANESParams()						break 		case "XANES data & Izero":			UserCancelFlag = PromptForXANESInputParams()						// Special Variables for XANES load. 				NVAR gXASPreset 				= root:SPECTRA:GLOBALS:gXASPreset			SVAR gXASAxisUnits 			= root:SPECTRA:GLOBALS:gXASAxisUnits			if ((gXASPreset == 3) || (gXASPreset == 5))				OptSuffix = "_FY"			endif						Variable /G root:SPECTRA:Plotting:Preferences:gLabelPrefs = 1			// The default axes labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice=WhichListItem("Intensity",gCommonYLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice=WhichListItem("Photon Energy",gCommonXLabels)			// The default units			Variable /G root:SPECTRA:Plotting:Preferences:gXUnitChoice=WhichListItem("a. u.",SetCommonUnits("Intensity"))			Variable /G root:SPECTRA:Plotting:Preferences:gYUnitChoice=WhichListItem(gXASAxisUnits,SetCommonUnits("Photon Energy"))			Variable /G root:SPECTRA:Plotting:Preferences:gYUnitChoice=WhichListItem("eV",SetCommonUnits("Photon Energy"))						break					case "Coefficients":			// No plot preferences			break					case "Titration data":			gAxisCol 	= 2; gDataCol 	= 0						Variable /G root:SPECTRA:Plotting:Preferences:gLabelPrefs = 1			// The default axes labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice = WhichListItem("pH",gCommonXLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice = WhichListItem("Concentration",gCommonYLabels)			break					case "pH measurement":			Variable /G root:SPECTRA:Plotting:Preferences:gLabelPrefs = 1			// The default axes labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice = WhichListItem("Time",gCommonXLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice = WhichListItem("pH",gCommonYLabels)			break					case "pH-stat data":			Variable /G root:SPECTRA:Plotting:Preferences:gLabelPrefs = 1			// The default axes labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice = WhichListItem("Time",gCommonXLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice = WhichListItem("Volume",gCommonYLabels)						break		case "DLS Deconvolve Sizes":			gNameSource = 1			OptSuffix = "_DLSs"						Variable /G root:SPECTRA:Plotting:Preferences:gLabelPrefs = 1			// The default axis labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice=WhichListItem("Radius",gCommonXLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice=WhichListItem("Abundance",gCommonYLabels)			// The default units			Variable /G root:SPECTRA:Plotting:Preferences:gXUnitChoice=WhichListItem("nm",SetCommonUnits("Radius"))			Variable /G root:SPECTRA:Plotting:Preferences:gYUnitChoice=WhichListItem("%",SetCommonUnits("Abundance"))						Variable /G root:SPECTRA:Plotting:Preferences:gLogYLeft=0			Variable /G root:SPECTRA:Plotting:Preferences:gLogX=1			Variable /G root:SPECTRA:Plotting:Preferences:gTraceStyle=6						break					case  "DLS Elucidate g(t)": 			UserCancelFlag 	= DLSCorrFnLoadParams()			//  from output of Precision Elucidate .. Load 2 column auto			gAxisCol = 0			gDataCol = 1			OptSuffix = "_DLSg"					break					case "DLS Elucidate I(n)":			// DLS Correlation Function from output of Precision Elucidate			OptSuffix = "_DLSi"						break				case "PAR Chrono":			// PAR Potentiostat current vs time data//			UserCancelFlag = PARChronoLoadPreferences()						// The default axes labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice = WhichListItem("Time",gCommonXLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice = WhichListItem("i",gCommonYLabels,";",0,1)			// The default units			Variable /G root:SPECTRA:Plotting:Preferences:gXUnitChoice=WhichListItem("s",SetCommonUnits("Time"))			Variable /G root:SPECTRA:Plotting:Preferences:gYUnitChoice=WhichListItem("A",SetCommonUnits("i"))			break					case "PAR CV":			// 2-column cyclic voltammetry data - make sure the axis values are not sorted. 			Variable /G root:SPECTRA:Plotting:Preferences:gLabelPrefs = 1						// The default axes labels. 			Variable /G root:SPECTRA:Plotting:Preferences:gXLabelChoice = WhichListItem("E",gCommonXLabels)			Variable /G root:SPECTRA:Plotting:Preferences:gYLabelChoice = WhichListItem("i",gCommonYLabels)			// The default units			Variable /G root:SPECTRA:Plotting:Preferences:gXUnitChoice=WhichListItem("V vs. Ag/AgCl",SetCommonUnits("E"))			Variable /G root:SPECTRA:Plotting:Preferences:gYUnitChoice=WhichListItem("A",SetCommonUnits("i"))			break					case "savedata hybrid":			UserCancelFlag = PromptForSaveDataParams()			// Disable sorting for huge files			gSortFlag 	= 0			break				endswitch		return UserCancelFlagEnd// ***************************************************************************// **************** 		Routines for the Data Loading Panel// ***************************************************************************Function ListDataFilesInFolder(StripTextFlag)	Variable StripTextFlag		NVAR gSortFlag 			= root:SPECTRA:GLOBALS:gSortFlag	NVAR gInvertDataNames 	= root:SPECTRA:GLOBALS:gInvertDataNames	SVAR gPath2Data 			= root:SPECTRA:GLOBALS:gPath2Data	SVAR gDataExt 			= root:SPECTRA:GLOBALS:gDataExt	SVAR gMatchStr 			= root:SPECTRA:GLOBALS:gMatchStr	SVAR gStripText 			= root:SPECTRA:GLOBALS:gStripText	//	Wave/T FileList		= root:SPECTRA:Data:wFileList	Wave FileSelection	= root:SPECTRA:Data:wFileSel		String ListOfAllFiles, FileName, Selection=""	Variable i, NFiles, NewNFiles=0		String DataExtension=gDataExt	DataExtension = "." + ReplaceString(".", DataExtension, "")	gDataExt = DataExtension[0,4]		if (numpnts(FileList) > 0)		FindValue /V=1 FileSelection		if (V_value > -1)			Selection = FileList[V_value]		endif	endif			PathInfo LoadDataPath	if(V_Flag && strlen(gPath2Data)>0)		if (strlen(DataExtension)<=1)			ListOfAllFiles = IndexedFile(LoadDataPath,-1,"????")		else					ListOfAllFiles = IndexedFile(LoadDataPath,-1,DataExtension)		endif				for (i=0;i<ItemsInList(gMatchStr);i+=1)//			ListOfAllFiles = GrepList(ListOfAllFiles,StringFromList(i,gMatchStr),0)			ListOfAllFiles = GrepList(ListOfAllFiles,"(?i)"+StringFromList(i,gMatchStr),0)//			ListOfAllFiles = GrepList(ListOfAllFiles,"(?i"+StringFromList(i,gMatchStr),0)+")"		endfor				NFiles = ItemsInList(ListOfAllFiles,";")		if (NFiles == 0)			Redimension/N=(0) FileList			Redimension/N=(0) FileSelection			return 0		endif				// Sort the list if desired		if ((gSortFlag == 2) || (gSortFlag == 4))			// Does 8 option gives better sorting than 16 for alphanumeric filenames. 			if (gInvertDataNames)				ListOfAllFiles = SortList(ListOfAllFiles,";",17)			else				ListOfAllFiles = SortList(ListOfAllFiles,";",16)			endif		endif		Redimension/N=(NFiles) FileList		Redimension/N=(NFiles) FileSelection		FileSelection = 0				if (strlen(Selection) > 0)			FindValue /TXOP=2/TEXT=Selection FileList			if (V_value > -1)				FileSelection[V_value] = 1			endif		endif						for (i=0;i<NFiles;i+=1)			FileName = StringFromList(i, ListOfAllFiles,";")			if ((cmpstr(".",FileName[0]) == 0) || (strlen(FileName) == 0))			else				FileList[NewNFiles] = FileName				NewNFiles+=1			endif		endfor		Redimension/N=(NewNFiles) FileList		Redimension/N=(NewNFiles) FileSelection				if (StripTextFlag == 1)			ListOfAllFiles = TextWaveToList(FileList,0,"","")			if (strlen(gStripText) == 0)				gStripText = LookForCommonPrefix(ListOfAllFiles)			endif		endif	else		Redimension/N=(0) FileList		Redimension/N=(0) FileSelection//		gStripText=""	endif endFunction RefreshDataPath(ctrlname):ButtonControl	String ctrlname		ListDataFilesInFolder(1)EndFunction SelectDataPath(B_Struct):ButtonControl	STRUCT WMButtonAction &B_Struct		SVAR gPath2Data=root:SPECTRA:GLOBALS:gPath2Data	String LoadDataPath = ""			if (B_Struct.eventCode == 2)	// Mouse up after pressing			NewPath /Z/M="Select path to data to be imported" /O LoadDataPath		if (V_Flag!=0)			Abort		endif 				PathInfo LoadDataPath		gPath2Data = S_Path				ListDataFilesInFolder(1)	else		return 0	endifEnd//Function SoldelectDataPath(ctrlname):ButtonControl//	String ctrlname////	SVAR gPath2Data=root:SPECTRA:GLOBALS:gPath2Data//	//	String LoadDataPath = ""//	//	NewPath /Z/M="Select path to data to be imported" /O LoadDataPath//	if (V_Flag!=0)//		Abort//	endif //	//	PathInfo LoadDataPath//	gPath2Data = S_Path//	//	ListDataFilesInFolder(1)//endFunction SetFileExtension(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		ListDataFilesInFolder(1)EndFunction SetFileMatchString(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		ListDataFilesInFolder(1)EndFunction LoaderPopupProcs(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	if (cmpstr(ctrlName,"SortOptionsMenu")==0)		NVAR gSortFlag			= root:SPECTRA:GLOBALS:gSortFlag		gSortFlag = popNum		ListDataFilesInFolder(0)			elseif (cmpstr(ctrlName,"DataTypeMenu")==0)		SVAR gDataExt 			= root:SPECTRA:GLOBALS:gDataExt 		SVAR gColAssignChoice	= root:SPECTRA:GLOBALS:gColAssignChoice		gColAssignChoice 	= popStr				if (cmpstr("Coefficients",popStr) == 0)			// Binary Coefficient files, so set the File Extension to ".ibw" ...			gDataExt = ".ibw"			SetFileExtension("DataExtensionString",NAN,".ibw","")			// ... disable the "Load Selected" option ...			Button LoadSingleFileButton disable=2			// ... disable the renaming option ...			NVAR gUserNameFlag	= root:SPECTRA:GLOBALS:gUserNameFlag			gUserNameFlag = 0			CheckBox UserNamingCheckBox,disable=2,value= gUserNameFlag			// ... disable the "LoadAsGroup" option. 			NVAR gGroupLoadFlag	= root:SPECTRA:GLOBALS:gGroupLoadFlag			gGroupLoadFlag = 0			CheckBox GroupLoadCheckBox,disable=2,value= gGroupLoadFlag		else			if (cmpstr(".ibw",gDataExt) == 0)				gDataExt = ""			endif			Button LoadSingleFileButton disable=0			CheckBox UserNamingCheckBox disable=0//			CheckBox GroupLoadCheckBox,disable=0		endif				SetVariable DataExtensionString, value=root:SPECTRA:GLOBALS:gDataExt		ListDataFilesInFolder(0)			elseif (cmpstr(ctrlName,"ColTitleMenu")==0)		NVAR gColTitleChoice		= root:SPECTRA:GLOBALS:gColTitleChoice		gColTitleChoice = popNum	endifEnd// ***************************************************************************// **************** 		THE INTERACTIVE PANEL FOR DATA & COEFFICIENT LOADING// ***************************************************************************Window CreateLoadSpectraPanel(): Graph		// Make the Panel//	NewPanel /K=0/W=(250,44,446,524) as "Data Loading Panel"	NewPanel /K=0/W=(3,45,342,654) as "Data Loading Panel"		DoWindow/C SpectraLoadPanel	CheckWindowPosition("SpectraLoadPanel",3,45,342,654)		GroupBox LoadBox,pos={9.00,433.00},size={192,64},fColor=(39321,1,1),title="Load data"	GroupBox LoadBox1,pos={76.00,743.00},size={192,64},fColor=(39321,1,1),title="Merge data"	GroupBox LoadBox2,pos={12.00,509.00},size={192,93},fColor=(39321,1,1),title="Rename data"		// Prompt user to find Path to Data Folder	Button SelectDataPathButton,pos={4.00,4.00},size={125,28},proc=SelectDataPath,title="Set Data Folder"	Button RefreshDataPathButton,pos={130,4},size={60,28},proc=RefreshDataPath,title="Refresh"		// File Extension	SetVariable DataExtensionString,pos={26,36},size={100,18},proc=SetFileExtension,title="Extension:"	SetVariable DataExtensionString,fSize=12,value=root:SPECTRA:GLOBALS:gDataExt		// Match text in filename	SetVariable FilenameMatchString,pos={8,57},size={173,18},proc=SetFileMatchString,title="Match string:"	SetVariable FilenameMatchString,fSize=12,value=root:SPECTRA:GLOBALS:gMatchStr		// Open one file as NoteBook	Button OpenAsNoteBookButton,pos={134,37},size={45,16},proc=LoadAsNotebook,title="peek"		// Options for Sorting the list of data files. 	PopupMenu SortOptionsMenu,fSize=12,pos={224.00,53.00},size={113,20},proc=LoaderPopupProcs,title="Sort"	PopupMenu SortOptionsMenu,mode=root:SPECTRA:GLOBALS:gSortFlag	PopupMenu SortOptionsMenu,value= root:SPECTRA:GLOBALS:gSortOptions		//  Option to INVERT the ordering of the data name list	CheckBox InvertNamesCheckBox,pos={223.00,31.00},size={85.00,16.00},title="Invert order"	CheckBox InvertNamesCheckBox,fsize=12,variable= root:SPECTRA:GLOBALS:gInvertDataNames		// List of the files in the chosen hard drive folder. 	ListBox DataFileListBox,mode= 4,pos={4.00,82.00},size={331.00,350.00},userColumnResize=1, widths={400}	ListBox DataFileListBox,listWave=root:SPECTRA:Data:wFileList	ListBox DataFileListBox,selWave=root:SPECTRA:Data:wFileSel		// Load the selected file(s) ...	SetDrawLayer UserBack	DrawText 4,277,"Load:"	Button LoadSingleFileButton,pos={52.00,446.00},size={60,20},proc=LoadSelectedDataFiles,title="Selected"	// ... or load all the files in the Data Folder	Button LoadEveryFileButton,pos={116.00,446.00},size={30,20},proc=LoadSelectedDataFiles,title="All"		// Option to load multiple files into a 2D array. 	CheckBox Data2DCheckBox,pos={157.00,448.00},size={49,14},title="2D"	CheckBox Data2DCheckBox,fsize=12,variable= root:SPECTRA:GLOBALS:g2DDataFlag		// ... possible as a group than can be plotted together ...//	CheckBox GroupLoadCheckBox,pos={0,350},size={49,14},title="Load selected files as group"//	CheckBox GroupLoadCheckBox,fsize=12,variable= root:SPECTRA:GLOBALS:gGroupLoadFlag		// Type of file to be loaded. 	PopupMenu DataTypeMenu,fSize=12,pos={7.00,472.00},bodyWidth= 130,title="Type: ", proc=LoaderPopupProcs	PopupMenu DataTypeMenu,popvalue=root:SPECTRA:GLOBALS:gColAssignChoice	PopupMenu DataTypeMenu,value= root:SPECTRA:GLOBALS:gColAssignOptions		// Use columns or file names for naming loaded data. //	Variable /G root:SPECTRA:Globals:gColTitleChoice /NVAR=gColTitleChoice//	PopupMenu ColTitleMenu,fSize=12,pos={126,387},title="Titles", proc=LoaderPopupProcs//	PopupMenu ColTitleMenu,mode=gColTitleChoice,value= #"\"ignore;find;use;\""		// Combine columns from multiple files. 	Button MergeFilesButton,pos={82.00,757.00},size={50,20},proc=MergeSelectedDataFiles,title="Merge"		SetVariable HeaderString,pos={136.00,758.00},size={126,18},title="flag", help={"Something in the list of column headings"}	SetVariable HeaderString,fSize=12,value=root:SPECTRA:Import:gMergeHeader	SetVariable KeyWordList,pos={83.00,781.00},size={179,18},title="keyword(s)", help={"Column headings to select"}	SetVariable KeyWordList,fSize=12,value=root:SPECTRA:Import:gMergeKeyWordList		// Request interactive naming of loaded data. NOT FOR LOAD ALL. 	CheckBox UserNamingCheckBox,pos={132.00,525.00},size={63.00,16.00},title="Rename"	CheckBox UserNamingCheckBox,fsize=12,variable= root:SPECTRA:GLOBALS:gUserNameFlag		// Strip suffix ending in .XXX	CheckBox StripSuffixCheckBox1,pos={18.00,523.00},size={93.00,16.00},title="Strip suffixes"	CheckBox StripSuffixCheckBox1,fsize=12,variable= root:SPECTRA:GLOBALS:gStripSuffixFlag		// Automatically remove text from filenames.  	CheckBox StripCommonCheckBox,pos={214.00,526.00},size={89.00,16.00},title="Replace text"	CheckBox StripCommonCheckBox,fsize=12,variable= root:SPECTRA:GLOBALS:gStripPrefixFlag		SetVariable RemoveTextString,pos={17.00,550.00},size={305.00,18.00},title="Remove"	SetVariable RemoveTextString,fSize=12,value=root:SPECTRA:GLOBALS:gStripText	//	SetVariable ReplaceTextString,pos={19.00,573.00},size={305.00,18.00},title="Replace"	SetVariable ReplaceTextString,fSize=12,value=root:SPECTRA:GLOBALS:gReplaceTextEndMacro