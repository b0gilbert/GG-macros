#pragma rtGlobals=1		// Use modern global access method.Proc Plot2D(ctrlName) : ButtonControl	String ctrlName	PauseUpdate; Silent 1		Variable AxisMin, AxisMax		String DefaultWave = ListOfDataNames[0] + "_axis"		// Only make an Image Plot from the DISPLAYED axis range. 	GetAxis /Q/W=StackedPlot bottom	AxisMin = V_min	AxisMax = V_max	FindWavesOfSameLength("ListOfDataNames","")	gCandidateAxisList = ExclusiveWaveList(gCandidateAxisList,"data_number",";") + "data_number;"		SetCommonPlotLabels()	if ((exists("gXLabel")==2) && (exists("gXLabel2D")==0))		String /G gXLabel2D = gXLabel	endif			ImagePlot(,,,gXLabel2DChoice,,gXLabel2D,,2,AxisMin,AxisMax)EndProc MakeImagePlot()	PauseUpdate; Silent 1	if (exists("ListOfDataNames")==1)		FindWavesOfSameLength("ListOfDataNames","")		gCandidateAxisList += "data_number;"				SetCommonPlotLabels()		if ((exists("gXLabel")==2) && (exists("gXLabel2D")==0))			String /G gXLabel2D = gXLabel		endif		if ((exists("gXLabelChoice")==2) && (exists("gXLabel2DChoice")==0))			Variable /G gXLabel2DChoice = gXLabelChoice		endif				ImagePlot()	endifEndProc ImagePlot(LogXAxisFlag,SwapXZAxesFlag,ZAxisName,XLabel2DChoice,ZLabel2DChoice,XLabel2D,ZLabel2D,ImageAxisRangeFlag,ImageAxisMin,ImageAxisMax)	String /G gZAxisName, gCandidateAxisList, gZLabel2D, gXLabel2D	Variable /G gSwapXZAxesFlag, gZLabel2DChoice, gXLabel2DChoice, gLogXAxisFlag, gImageAxisRangeFlag, gImageAxisMin, gImageAxisMax	//	String ZAxisName = gZAxisName	Prompt ZAxisName, "Choose the Z-axis", popup, gCandidateAxisList	//	Variable ZLabel2DChoice=gZLabel2DChoice	Prompt ZLabel2DChoice, "Common Z-axis labels", popup, gCommonXLabels	//	String ZLabel2D = gZLabel2D	Prompt ZLabel2D, "alternative Z-axis label"	//	Variable XLabel2DChoice=gXLabel2DChoice	Prompt XLabel2DChoice, "Common X-axis labels", popup, gCommonXLabels	//	String XLabel2D=gXLabel2D	Prompt XLabel2D, "alternative X-axis label"	//	Variable LogXAxisFlag = gLogXAxisFlag	Prompt LogXAxisFlag,"X-axis steps",popup, "linear;log;"	//	Variable SwapXZAxesFlag = gSwapXZAxesFlag	Prompt SwapXZAxesFlag, "Set Z-axis horizontal?", popup, "no;yes;"	//	Variable ImageAxisRangeFlag = gImageAxisRangeFlag	Prompt ImageAxisRangeFlag, "Constrain displayed range to values below?", popup, "no;yes;"	Variable ImageAxisMin = gImageAxisMin	Prompt ImageAxisMin, "Start of displayed range"	Variable ImageAxisMax = gImageAxisMax	Prompt ImageAxisMax, "End of displayed range"	PauseUpdate; Silent 1		gZAxisName = ZAxisName	gSwapXZAxesFlag=SwapXZAxesFlag	gLogXAxisFlag = LogXAxisFlag	//	gImageAxisMin = ImageAxisMin	gImageAxisMax = ImageAxisMax	if ((numtype(gImageAxisMin) == 0) && (numtype(gImageAxisMin)) == 0)		gImageAxisRangeFlag = ImageAxisRangeFlag	else		gImageAxisRangeFlag = 1	endif	//	gXLabel2DChoice=XLabel2DChoice	gZLabel2DChoice=ZLabel2DChoice	//	gXLabel2D = AssignXAxisLabel(XLabel2DChoice,XLabel2D)	String finalXLabel2D = gXLabel2D	//	gZLabel2D = AssignXAxisLabel(ZLabel2DChoice,ZLabel2D)	String finalZLabel2D = gZLabel2D		if (SwapXZAxesFlag== 2)		finalZLabel2D = gXLabel2D		finalXLabel2D = gZLabel2D	endif		if (cmpstr("data_number",ZAxisName)==0)		Make /O/N=(numpnts(ListOfDataNames)) data_number		data_number[] = x	endif		// List all the axis-data pairs plotted on the Stacked Plot	Variable i, NumTraces		String DataNameList = TraceNameList("StackedPlot",";",1)	NumTraces = ItemsInList(DataNameList, ";")		i=0	String AxisNameList = ""	do		AxisNameList += XWaveName("StackedPlot", StringFromList(i,DataNameList) ) + ";"		i+=1	while(i<NumTraces)		Variable SuccessFlag = AxisDataPairsTo2D(AxisNameList,DataNameList,ZAxisName,LogXAxisFlag,SwapXZAxesFlag,gImageAxisRangeFlag,gImageAxisMin,gImageAxisMax)		if (SuccessFlag == 1)		DoWindow /K ImagePlot		if (SwapXZAxesFlag == 2)			Plot2DImage("MultiDData","MultiDXAxis","MultiDZAxis",0,LogXAxisFlag,finalXLabel2D,finalZLabel2D)		else			Plot2DImage("MultiDData","MultiDXAxis","MultiDZAxis",LogXAxisFlag,0,finalXLabel2D,finalZLabel2D)		endif		DoWindow /C ImagePlot	endifEndFunction MakeCopyAxis(Axis,LogAxisFlag,AxisRangeFlag,AxisMin,AxisMax)	Wave Axis	Variable LogAxisFlag,AxisRangeFlag,AxisMin,AxisMax		Variable /G gPtMin, gPtMax	Variable PtMin, PtMax//	String AxisName = nameofwave(Axis)		if (AxisRangeFlag == 2)		PtMin = BinarySearch(Axis, AxisMin)		PtMax = BinarySearch(Axis, AxisMax)	else		PtMin = 0		PtMax = numpnts(Axis) - 1	endif		gPtMin = min(PtMin,PtMax)	gPtMax = max(PtMin,PtMax)		Make /O/D/N=(gPtMax-gPtMin+1) copyAxis		if (LogAxisFlag == 2)		copyAxis = log(Axis[p+gPtMin])	else		copyAxis = Axis[p+gPtMin]	endif		if (copyAxis[gPtMin] > copyAxis[gPtMax])		// Signal that the axis and data run from low to high. 		ReverseWaveOrder(copyAxis)		return 1	else		return 0	endif	EndFunction MakeCopyData(Data,ReverseFlag,AxisPtMin,AxisPtMax)	Wave Data	Variable ReverseFlag,AxisPtMin,AxisPtMax		Make /O/D/N=(AxisPtMax-AxisPtMin+1) copyData		copyData[] = Data[p+AxisPtMin]		if (ReverseFlag == 1) 		ReverseWaveOrder(copyData)		return 1	else		return 0	endif	EndFunction FindAxisRangeAndStep(Axis)	WAVE Axis		Variable tolerance		WaveStats /Q Axis	tolerance = V_min/1000	NVAR gStepSize = gStepSize	gStepSize =  abs(CheckConstantStep(Axis,tolerance,0))		NVAR gMin = gMin	gMin = min(Axis[0], Axis[Inf])		NVAR gMax = gMax	gMax = max(Axis[0], Axis[Inf])EndFunction oldAxisDataPairsTo2D(AxisNameList,DataNameList,ZAxisName,LogXAxisFlag,SwapXZAxesFlag,YAxisRangeFlag,YAxisMin,YAxisMax)	String AxisNameList,DataNameList, ZAxisName	Variable LogXAxisFlag,SwapXZAxesFlag,YAxisRangeFlag,YAxisMin,YAxisMax		Variable NumAxis, NumData, ComAxisFlag, YPtMin,YPtMax	Variable /G gStepSize, gMin, gMax, gPtMin, gPtMax		// ----------- Some initial error checking ----------------	NumAxis = ItemsInList(AxisNameList)	NumData = ItemsInList(DataNameList)		if (YAxisRangeFlag == 2)		Print " *** Making a 2D image plot from",NumData," data waves between",YAxisMin,"to",YAxisMax,". "	else		Print " *** Making a 2D image plot from",NumData," data waves. " 	endif		if (NumAxis == 1)		// Common axis for all data. 		ComAxisFlag = 1	else		// Separate axis-data pairs. 		if (NumAxis != NumData)			Print " Please supply equal numbers of axis and data waves"			return -1		endif		ComAxisFlag = 0	endif	// ------------------------------------------------		Variable i, tolerance, ReverseFlag	Variable MinX, MaxX, XStepSize, NYDataPts	Variable MinZ, MaxZ, ZStepSize, NZDataPts, inpNZDataPts	String  AxisName, DataName		// In case we have asked for a log-scaling ...	if (LogXAxisFlag == 2)		i=0		do			// .. make sure there are no negative values in any of the axes. 			AxisName = ReplaceString("'",StringFromList(i,AxisNameList),"")			WAVE Axis = $AxisName						if (YAxisRangeFlag == 2)				YPtMin = BinarySearchInterp(AxisName, YAxisMin)				YPtMax = BinarySearchInterp(AxisName, YAxisMax)			else				YPtMin = 0				YPtMax = numpnts(Axis) - 1			endif			WaveStats /R=[YPtMin,YPtMax]/Q $AxisName						if ((V_min < 0) || (V_min == 0))				Print " *** Negative x-axis values. Cannot plot on a log scale - use a linear scale instead. " 				LogXAxisFlag = 0				break			endif						if (ComAxisFlag == 1)				// Only consider the first axis if is the common axis. 				break			endif						i+=1		while(i<NumData)	endif		if (LogXAxisFlag == 2)		Print "         .... using a log scale on the horizontal axis. "	endif		// THIS IS A CRUCIAL POINT TO UNDERSTAND FOR IMAGE PLOTS	// We always have to interpolate the actual axis-data pairs onto a new axis that is one point longer. 	// This means that we add one-half of an axis step to each end of the axis range. 	// 	******************   HORIZONTAL 	*********************** 	Print "         .... calculating the horizontal and vertical axis ranges and step size. "		// Find the minimum step size and data range for the FIRST or COMMON axis	AxisName = StringFromList(0,AxisNameList)	MakeCopyAxis($AxisName,LogXAxisFlag,YAxisRangeFlag,YAxisMin,YAxisMax)		FindAxisRangeAndStep(copyAxis)	XStepSize = gStepSize	MinX = gMin	MaxX = gMax		if (ComAxisFlag == 0)		// Check all the other individual axes. 		i=1		do			AxisName = StringFromList(i,AxisNameList)			MakeCopyAxis($AxisName,LogXAxisFlag,YAxisRangeFlag,YAxisMin,YAxisMax)						FindAxisRangeAndStep(copyAxis)			XStepSize = min(XStepSize,gStepSize)			MinX = min(MinX,gMin)			MaxX = max(MaxX,gMax)						i+=1		while(i<NumData)	endif		// The number of horizontal data points	NYDataPts = trunc((MaxX - MinX)/XStepSize)+ 1	if (NYDataPts > 10000)		Print "         .... too many points ("+num2str(NYDataPts)+")! Reducing step size. " 				XStepSize =  (MaxX - MinX)/1001		NYDataPts = trunc((MaxX - MinX)/XStepSize)+ 1	endif	Print "         .... horizontal axis = "+num2str(MinX)+" - "+num2str(MaxX)+" with "+num2str(NYDataPts)+" data points. "	// *****************************************************	// 	******************   VERTICAL	***********************	// Find the minimum step size and data range//	Print " ZAxisName is", ZAxisName	WAVE ZAxis = $ZAxisName	inpNZDataPts = numpnts(ZAxis)		WaveStats /Q $ZAxisName	tolerance = V_min/1000	ZStepSize= abs(CheckConstantStep(ZAxis,tolerance,0))	MinZ = min(ZAxis[0], ZAxis[Inf])	MaxZ= max(ZAxis[0], ZAxis[Inf])		// The number of vertical data points	NZDataPts = trunc((MaxZ - MinZ)/ZStepSize)+ 1		Print "         .... vertical axis = "+num2str(MinZ)+" - "+num2str(MaxZ)+" with "+num2str(NZDataPts)+" data points. "	// *****************************************************		// MAKE the INTERPOLATION X-axis	Make /O/D/N=(NYDataPts) XInterpAxis	XInterpAxis[] = MinX + x*XStepSize		Duplicate /O/D XInterpAxis, XInterpData		// MAKE the INTERPOLATION Z-axis	Make /O/D/N=(NZDataPts) ZInterpAxis	ZInterpAxis[] = MinZ + x*ZStepSize		Duplicate /O/D $ZAxisName, transferZData	Duplicate /O/D ZInterpAxis, ZInterpData		// MAKE the TEMPORARY 2D Matrix for the horizontal interpolation	Print "         .... making temporary interpolation matrix: "+num2str(NYDataPts)+" x "+num2str(inpNZDataPts)	Make /O/D/N=(NYDataPts,inpNZDataPts) tempMultiDData	tempMultiDData = NAN		// Make the FINAL 2D Matrix that will hold all the image values. 	if (SwapXZAxesFlag == 2)		Print "         .... making final 2D image matrix: "+num2str(NZDataPts)+" x "+num2str(NYDataPts)		Make /O/D/N=(NZDataPts,NYDataPts) MultiDData	else		Print "         .... making final 2D image matrix: "+num2str(NYDataPts)+" x "+num2str(NZDataPts)		Make /O/D/N=(NYDataPts,NZDataPts) MultiDData	endif	MultiDData = NAN		// Interpolate all the data onto the HORIZONTAL axis and read into the TEMPORARY 2D Matrix	AxisName = StringFromList(0,AxisNameList)	ReverseFlag = MakeCopyAxis($AxisName,LogXAxisFlag,YAxisRangeFlag,YAxisMin,YAxisMax)				i=0	do		if (ComAxisFlag == 0)			AxisName = StringFromList(i,AxisNameList)			ReverseFlag = MakeCopyAxis($AxisName,LogXAxisFlag,YAxisRangeFlag,YAxisMin,YAxisMax)		endif				DataName = ReplaceString("'",StringFromList(i,DataNameList),"")				MakeCopyData($DataName,ReverseFlag,gPtMin,gPtMax)				WAVE copyXAxis = copyAxis		WAVE copyXData = copyData		Interpolate2/T=1/N=3/I=3/X=XInterpAxis/Y=XInterpData copyXAxis, copyXData				tempMultiDData[][i] = XInterpData[p]		i+=1	while(i<NumData)		// Interpolate all the data onto the VERTICAL axis and read into the final 2D Matrix	i=0	do		// The indexing here was tricky. 		transferZData[] = tempMultiDData[i][NumData-p-1]				Interpolate2/T=1/N=3/I=3/X=ZInterpAxis/Y=ZInterpData ZAxis, transferZData				if (SwapXZAxesFlag == 2)			// The indexing here was tricky. 			MultiDData[][i] = ZInterpData[p]		else			MultiDData[i][] = ZInterpData[q]		endif				i+=1	while(i<NYDataPts)		// Make x- and z- axes that are one point longer than the data dimensions		// Make the PLOTTING x-axis	Make /O/D/N=(NYDataPts+1) MultiDXAxis	MultiDXAxis[] = (MinX - 0.5*XStepSize) + x*XStepSize	if (LogXAxisFlag == 2)		MultiDXAxis[] = 10^MultiDXAxis[p]	endif		// Make the PLOTTING z-axis	Make /O/D/N=(NZDataPts+1) MultiDZAxis	MultiDZAxis[] = (MinZ - 0.5*ZStepSize) +x* ZStepSize			if (SwapXZAxesFlag == 2)		Duplicate /O/D MultiDZAxis, tempMultiDZAxis		Duplicate /O/D MultiDXAxis, MultiDZAxis		Duplicate /O/D tempMultiDZAxis, MultiDXAxis		KillWaves tempMultiDZAxis	endif	KillVariables /Z gStepSize, gMin, gMax, gPtMin, gPtMax	KillWaves /Z copyAxis, copyData, tempXData, inputZData, tempZData//	KillWaves /Z XInterpAxis, ZInterpAxis, tempMultiDData		return 1End//Window Plot2DImage(PlotMatrixName, PlotXAxisName, PlotZAxisName,LogXAxisFlag,LogZAxisFlag,xLabel,zLabel) : Graph//	String PlotMatrixName, PlotXAxisName, PlotZAxisName,xLabel,zLabel//	Variable LogXAxisFlag,LogZAxisFlag//	PauseUpdate; Silent 1		// building window...//	//	Display /K=1/W=(576,378,1056,768) as "2D Image Plot"//	AppendImage $PlotMatrixName vs {$PlotXAxisName,$PlotZAxisName}//	ModifyImage $PlotMatrixName ctab= {*,*,Terrain,0}////	if (LogZAxisFlag == 2)//		ModifyGraph log(left)=1//	endif//	//	if (LogXAxisFlag == 2)//		ModifyGraph log(bottom)=1//	endif//	//	ModifyGraph margin(top)=57//	ModifyGraph mirror=2//	ModifyGraph fSize=18//	ModifyGraph axThick=2//	Label left zLabel//	Label bottom xLabel//		//	Button Export2DPlotbutton,pos={608,9},size={50,20},proc=Export2DPlot,title="Export"//	//	Button CloseImagePlotbutton,pos={667,9},size={50,20},proc=Close2DPlot,title="Close"//	//	WaveStats /Q $PlotMatrixName//	Variable /G g2DPlotmin = V_min//	Variable /G g2DPlotmax = V_max//	//	String /G g2DColorStringList = "Grays;Rainbow;YellowHot;BlueHot;BlueRedGreen;RedWhiteBlue;PlanetEarth;Terrain"//	String /G g2DColorString = "Grays"//	PopupMenu Select2DColorMenu,pos={294,18},size={105,20},proc=Select2DColorPopup, mode=1,popvalue=g2DColorString,value= g2DColorStringList//	//	Variable /G gInvert2DPlot=0//	CheckBox Invert2DPlotBox,pos={228,3},size={44,14},proc=Invert2DPlot,title="Invert",value= gInvert2DPlot//	//	Variable /G gLog2DPlot=0//	CheckBox Log2DPlotBox,pos={228,17},size={33,14},proc=Log2DPlot,title="Log",value= gLog2DPlot//	//	ModifyImage $PlotMatrixName ctab= {g2DPlotmin,g2DPlotmax,$g2DColorString,gInvert2DPlot}//	//	Button ImageAutoScaleButton,pos={228,32},proc=Set2DPlotAutoScale,size={46,16},title="Auto"//	//	Variable increment = (g2DPlotmax - g2DPlotmin)/75//	SetVariable Set2DPlotminVar,fsize=14,limits={-Inf,Inf,increment},value= g2DPlotmin, pos={24,19},size={80,20},proc=Set2DPlotmin,title="min"//	SetVariable Set2DPlotmaxVar,fsize=14,limits={-Inf,Inf,increment},value= g2DPlotmax, pos={127,19},size={90,20},proc=Set2DPlotmax,title="max"//EndMacroProc Close2DPlot(ctrlName) : ButtonControl	String ctrlName		DoWindow /K ImagePlot	KillWaves /Z ImagePlotMatrix, ImagePlotHorizAxis, ImagePlotVertAxisEndFunction Set2DPlotAutoScale(ctrlName) : ButtonControl	String ctrlName	PauseUpdate; Silent 1		NVAR g2DPlotmin=g2DPlotmin	NVAR g2DPlotmax=g2DPlotmax	NVAR gInvert2DPlot=gInvert2DPlot	SVAR g2DColorString=g2DColorString		WaveStats /Q MultiDData	g2DPlotmin = V_max	g2DPlotmax = V_min	ModifyImage MultiDData ctab= {g2DPlotmin,g2DPlotmax,$g2DColorString,gInvert2DPlot}EndFunction Set2DPlotmin(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		NVAR g2DPlotmin=g2DPlotmin	g2DPlotmin=varNum		NVAR g2DPlotmax=g2DPlotmax	NVAR gInvert2DPlot=gInvert2DPlot	SVAR g2DColorString=g2DColorString	ModifyImage MultiDData ctab= {g2DPlotmin,g2DPlotmax,$g2DColorString,gInvert2DPlot}EndFunction Set2DPlotmax(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		NVAR g2DPlotmax=g2DPlotmax	g2DPlotmax=varNum		NVAR g2DPlotmin=g2DPlotmin	NVAR gInvert2DPlot=gInvert2DPlot	SVAR g2DColorString=g2DColorString	ModifyImage MultiDData ctab= {g2DPlotmin,g2DPlotmax,$g2DColorString,gInvert2DPlot}EndFunction Select2DColorPopup(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		NVAR g2DPlotmin=g2DPlotmin	NVAR g2DPlotmax=g2DPlotmax	NVAR gInvert2DPlot=gInvert2DPlot		SVAR g2DColorString=g2DColorString	g2DColorString=popStr	ModifyImage MultiDData ctab= {g2DPlotmin,g2DPlotmax,$g2DColorString,gInvert2DPlot}EndProc Invert2DPlot(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked		gInvert2DPlot = checked		if (gLog2DPlot == 1)		MakeLogLUT(gInvert2DPlot)		ModifyImage MultiDData ctab= {g2DPlotmin,g2DPlotmax,$g2DColorString,gInvert2DPlot}, lookup=MultiDLogLUT	else		ModifyImage MultiDData ctab= {g2DPlotmin,g2DPlotmax,$g2DColorString,gInvert2DPlot}	endifEndProc Log2DPlot(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked		gLog2DPlot = checked	if (gLog2DPlot == 1)		if (exists("MultiDLogLUT") == 0)			Make /O/N=301 MultiDLogLUT		endif				MakeLogLUT(gInvert2DPlot)		ModifyImage MultiDData lookup=MultiDLogLUT	else		ModifyImage MultiDData lookup=$""	endifEndFunction MakeLogLUT(InvertFlag)	Variable InvertFlag		WAVE MultiDLogLUT=MultiDLogLUT		// This wave ranges between 0 - 0.999	MultiDLogLUT[] = (11- 10^(0.01*(100-x)))/10 - 0.1	MultiDLogLUT[301] = 1		if (InvertFlag == 1)//		ReverseWaveOrder(MultiDLogLUT)	endifEnd