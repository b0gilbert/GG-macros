#pragma rtGlobals=1		// Use modern global access method.// *** There are 2 types of DLS text file. // ***		1. The PrecisionElucidate file contains// ***				- the correlation function// ***				- the detector intensity values// ***				- the experimental settings// ***		2. The PrecisionDeconvolve file contains// ***				- the correlation function// ***				- the DLS histogram// ***				- NO experimental settings// ***	The correlation functions can be easily loaded as "2-column auto" from either file// ***	The DLS histogram must be loaded using the special procedure from the PrecisionDeconvolve file// ***  I should write a routine to read in the experimental conditions & intensity values from the PrecisionElucidate file// ***				However, it is not clear yet what use to make of these. // ***************************************************************************// **************** 			DLS HISTOGRAM load from PrecisionDeconvolve// ***************************************************************************Function /T LoadSingleDLSData(FileName,DataName,SampleName,DLSFlag)	String FileName, DataName, SampleName	Variable DLSFlag		SVAR gPath2Data 	  = root:SPECTRA:GLOBALS:gPath2Data		Variable keyLineNum, refNum, AxisCol=1, DataCol=2	String AxisName, ColNameList, HistKeyWord, KeyWord		DataName = SampleName + "_data"	AxisName = SampleName + "_axis"	ColNameList = AxisName + ";" + DataName + ";"		if (DLSFlag == 1)		HistKeyWord 	= "Distribution"//		HistKeyWord = "normalized distribution"	elseif (DLSFlag == 2)		HistKeyWord 	= "Correlation Function"	elseif (DLSFlag == 3)		HistKeyWord 	= "Detector A"		ColNameList 	= "Detector_A;Detector_B;"	endif		Open /Z/R refNum as ParseFilePath(2,gPath2Data,":",0,0)+FileName		KeyWord 	= ReturnKeyWordLineInOpenfile(refNum,HistKeyWord,keyLineNum,1)	if (strlen(KeyWord) == 0)		Print " 	*** Can't find key word in file!"		return ""	endif		KillNNamedWaves("wave",10)	LoadWave /Q/A/J/D/N/O/K=0 /L={0,keyLineNum+1,0,0,0} ParseFilePath(2,gPath2Data,":",0,0)+FileName	if (V_flag == 0)		Print " 	*** not enough columns!"		return ""	endif		ReadDLSParametersFromFile(FileName)		Duplicate /O/D $("wave"+num2str(AxisCol)), $AxisName	Duplicate /O/D $("wave"+num2str(DataCol)), $DataName	KillNNamedWaves("wave",10)		if (DLSFlag == 3)		Duplicate /O/D $DataName, $AxisName		Wave Axis = $(AxisName)		Axis[] = p	endif		return SampleName//	return DataNameEnd// ************************************************************************// ******				Use Interaction routines when loading DLS data//*************************************************************************Function DLSCorrFnLoadParams()		NewDataFolder /O root:SPECTRA:Import		MakeVariableIfNeeded("root:SPECTRA:Import:gDLSMin",-1)	MakeVariableIfNeeded("root:SPECTRA:Import:gDLSMax",-1)	MakeVariableIfNeeded("root:SPECTRA:Import:gDLSGt",1)	MakeStringIfNeeded("root:SPECTRA:Import:gDLSKeyword","Detector A")		NVAR gDLSMin 		= root:SPECTRA:Import:gDLSMin	NVAR gDLSMax 		= root:SPECTRA:Import:gDLSMax	NVAR gDLSGt 			= root:SPECTRA:Import:gDLSGt	SVAR gDLSKeyword 	= root:SPECTRA:Import:gDLSKeyword		Variable DLSMin 	= gDLSMin	Prompt DLSMin, "Min. avg. intensity (-1 for any)"	Variable DLSMax 	= gDLSMax	Prompt DLSMax, "Max. avg. intensity (-1 for any)"	Variable DLSGt 	= gDLSGt	Prompt DLSGt, "Correlation function:", popup, "g(t);g(t)-1;"	DoPrompt "Loading DLS data", DLSMin, DLSMax, DLSGt	if (V_Flag)		return 1	endif		gDLSMin 	= DLSMin	gDLSMax 	= DLSMax	gDLSGt 	= DLSGt		return 0EndFunction /T LoadDLSCorrFn(FileName,SampleName)	String FileName,SampleName		NVAR gDLSGt 			= root:SPECTRA:Import:gDLSGt	NVAR gDLSMin 	= root:SPECTRA:Import:gDLSMin	NVAR gDLSMax 	= root:SPECTRA:Import:gDLSMax	SVAR gPath2Data 				= root:SPECTRA:GLOBALS:gPath2Data	String PathAndFileName 	= gPath2Data + FileName	Variable i, refNum, int=0, success=1, nPts, startOfCorrFn, corrint, corrt, corrf	String FileLine		Open/R refNum as PathAndFileName	if (refNum == 0)		return ""	endif		do	// First read in the detector intensity value(s)				FReadLine refNum, FileLine		if (strlen(FileLine) == 0)			Close refNum			return ""		endif				if (StrSearch(FileLine,"Correlation Function Follows",-1) > -1)			FStatus refNum			startOfCorrFn = V_filePos			nPts 	= ReturnNumberFromText(1,FileLine)		endif		if (StrSearch(FileLine,"Integrated Intensity Pairs Follow",-1) > 1)			FReadLine refNum, FileLine	// Read past the 'Detector column headings'			break		endif	while(1)		do	// Read in the detector intensity value(s)		FReadLine refNum, FileLine		if (StrSearch(FileLine,":Path & File Name",-1) > -1)			break		endif				sscanf FileLine, "%f", corrint		int += corrint		i += 1	while(1)	int /= i		if ((gDLSMin > 0) && (int < gDLSMin))		Close refNum		return ""	elseif ((gDLSMax > 0) && (int > gDLSMax))		Close refNum		return ""	endif		Make /O/D/N=(nPts) $(SampleName+"_axis") /WAVE=DLStime	Make /O/D/N=(nPts) $(SampleName+"_data") /WAVE=DLScorrfn		FSetPos refnum, startOfCorrFn	i=0	do	// Read in the correlation function		FReadLine refNum, FileLine		if (CountNumbersInString(FileLine,1) == 0)			break		endif				sscanf FileLine, "%f\t%f", corrt, corrf				DLStime[i] 	= corrt		DLScorrfn[i] 	= corrf				i+=1	while(1)	Close refNum		if (gDLSGt == 2)		DLScorrfn[] 	= (DLScorrfn[p] == 0) ? 0 : (DLScorrfn[p] - 1)	endif		Note /K DLScorrfn, "Avg int="+num2str(int)	// Append the file name and creation date to the wave note. 	Note DLScorrfn, FileName	GetFileFolderInfo /Z/Q PathAndFileName	Note DLScorrfn, "CreationDate="+Secs2Date(V_creationDate,-2)+";"	Note /NOCR DLScorrfn, "CreationTime="+Secs2Time(V_creationDate,3)+";"	return SampleNameEnd// ************************************************************************// ******				DLS EXPT PARAMS load from the  end of the PrecisionElucidate text file//*************************************************************************// Path2Data must have been previously createdFunction ReadDLSParametersFromFile(FileName)	String FileName	Variable FileRefNum, KeyLineNum	String TextLine		PathInfo Path2Data	if (V_flag == 0)		Print " *** Can't find the file at the expected location"	else		Open/R/P=Path2Data FileRefNum as fileName		TextLine = ReturnKeyWordLineInOpenfile(FileRefNum,"Laser Wavelength",KeyLineNum,1)		if (strlen(TextLine) == 0)			Print " *** This file is not a Dynamic Light Scattering correlation function. " 		else			Print " *** Dynamic Light Scattering correlation function load. " 		endif		Variable /G gDLSLambda = str2num(ReturnTextBeforeNthChar(TextLine,":",1))		Print "         ......  reading in the laser wavelength: "+num2str(gDLSLambda)+" nm. "				Open/R/P=Path2Data FileRefNum as fileName		TextLine = ReturnKeyWordLineInOpenfile(FileRefNum,"Scattering Angle",KeyLineNum,1)		Variable /G gDLSAngle = str2num(ReturnTextBeforeNthChar(TextLine,":",1))		Print "         ......  reading in the scattering angle: "+num2str(gDLSAngle)+" û. "				Open/R/P=Path2Data FileRefNum as fileName		TextLine = ReturnKeyWordLineInOpenfile(FileRefNum,"Set Temperature",KeyLineNum,1)		Variable /G gDLSTemp = str2num(ReturnTextBeforeNthChar(TextLine,":",1))		Print "         ......  reading in the scattering angle: "+num2str(gDLSTemp)+" û C. "				Open/R/P=Path2Data FileRefNum as fileName		TextLine = ReturnKeyWordLineInOpenfile(FileRefNum,"Viscosity",KeyLineNum,1)		Variable /G gDLSViscosity = str2num(ReturnTextBeforeNthChar(TextLine,":",1))		Print "         ......  reading in the viscosity: "+num2str(gDLSViscosity)+" P. "				Open/R/P=Path2Data FileRefNum as fileName		TextLine = ReturnKeyWordLineInOpenfile(FileRefNum,"Index of Refraction",KeyLineNum,1)		Variable /G gDLSIndex = str2num(ReturnTextBeforeNthChar(TextLine,":",1))		Print "         ......  reading in the refractive index: "+num2str(gDLSIndex)	endifEnd// ************************************************************************// ******				Some Trial Fit routines for DLS correlation functions//*************************************************************************Proc DLSFitGexProc(ctrlname):ButtonControl	String ctrlname	PauseUpdate; Silent 1		DLSFitGex($gXData,$gYData,"DataViewerPlot")EndFunction DLSFitGex(Axis,Data,CallPlot)	Wave Axis,Data	String CallPlot		Variable i	String FitName	//	FitName = ReplaceTextInString(nameofwave(Data),"_data","") + "_fit"	FitName = ReplaceString("_data",nameofwave(Data),"") + "_fit"	Duplicate /O/D Data, $FitNameEndFunction MakeDLSCoefficients()	Make /O/D/N=5 DLSCoefs//	DLSCoefs[0] = 0.001		// Arbitrary intensity scaling//	DLSCoefs[1] = 1000	// Background//	DLSCoefs[2] = 3		// p parameter//	DLSCoefs[3] = 3		// s parameter//	DLSCoefs[4] = 1		// to, characteristic relaxation time		Make /O/D/N=126 AFn_calc, GexInt, AFn_axis	AFn_axis[] = 10^(-7 + 0.05*x)EndFunction DLSExpG1(w, ywv, xwv) : FitFunc	Wave w, ywv, xwv		Variable i, j		// Temporary waves	WAVE AFn_calc = AFn_calc	WAVE AFn_axis = AFn_axis	WAVE GexInt=GexInt		// xwv is the time axis for the DSL correlation function. 	Variable NumTimePts = numpnts(xwv)	// AFn_axis is the tau axis for the Gex A function. 	Variable NumTauPts = numpnts(AFn_axis)		Variable NormConst = GexANormConst(w)		i=0	do		GexInt[] = GexAIntegrand(w,xwv[i],AFn_axis[p])				ywv[i] =  areaXY(AFn_axis,GexInt)				i+=1	while(i<NumTimePts)		ywv *= w[1]*NormConst		ywv += 1 + w[0]		// This is just useful for debugging	AFn_calc[] = GexAFunction(w,AFn_axis[p])	AFn_calc *= NormConstEndFunction GexANormConst(w)	Wave w	Variable p = w[2]	Variable s = w[3]	Variable tau_o = w[4]		Variable gam = gamma(p/s)		return s/(tau_o^p * gam)EndFunction GexAIntegrand(w,t,tau)	Wave w	Variable t, tau		Variable GexA = GexAFunction(w,tau)		return GexA * exp(-t/tau)End// This is not normalised. Function GexAFunction(w,tau)	Wave w	Variable tau		return tau^(w[2]-1) * exp(-(tau/w[4])^w[3])End