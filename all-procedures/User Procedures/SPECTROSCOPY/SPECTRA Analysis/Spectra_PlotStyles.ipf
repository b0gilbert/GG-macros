#pragma rtGlobals=1		// Use modern global access method.Function /T DataSuffixFromType(Type,MatchStr)	String Type, MatchStr		String suffix		strswitch (Type)		case "data":			suffix = "data"			break		case "fits":			suffix = "fit"			break		case "residuals":			suffix = "res"			break		case "backgrounds":			suffix = "bg"			break		case "peaks":			suffix = "p*"			break		case "match text":			suffix = "*"+MatchStr+"*"			break		default:		// E.g., when traceType is "all"			suffix = ""	endswitch		return suffixEnd // ***************************************************************************// **************** 			MAIN FUNCTION TO (RE-)APPLY ALL CHOSEN TRACE STYLES// ***************************************************************************Function UpdatePlotLegend(FileNameLegendFlag)	Variable FileNameLegendFlag	NVAR gFileNameLegendFlag 	= root:SPECTRA:Plotting:gFileNameLegendFlag		EndFunction UpdateTraceStyle(PlotName, Selection)	String PlotName, Selection		String suffix=""	String PlotFolderName = "root:SPECTRA:Plotting:" + PlotName	SVAR gTraceType			= $(PlotFolderName + ":gTraceType")	SVAR gTraceMatchStr		= $(PlotFolderName + ":gTraceMatchStr")	NVAR gStackGroup			= $(PlotFolderName + ":gStackGroup")	//	NVAR gUpdateStyle		= $(PlotFolderName + ":gUpdateStyle")	NVAR gUpdateLine			= $(PlotFolderName + ":gUpdateLine")	NVAR gUpdateMarker		= $(PlotFolderName + ":gUpdateMarker")	NVAR gUpdateColor		= $(PlotFolderName + ":gUpdateColor")	NVAR gTraceColorStyle	= $(PlotFolderName + ":gTraceColorStyle")	SVAR gTraceColorTable	= $(PlotFolderName + ":gTraceColorTable")		String TraceName, ListOfTraces	Variable i, NumTraces		if (cmpstr("_all_",Selection) == 0)		suffix 			= DataSuffixFromType(gTraceType,gTraceMatchStr)		ListOfTraces	= RemoveNonTracesFromList(AxisTraceListBG(PlotName, "left",suffix))		NumTraces	= ItemsInList(ListOfTraces)				for (i=0;i<NumTraces;i+=1)			TraceName = StringFromList(i,ListOfTraces)						FullUpdateSingleTrace(PlotName,TraceName,gUpdateStyle,gUpdateLine,gUpdateMarker,gUpdateColor,NumTraces,i,gStackGroup)		endfor				if ((gUpdateColor == 1) && (gTraceColorStyle == 3))//			Traces_Colorize(PlotName,gTraceColorTable,gStackGroup)		endif	else		FullUpdateSingleTrace(PlotName,Selection,gUpdateStyle,gUpdateLine,gUpdateMarker,gUpdateColor,0,0,0)	endif		// This is currently only use for DLS histograms. 	ModifyGraph /Z/W=$PlotName hbFill=5EndFunction FullUpdateSingleTrace(PlotName,TraceName,UpdateStyle,UpdateLine,UpdateMarker,UpdateColor,NTraces,TraceNum,StackGroup)	String PlotName,TraceName	Variable UpdateStyle,UpdateLine,UpdateMarker,UpdateColor,NTraces,TraceNum,StackGroup	String TraceRGB		String PlotFolderName = "root:SPECTRA:Plotting:" + PlotName	NVAR gTraceStyle			= $(PlotFolderName + ":gTraceStyle")	NVAR gTraceLine			= $(PlotFolderName + ":gTraceLine")	NVAR gTraceThick			= $(PlotFolderName + ":gTraceThick")	NVAR gTraceMarker		= $(PlotFolderName + ":gTraceMarker")	NVAR gMarkerSize		= $(PlotFolderName + ":gMarkerSize")	NVAR gMarkerThick		= $(PlotFolderName + ":gMarkerThick")	NVAR gTraceColorStyle	= $(PlotFolderName + ":gTraceColorStyle")	//	SVAR gTraceRGB			= $(PlotFolderName + ":gTraceRGB")	SVAR gTraceColorTable	= $(PlotFolderName + ":gTraceColorTable")		if (UpdateStyle == 1)		UpdateSingleTrace(PlotName,TraceName,"TraceStyle",gTraceStyle,"")	endif		if (UpdateLine == 1)		UpdateSingleTrace(PlotName,TraceName,"LineStyle",gTraceLine,"")		UpdateSingleTrace(PlotName,TraceName,"LineThickness",gTraceThick,"")	endif		if (UpdateMarker == 1)		UpdateSingleTrace(PlotName,TraceName,"MarkerChoice",gTraceMarker,"")		UpdateSingleTrace(PlotName,TraceName,"MarkerSize",gMarkerSize,"")		UpdateSingleTrace(PlotName,TraceName,"MarkerThickness",gMarkerThick,"")	endif		if (UpdateColor == 1)		if (gTraceColorStyle == 1)			UpdateSingleTrace(PlotName,TraceName,"LineColor",0,gTraceRGB)		elseif (gTraceColorStyle == 2)			if ((StackGroup >= -1) && (StackGroup <= 1))				GiveTraceRainbowColor(PlotName,TraceNum,TraceName,"",0,0)			elseif (StackGroup < -1)				GiveTraceRainbowColor(PlotName,trunc(TraceNum/abs(StackGroup)),TraceName,"",0,0)			else				GiveTraceRainbowColor(PlotName,mod(TraceNum,StackGroup),TraceName,"",0,0)			endif		elseif (gTraceColorStyle == 3)							TraceRGB = ReturnColorTableRGB(NTraces,TraceNum,StackGroup,gTraceColorTable,1)			UpdateSingleTrace(PlotName,TraceName,"LineColor",0,TraceRGB)								endif	endifEndFunction UpdateSingleTrace(PlotName,Trace,StyleName,StyleNum,StyleStr)	String PlotName,Trace,StyleName, StyleStr	Variable StyleNum		if (cmpstr("TraceStyle",StyleName) == 0)		ModifyGraph /Z/W=$PlotName mode($Trace)=StyleNum-1			elseif (cmpstr("LineStyle",StyleName) == 0)		ModifyGraph /Z/W=$PlotName lstyle($Trace)=StyleNum			elseif (cmpstr("LineThickness",StyleName) == 0)		ModifyGraph /Z/W=$PlotName lsize($Trace)=StyleNum	elseif (cmpstr("MarkerChoice",StyleName) == 0)		ModifyGraph /Z/W=$PlotName marker($Trace)=StyleNum			elseif (cmpstr("MarkerSize",StyleName) == 0)		ModifyGraph /Z/W=$PlotName msize($Trace)=StyleNum			elseif (cmpstr("MarkerThickness",StyleName) == 0)		ModifyGraph /Z/W=$PlotName mrkThick($Trace)=StyleNum			elseif (cmpstr("LineColor",StyleName) == 0)		String ColorStr = ReplaceString("(", ReplaceString(")", StyleStr, ""), "")		Variable r = str2num(StringFromList(0,ColorStr,","))		Variable g = str2num(StringFromList(1,ColorStr,","))		Variable b = str2num(StringFromList(2,ColorStr,","))			ModifyGraph /Z/W=$PlotName rgb($Trace)=(r,g,b)			//	print "ModifyGraph /Z/W=",PlotName," rgb(",Trace,")=(",r,g,b,")"			endifEnd// ***************************************************************************// **************** 			SINGLE CHANGES TO NAMED TRACES// ***************************************************************************Function ThickSingleTrace(WindowName,DataName,DataThick)	String WindowName,DataName	Variable DataThick		ModifyGraph /Z/W=$WindowName lsize($DataName)=DataThickEndFunction ThickSingleMarker(WindowName,DataName,DataThick)	String WindowName,DataName	Variable DataThick		ModifyGraph /Z/W=$WindowName mrkThick($DataName)=DataThickEndFunction ColorSingleTrace(WindowName,DataName,DataColor)	String WindowName,DataName,DataColor		Variable rgbR, rgbG, rgbB	rgbR	= str2num(StringFromList(0,RGBFromColor(DataColor)))	rgbG	= str2num(StringFromList(1,RGBFromColor(DataColor)))	rgbB	= str2num(StringFromList(2,RGBFromColor(DataColor)))		ModifyGraph /Z/W=$WindowName rgb($DataName)=(rgbR,rgbG,rgbB)EndFunction /T RGBFromColor(Color)	String Color		if (cmpstr("blue",Color) == 0)		return "0;0;65535;"	elseif (cmpstr("green",Color) == 0)		return "1;26214;0;"	elseif (cmpstr("light green",Color) == 0)		return "3;52428;1;"	elseif (cmpstr("gray",Color) == 0)		return "21845;21845;21845;"	elseif (cmpstr("yellow",Color) == 0)		return "65535;65535;0;"	else		return "65535;0;0;"	endifEnd// ***************************************************************************// ******			STACKING MULTIPLE TRACES// ***************************************************************************Function Traces_Stacking(WindowName,StackInc,StackNum,StackGroup)	String WindowName	Variable StackInc,StackNum, StackGroup	String TraceName, DataName, PrevDataName, ListOfTraces=AxisTraceListBG(WindowName, "left","")	Variable i, Groups = abs(StackGroup), DataNum=0, NumTraces	// Remove horizontal or vertical bars from the trace list. 	ListOfTraces 	= RemoveFromList("Bar1Height;Bar2Height;Bar3Height;Bar4Height;", ListOfTraces)	ListOfTraces 	= RemoveFromList("HBar1Height;HBar2Height;HBar3Height;HBar4Height;", ListOfTraces)	NumTraces=ItemsInList(ListOfTraces)		// Automatically stack related traces together (i.e., data, fit, residual traces)	PrevDataName = StripSpacesAndSuffix(StringFromList(0,ListOfTraces),"_")	for (i=1;i<NumTraces;i+=1)		TraceName		= StringFromList(i,ListOfTraces)		DataName		=  StripSpacesAndSuffix(TraceName,"_")		if (cmpstr(DataName,PrevDataName) != 0)			DataNum += 1			PrevDataName = DataName		endif		ModifyGraph offset($TraceName)={0,StackInc * StackNum * trunc(DataNum/Groups)}	endfor		// Rescale the left axis based on the x-axis range. 	SetAxis /A=2 leftEnd// ***************************************************************************// ******			COLOURING MULTIPLE TRACES// ***************************************************************************//Function GiveAllTracesRainbowColor(WindowName)//Function Traces_RainbowColor(WindowName)//	String WindowName//	////	String TraceName, ListOfTraces=TraceNameList(WindowName,";",1)//	String TraceName, ListOfTraces=AxisTraceListBG(WindowName, "left","")//	Variable i, NumTraces=ItemsInList(ListOfTraces)	//	//	for (i=0;i<NumTraces;i+=1)//		TraceName = StringFromList(i,ListOfTraces)//		GiveTraceRainbowColor(WindowName,i,TraceName,"",0,0)//	endfor//End// Give the traces a continuous spectrum of colors based on chosen LUTFunction Traces_Colorize(WindowName,ColorTab,CycleNum)	String WindowName, ColorTab	Variable CycleNum		Variable i, Cycle, TraceNum, TraceRange, NumColors, ColorChoice, r, g, b, Desat=1	String TraceList = AxisTraceListBG(WindowName, "left","")		TraceNum 		= ItemsInList(TraceList)	TraceRange 	= min(TraceNum,CycleNum)		ColorTab2Wave $ColorTab	WAVE M_colors	NumColors = dimsize(M_colors,0)		for (i=0;i<TraceNum;i+=1)		ColorChoice = (mod(i,CycleNum)/(TraceRange-1)) * NumColors//		ColorChoice = (trunc(i/CycleNum)/(TraceRange-1)) * NumColors		//		Cycle = 1 + (i - mod(i,CycleNum))/CycleNum		Cycle = 1 + (i - trunc(i/CycleNum))/CycleNum				// Desaturate by adding a constant to r, g & b		Desat = (Cycle - 1) * 15000				// DISABLE this - the changes are almost invisible, or lead to white curves. 		Desat = 1				r	= min(65535,trunc((M_colors[ColorChoice][0]) + Desat))		g	= min(65535,trunc((M_colors[ColorChoice][1]) + Desat))		b	= min(65535,trunc((M_colors[ColorChoice][2]) + Desat))				ModifyGraph/Z rgb[i]=( r, g, b )	endfor	//	KillWaves M_colors	return 1end// Give the traces a continuous spectrum of colors based on chosen LUTFunction oldTraces_Colorize(WindowName,ColorTab,CycleNum)	String WindowName, ColorTab	Variable CycleNum		Variable i, Cycle, TraceNum, TraceRange, NumColors, ColorChoice, r, g, b, Desat=1	String TraceList = AxisTraceListBG(WindowName, "left","")		TraceNum = ItemsInList(TraceList)	TraceRange = min(TraceNum,CycleNum)		ColorTab2Wave $ColorTab	WAVE M_colors	NumColors = dimsize(M_colors,0)		for (i=0;i<TraceNum;i+=1)//		ColorChoice = (mod(i,CycleNum)/(TraceRange-1)) * NumColors		ColorChoice = (trunc(i/CycleNum)/(TraceRange-1)) * NumColors		//		Cycle = 1 + (i - mod(i,CycleNum))/CycleNum		Cycle = 1 + (i - trunc(i/CycleNum))/CycleNum				// Desaturate by adding a constant to r, g & b		Desat = (Cycle - 1) * 15000				// DISABLE this - the changes are almost invisible, or lead to white curves. 		Desat = 1				r	= min(65535,trunc((M_colors[ColorChoice][0]) + Desat))		g	= min(65535,trunc((M_colors[ColorChoice][1]) + Desat))		b	= min(65535,trunc((M_colors[ColorChoice][2]) + Desat))				ModifyGraph/Z rgb[i]=( r, g, b )	endfor	//	KillWaves M_colors	return 1end