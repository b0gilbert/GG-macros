#pragma TextEncoding = "UTF-8"#pragma rtGlobals=1		// Use modern global access method.// ***************************************************************************// **************** 			Routines to save commonly used Axis Labels// ***************************************************************************Function SetCommonPlotLabels()		String /G gCommonXLabels, gCommonYLabels	gCommonXLabels	  = "_manual_;Distance (Å);Q (Å-1);Time (min);Time (s);Photon energy (eV);2-Theta (degrees);"	gCommonXLabels	+= "Wavenumbers (cm-1);Pressure (GPa);Temperature (K);pH;Radius (nm);Wavelength (nm);DLS decay time (s-1)"		gCommonYLabels="_manual_;Intensity;Distance;MSRD;% Abundance;Absorbance;"End// Assign a common x-axis label. // The point of this SEPARATE function is to be able to include formatting statements that look ugly in the popup menu. Function /T AssignXAxisLabel(XLabelChoice,ManualXLabel)	Variable XLabelChoice	String ManualXLabel	PauseUpdate; Silent 1		SVAR gCommonXLabels=gCommonXLabels	switch (XLabelChoice)		case 1: 			return ManualXLabel		case 2: 			return "Distance (Å)"		case 3: 			return "Q (Å\S-1\M)"		case 4: 			return "Time (mins)"		case 5: 			return "Time (s)"		case 6: 			return "Photon energy (eV)"		case 7: 			return "2\Z26θ\M (degrees)"		case 8: 			return "Wavenumbers (cm\S-1\M)"		case 9: 			return "Pressure (GPa)"		case 10: 			return "Temperature (K)"		case 11: 			return "pH"		case 12: 			return "Radius (nm)"		case 13: 			return "Wavelength (nm)"		default: 			return StringFromList(XLabelChoice-1,gCommonXLabels)	endswitchEnd// Assign a common y-axis labelFunction /T AssignYAxisLabel(YLabelChoice,ManualYLabel)	Variable YLabelChoice	String ManualYLabel	PauseUpdate; Silent 1	//	Print " YLabelChoice is", YLabelChoice//	Print " ManualYLabel is", ManualYLabel	SVAR gCommonYLabels=gCommonYLabels	switch (YLabelChoice)		case 1:			return ManualYLabel		case 2:			return "Intensity (Arb. Units)"		case 3:			return "Distance (Å)"		case 4:			return "MRSD (Å\S2\M)"		case 5:			return "% Abundance"		case 6:			return "Absorbance"		default:			return StringFromList(YLabelChoice-1,gCommonYLabels)	endswitchEnd// ***************************************************************************// **************** 			MAIN DATA INPUT PROCEDURE for 2-column Data files// ***************************************************************************Proc LoadDataFiles()	PauseUpdate; Silent 1		KillNamedTable("Table0")	// Record all the data files loaded into memory	if (exists("gNumFilesLoaded")==0)		Variable /G gNumFilesLoaded=0	endif	//	if (exists("gNameSource")==0)		Variable /G gNameSource=1	endif	if (exists("gErrorsFlag")==0)		Variable /G gErrorsFlag=1	endif	//	if (exists("gColAssignFlag")==0)		Variable /G gColAssignFlag=1	endif	if (exists("gYLabelChoice")==0)		Variable /G gYLabelChoice=2	endif	if (exists("gXLabelChoice")==0)		Variable /G gXLabelChoice=6	endif	//	if (exists("gAxisCol")==0)		Variable /G gAxisCol=0	endif	if (exists("gDataCol")==0)		Variable /G gDataCol=1	endif	if (exists("ListOfDataNames")==0)		Make /O/N=1/T ListOfDataNames	endif	//	if (exists("gSortFlag")==0)		Variable /G gSortFlag=0	endif	if (exists("gMakeTableFlag")==0)		Variable /G gMakeTableFlag=0	endif		Variable /G gMultiLoadFlag, gHeaderLines	String /G gXLabel, gYLabel, gDataName		SetCommonPlotLabels()		Variable /G gSuccessflag = 0	GetLoadParameters()	if (gSuccessflag == 0)		KillVariables /Z gSuccessflag		return	endif	KillVariables /Z gSuccessflag		LoadOneOrManyTextFiles(gMultiLoadFlag)End// ***************************************************************************// **************** 				User Prompts for Data Input// ***************************************************************************Proc GetLoadParameters(MultiLoadFlag,ColAssignFlag,NameSource,ErrorsFlag,YLabelChoice,XLabelChoice,YLabel,XLabel,SortFlag,MakeTableFlag)	Variable MultiLoadFlag=gMultiLoadFlag	Prompt MultiLoadFlag, "Single or multiple load?", popup, "single;all in folder"	Variable ColAssignFlag=gColAssignFlag	Prompt ColAssignFlag, "Data column format", popup, "2-column auto;2-column manual;n-column data & fit;GSAS data & fit;DLS Histogram;DLS Correlation Fn.;XANES data & Izero;"	//	Variable NameSource=gNameSource	Prompt NameSource, "Source of naming", popup, "file name;column headings;"	Variable ErrorsFlag=gErrorsFlag	Prompt ErrorsFlag, "Error columns?", popup, "no;yes;"	//	Variable YLabelChoice=gYLabelChoice	Prompt YLabelChoice, "Common Y-axis labels", popup, gCommonYLabels	String YLabel=gYLabel	Prompt YLabel, "alternative Y-axis label"	//	Variable XLabelChoice=gXLabelChoice	Prompt XLabelChoice, "Common X-axis labels", popup, gCommonXLabels	String XLabel=gXLabel	Prompt XLabel, "alternative X-axis label"	//	Variable SortFlag=gSortFlag	Prompt SortFlag, "Sort options", popup, "none;sort data names;sort axis;sort names and axis;"	//	Variable MakeTableFlag=gMakeTableFlag	Prompt MakeTableFlag, "Place data into table?", popup, "no;axis & data;data only;all columns;"	PauseUpdate; Silent 1		if (ColAssignFlag==4)		// Use filename as source of dataname		NameSource = 1	endif	gNameSource = NameSource	gErrorsFlag = ErrorsFlag	gColAssignFlag=ColAssignFlag	if ((ColAssignFlag==3) && (MultiLoadFlag>1))		MultiLoadFlag=1		Print " *** At present, Data & Fit files can only be loaded one at a time."	endif	gMultiLoadFlag=MultiLoadFlag	//	if ((MultiLoadFlag == 2) && (gNameSource==2))		gNameSource = 1		Print " *** Filenames are used to name the data when loading multiple files."	endif	//	gXLabelChoice=XLabelChoice	gYLabelChoice=YLabelChoice	//	gXLabel = AssignXAxisLabel(XLabelChoice,XLabel)	//	gYLabel = AssignYAxisLabel(YLabelChoice,YLabel)	//	gSortFlag=SortFlag	gMakeTableFlag=MakeTableFlag		Variable /G gSuccessflag = 1End// A shorter version of the above, which is occasionally needed. Proc GetPlotLabels(YLabelChoice,YLabel,XLabelChoice,XLabel)	String /G gYLabel, gXLabel	Variable /G gYLabelChoice, gXLabelChoice	//	Variable YLabelChoice=gYLabelChoice	Prompt YLabelChoice, "Common Y-axis labels", popup, gCommonYLabels	String YLabel=gYLabel	Prompt YLabel, "alternative Y-axis label"	//	Variable XLabelChoice=gXLabelChoice	Prompt XLabelChoice, "Common X-axis labels", popup, gCommonXLabels	String XLabel=gXLabel	Prompt XLabel, "alternative X-axis label"	PauseUpdate; Silent 1	gXLabelChoice=XLabelChoice	gYLabelChoice=YLabelChoice	//	gXLabel = AssignXAxisLabel(XLabelChoice,XLabel)	gYLabel = AssignYAxisLabel(YLabelChoice,YLabel)EndProc GetHeaderInfo(HeaderLines)	Variable HeaderLines=gHeaderLines	Prompt HeaderLines, "How many lines of text before the data?"	PauseUpdate; Silent 1		gHeaderLines=HeaderLinesEndProc GetColumnInfo(AxisCol,DataCol,CancelFlag)	Variable CancelFlag	Prompt CancelFlag, "Cancel the data load?", popup, "no;yes"	Variable AxisCol=gAxisCol	Prompt AxisCol, "The x-axis is in which column? [First column is #0]"	Variable DataCol=gDataCol	Prompt DataCol, "The data is in which column? [First column is #0]"		if (CancelFlag == 2)		gAxisCol=-1		gDataCol=-1	else		gAxisCol=AxisCol		gDataCol=DataCol	endifEnd	// ***************************************************************************// **************** 				DATA INPUT ROUTINES// ***************************************************************************// This is a monstrosity at present ... Proc LoadOneOrManyTextFiles(MultiLoadFlag)	Variable MultiLoadFlag	PauseUpdate; Silent 1		Variable i, FileRefNum, NameLen, ColNameLen, MultiLoadNum	String FileName, NameChar, FileExtnStr, Path2File, message, MultiLoadList=""		Variable SuccessLoadFlag, TwoColumnDataFlag, NColumnDataFlag, SigmasFlag, ColNum, ActualNumCol	Variable  GoodSuffixFlag, NeedHeaderFlag, TryTwoColumn=1, ChiSqr	String DataName, FullDataName, ColName, NDataName, NFitName, NResidsName	String FitWaveName, FullFitName, BGWaveName, FullBGName, ResidsWaveName, FullResidsName	String Axnorm = "" // A separate axis file when raw & normalized data are loaded. 		String /G gDataName, gLoadedWaveList		SuccessLoadFlag=0	TwoColumnDataFlag=0	NColumnDataFlag=0	NeedHeaderFlag=0	GoodSuffixFlag=0		// Load one data file, or any in a folder	if (MultiLoadFlag==1)		message = "Find the data file to load"	else		message = "Find any file in the folder"	endif		KillNNamedWaves("wave",10)		if (gColAssignFlag==4)		// Load a SINGLE GSAS output file		LoadGSASCSVFile()		return 	endif	if (gColAssignFlag==5)		// Load 1 or many DLS Histogram files		LoadDLSHistFile(gMultiLoadFlag,gSortFlag,gMakeTableFlag)		return 	endif	if (gColAssignFlag==6)		gYLabelChoice = 2		gXLabelChoice = 5	endif	if (gColAssignFlag==7)		// Load a SINGLE XANES file		LoadXANESFile()		return 	endif		// ******************************************************************	// ****	FIRST: IF REQUESTED, TRY LOADING AN IGOR "Data & Fit" LOAD	// ****			Igor TEXT wave format only, cannot handle errors. 	// ******************************************************************	if (gColAssignFlag==3)		// Look for an Igor Text Wave		Open /Z=2/M=message/R/T="IGTX" FileRefNum		if (V_Flag == -1)			Print " *** Data load cancelled by user."			return		endif		if (V_Flag!=0)			NColumnDataFlag = 0			SuccessLoadFlag=0		else			// If the file exists, try a simple text file load ...			Close FileRefNum			// ... and if so, load it			Path2File = S_fileName					// Load and READ column names			Loadwave /A/W/D/O/Q/T Path2File			NewPath/O/Q Path2Data, S_path						// Check that the formatting is appropriate. 			// Check the 0th column - AXIS			ColName =  StringFromList(0,S_waveNames)			ColNameLen = strlen(ColName)			if (cmpstr(ColName[ColNameLen-5,ColNameLen-1],"_axis")==0)				NDataName = ColName[0,ColNameLen-6]	// <--- this is the true data name								// Is there background-subtracted data in the file?				ColNum = WhichListItem(NDataName+"_Pynorm",S_waveNames)				if (ColNum>-1)					Axnorm = NDataName + "_axnorm"					Duplicate /O/D $ColName, $Axnorm				endif										// Check the 1st column - DATA				ColName =  StringFromList(1,S_waveNames)				ColNameLen = strlen(ColName)				if (cmpstr(ColName,NDataName+"_data")==0)					// Check the 2nd column - FIT					ColName =  StringFromList(2,S_waveNames)					ColNameLen = strlen(ColName)					// Convert "Igor" fit naming styles to "Gilbert" style. 					if (cmpstr(ColName,"fit_" + NDataName)==0)						NFitName = NDataName+"_fit"						Rename $ColName, $NFitName					endif					if (cmpstr(ColName,NDataName+"_fit")==0)						SuccessLoadFlag = 1						NColumnDataFlag = 1												// Check the 3rd column - RESIDUALS. Obviously, we can create these if they are absent. 						ColName =  StringFromList(3,S_waveNames)						ColNameLen = strlen(ColName)						if (cmpstr(ColName,NDataName+"_resids")==0)							// The residuals are present in the file ... 							NResidsName = ColName						else							// ... or not. 							ColName = NDataName+"_data"							NFitName =  NDataName+"_fit"							NResidsName = NDataName+"_resids"							Duplicate /O/D $NFitName, $NResidsName							$NResidsName = $ColName - $NFitName						endif												// Calculate and display the chi-squared for this fit. 						Duplicate /O/D $ColName, ChiSqrWave						ChiSqrWave[]=$NResidsName[p]^2						ChiSqr = sum(ChiSqrWave,pnt2x(ChiSqrWave,0),pnt2x(ChiSqrWave,numpnts(ChiSqrWave)-1))						Print " *** Loading a Data & Fit file. The total chi-squared of the residuals is",ChiSqr						KillWaves /Z ChiSqrWave												if ((gSortFlag == 3) || (gSortFlag == 4))							DoAlert 0, "Sorting waves on load. Caution!"							SortWavesFromList(S_WaveNames,gAxisCol)						endif													if (gNameSource==1)							// Use the filename as naming source ...							gDataName = GenericUserStringInput(StripSpacesAndSuffix(S_FileName,"."),"Modify the data name if required.")						else							// ... or the column name.							gDataName = NDataName						endif						// Check for no conflicts with earlier loads. 						if (gNumFilesLoaded >1)							gDataName = CheckDataName(gDataName,"ListOfDataNames")						endif						DataName = gDataName													if (cmpstr(NDataName,gDataName) != 0)							// In case we found a naming conflict. 							Print "         Changing name segment from",NDataName,"to",gDataName							ChangeWaveNames(S_waveNames+Axnorm+";",NDataName,gDataName)							NDataName = gDataName						endif						gLoadedWaveList = S_waveNames					endif				endif			endif		endif				if (SuccessLoadFlag == 0)			DoAlert 0, "The file does not have a correct Data & Fit formatting."			Print " *** The file does not have a correct Data & Fit formatting. Please load as a 2-column file"			if (exists("S_waveNames")==2)				KillWavesFromList(S_waveNames)			endif			return 		endif	endif	// ******************************************************************		// ******************************************************************	// ****	SECOND:  TRY LOADING A GENERAL TEXT DATA. 	// ****		General text, can be data & fit (?), or just axis-data. 	// ****		Four-column data files are flagged as posible containing errors, but are not loaded as such. 	// ******************************************************************	// ****	If 1st attempt failed, look for a general (text) file. 	if (SuccessLoadFlag == 0)		Open /Z=2/M=message/R/T="????" FileRefNum		if (V_Flag == -1)			Print " *** Data load cancelled by user."			return		endif		if (V_Flag!=0)			// A problem loading the file		else			// The file exists, so try a simple text file load ...			Close FileRefNum			Path2File = S_fileName			if ((gNameSource==2) && (gColAssignFlag<3))				// For 2-column with no error ONLY, label the loaded data by its column name				Loadwave /W/A/O/D/G/Q Path2File			else				// In general, label the loaded data by the filename				Loadwave /N/D/G/Q Path2File			endif			ActualNumCol = V_flag						if (ActualNumCol>0)				NewPath/O/Q Path2Data, S_path				SuccessLoadFlag=1				if (V_flag==2)					TwoColumnDataFlag=1					Print " *** 2-column data with no errors"				else					// If there are 4 columns, perhaps it's a 2-column with errors format					if (ActualNumCol==4)						if (gErrorsFlag == 2)							Print " *** 4 column data and errors"							TwoColumnDataFlag=1							SigmasFlag = 1						else							Print " *** 4 columns in this data file. If this is a data & errors format, you must specify it when loading. "						endif					endif				endif			else				// Try a tweaked general text file load				GetHeaderInfo()				if (gNameSource==2)					Print " *** Cannot read column names from this file. "					gNameSource = 1				endif				LoadWave /Q/A/G/D/K=0/O/V={" "," $",0,0}/L={0,gHeaderLines,0,0,0}				ActualNumCol = V_flag											if (ActualNumCol>0)					NewPath/O Path2Data, S_path										SuccessLoadFlag=1					NeedHeaderFlag=1					if (ActualNumCol==2)						TwoColumnDataFlag==1					else						// If there are 4 columns, perhaps it's a 2-column with errors format						if (ActualNumCol==4)							if (gErrorsFlag == 2)								Print " *** 4 column data and errors"								TwoColumnDataFlag=1								SigmasFlag = 1							else								Print " *** 4 columns in this data file. If this is a data & errors format, you must specify it when loading. "							endif						endif					endif				endif			endif		endif	endif	// ******************************************************************		// ******************************************************************	// ****	If 2nd attempt failed, get assistance from user to understand data format	// ******************************************************************	if ((gColAssignFlag==2) || ((TwoColumnDataFlag==0) && (gColAssignFlag < 3)))		GetColumnInfo()		if (gAxisCol == -1)			Print " *** Data load cancelled by user."			return		endif	else		gAxisCol=0		if (SigmasFlag == 1)			gDataCol=2		else			gDataCol=1		endif	endif	// ******************************************************************	//	//	Here, I think we should try another load using the new data format info. 	//	// ******************************************************************		if (SuccessLoadFlag==0)		Print " *** No success at loading the chosen file!"		return 	endif		// ******************************************************************	// ****	At this point, one of the above loads must have succeeded. 	// ******************************************************************		// ******************************************************************	// ****	SINGLE DATA LOAD: name the data appropriately and clean up. 	// ******************************************************************	if (MultiLoadFlag==1)		// Give a single load of data the desired naming. 		if (NColumnDataFlag==1)			// N-column data & fit files already contained the correct data name.		else			// Here, we are obtaining and tweaking the Data name. 			if (gNameSource==1)				gDataName = StripSpacesAndSuffix(S_filename,".")			else				gDataName = StripSpacesAndSuffix(StringFromList(gDataCol, S_Wavenames),".")			endif//			gDataName = ReplaceTextInString(ReplaceTextInString(gDataName,"_data",""),"_axis","")			gDataName = ReplaceString("_data",ReplaceString("_data",gDataName,""),"_axis")						// Confirm data name with user			gDataName = GenericUserStringInput(gDataName,"Modify the data name if required.")						// Ensure no conflict with earlier data loads. 			if (gNumFilesLoaded > 1)				gDataName = CheckDataName(gDataName,"ListOfDataNames")			endif			DataName = gDataName						AssignNamesToLoadedData(gAxisCol,gDataCol,SigmasFlag,gSortFlag,S_Wavenames,DataName)		endif	endif	// ******************************************************************		// ******************************************************************	// ****	MULTIPLE DATA LOAD:	// ******************************************************************	if (MultiLoadFlag==2)		// For multi-loads, the data must have a definite suffix, which is determined from the name of the chosen file. 		FileExtnStr= "." + ReturnTextAfterNthChar(ReturnTextAfterNthChar(S_fileName,":",1),".",1)		if (cmpstr(FileExtnStr,ReturnTextAfterNthChar(S_fileName,":",1)) != 0)			GoodSuffixFlag=1			Print " *** Loading multiple files of type:",FileExtnStr						// Extract DLS information if needed, from the selected file only			if (gColAssignFlag==6)				ReadDLSParametersFromFile(S_FileName)			endif		else			Print " *** Cannot load multiple data files without definite suffix, e.g. '.txt'!!"			return		endif				if (GoodSuffixFlag==1)			NewPath/O/Q Path2Data, S_path						// Make a list of the files in the folder			i=0			do				FileName = IndexedFile(Path2Data, i, FileExtnStr)				if (strlen(FileName) == 0)					break				else					MultiLoadList += FileName + ";"				endif				i+=1			while(1)						// Sort the list if desired			if ((gSortFlag == 2) || (gSortFlag == 4))				MultiLoadList = SortList(MultiLoadList,";",16)			endif						// Look for common prefix for shortening names			Variable /G gRemovePrefixFlag			String /G gPrefix = LookForCommonPrefix(MultiLoadList)			if (strlen(gPrefix)>0)				ConfirmPrefixRemoval()			endif						MultiLoadNum = ItemsInList(MultiLoadList)			i=0			do				Filename = StringFromList(i,MultiLoadList)				if (NeedHeaderFlag==1)					// Loading general text file, and cannot read column names					LoadWave /Q/A/G/D/K=0/O/V={" "," $",0,0}/L={0,gHeaderLines,0,0,0} /P=Path2Data Filename				else					Loadwave /Q/D/N/G/P=Path2Data Filename				endif								// Check that there are the same number of columns as our first loaded file				if (V_flag == ActualNumCol)					if (NColumnDataFlag==1)						// Not allowed at present					else						// Determine the dataname from the filename						DataName = StripSpacesAndSuffix(S_FileName,".")												if (gRemovePrefixFlag==2)							DataName = ReplaceTextInString(DataName,gPrefix,"")						endif												AssignNamesToLoadedData(gAxisCol,gDataCol,SigmasFlag,gSortFlag,S_Wavenames,DataName)					endif										// Update the list of loaded files					gNumFilesLoaded+=1					ReDimension /N=(gNumFilesLoaded) ListOfDataNames					ListOfDataNames[gNumFilesLoaded-1]=DataName										// Add columns to table if requested					if (gMakeTableFlag > 1)						DisplayLoadedDataInTable(gMakeTableFlag,DataName)					endif										// Remove spurious negative values from DLS data					if (gColAssignFlag==6)						FullDataName = DataName + "_data"						$FullDataName[] = ReplaceThresholdValue($FullDataName[p],1,1,0,1)					endif										Print "        Filename is ", S_FileName				else					Print "       Skipped file",S_FileName,"as it has the wrong number of columns. "				endif										i+=1			while(i<MultiLoadNum)		endif	else		Print " *** Loading a single data file: ", S_FileName				// Record the data name for the loaded file		gNumFilesLoaded+=1		ReDimension /N=(gNumFilesLoaded) ListOfDataNames		ListOfDataNames[gNumFilesLoaded-1]=DataName				if (gColAssignFlag==6)			// Extract DLS information if needed			ReadDLSParametersFromFile(S_FileName)			// Remove spurious negative values from DLS data			FullDataName = DataName + "_data"			$FullDataName[] = ReplaceThresholdValue($FullDataName[p],1,1,0,1)		endif				// Add columns to table if requested		if (gMakeTableFlag > 1)			DisplayLoadedDataInTable(gMakeTableFlag,DataName)		endif	endif		DisplayCoefficientsTable("Data_Filenames","Data Filenames","ListOfDataNames;","156;", "2;", 767,499,1015,760,"no")	KillVariables /Z gRemovePrefixFlag	Killstrings /Z tempString, gDataName, gLoadedWaveList, gPrefixEndProc ConfirmPrefixRemoval(RemovePrefixFlag,Prefix)	Variable RemovePrefixFlag=gRemovePrefixFlag	Prompt RemovePrefixFlag, "Remove the text below from all filenames?", popup, "no;yes;"	String Prefix = gPrefix	Prompt Prefix, "You may shorten the text to be removed"	PauseUpdate; Silent 1		gRemovePrefixFlag=RemovePrefixFlag	gPrefix=PrefixEnd// Before launching this we need to ensure 2 things. // If it's a 2-column load, there must be at least 2 columns. // If it's a 4 column data & errors load, there must be exactly 4 columnsProc AssignNamesToLoadedData(AxisCol,DataCol,SigmasFlag,SortFlag,S_Wavenames,DataName)	Variable AxisCol, DataCol, SigmasFlag, SortFlag	String S_Wavenames,DataName	PauseUpdate; Silent 1		String AxisColName, AxisErrorsColName, DataColName, DataErrorsColName	String FullAxisName, FullAxisErrorsName, FullDataName, FullDataErrorsName		FullAxisName = DataName+"_axis"	FullAxisErrorsName = FullAxisName + "_sig"	FullDataName=DataName+"_data"	FullDataErrorsName = FullDataName+"_sig"		gLoadedWaveList = ""		// Create the Axis wave	AxisColName = StringFromList(AxisCol, S_Wavenames)	Duplicate /O $AxisColName, $FullAxisName	gLoadedWaveList += FullAxisName+";"		// Create the Axis Errors wave if present	if (SigmasFlag == 1)		AxisErrorsColName = StringFromList(AxisCol+1, S_Wavenames)		Duplicate /O $AxisErrorsColName, $FullAxisErrorsName		gLoadedWaveList += FullAxisErrorsName+";"	endif		// Create the Data wave	DataColName = StringFromList(DataCol, S_Wavenames)	Duplicate /O $DataColName, $FullDataName	gLoadedWaveList += FullDataName+";"			// Create the Data Errors wave if present	if (SigmasFlag == 1)		DataErrorsColName = StringFromList(DataCol+1, S_Wavenames)		Duplicate /O $DataErrorsColName, $FullDataErrorsName		gLoadedWaveList += FullDataErrorsName+";"	endif		if ((SortFlag == 3) || (SortFlag == 4))		DoAlert 0, "Sorting waves on load. Caution!"		SortWavesFromList(gLoadedWaveList,0)	endif	KillWavesFromList(S_waveNames)EndProc DisplayLoadedDataInTable(MakeTableFlag,DataName)	Variable MakeTableFlag	String DataName	PauseUpdate; Silent 1		String TableWaveList	String FullAxisName, FullAxisErrorName, FullDataName, FullDataErrorsName		FullAxisName = DataName+"_axis"	FullAxisErrorName = FullAxisName + "_sig"	FullDataName=DataName+"_data"	FullDataErrorsName = FullDataName+"_sig"		if (MakeTableFlag == 2)		TableWaveList = FullAxisName+";"+FullDataName+";"	endif	if (MakeTableFlag == 3)		TableWaveList = FullDataName+";"	endif	if (MakeTableFlag == 4)		TableWaveList = gLoadedWaveList	endif		DisplayCoefficientsTable("Data_Columns","Data Columns",TableWaveList,"_auto_;", "2;", 10,10,410,210,"no")End// ***************************************************************************// **************** 			Routines to load specific data formats// ***************************************************************************// ***************************************************************************// **************** 					XANES file input // ***************************************************************************// ***** 				This is features a NORMALIZATION routine. // ***************************************************************************Proc LoadXANESFile(XASPreset,XASAxisColNum,XASIoColNum,XASDataColNum,XASNormChoice,EdgeMode)	Variable /G gXASPreset, gXASAxisColNum, gXASDataColNum, gXASIoColNum, gXASNormChoice	String /G gEdgeMode	//	Variable XASPreset=gXASPreset	Prompt XASPreset, "Preset column assignment?", popup, "_none_;SSRL Transmission;SSRL FY;"	Variable XASAxisColNum=gXASAxisColNum	Prompt XASAxisColNum,"Which column contains the energy axis?"	Variable XASIoColNum=gXASIoColNum	Prompt XASIoColNum, "Which column contains the Izero?"	Variable XASDataColNum=gXASDataColNum	Prompt XASDataColNum, "Which column contains the absorption data axis?"	Variable XASNormChoice=gXASNormChoice	Prompt XASNormChoice, "Normalization method", popup, "Log(I/Io);I/Io;" 	String EdgeMode=gEdgeMode	Prompt EdgeMode,"Handle background and edge jump?",popup,"none;pre-peak;arc-tan;"	PauseUpdate; Silent 1		gXASPreset = XASPreset	if (XASPreset == 0)		// Completely Manual entry		gXASAxisColNum=XASAxisColNum		gXASDataColNum=XASDataColNum		gXASIoColNum=XASIoColNum		gXASNormChoice=XASNormChoice	endif	if (XASPreset == 1)		// SSRL Transmission		gXASAxisColNum=2		gXASDataColNum=4		gXASIoColNum=3		gXASNormChoice=1	endif	if (XASPreset == 2)		// SSRL Fluorescence		gXASAxisColNum=2		gXASDataColNum=5		gXASIoColNum=3		gXASNormChoice=2	endif	gEdgeMode=EdgeMode		String DataName, DataWaveName, FullDataName, AxisWaveName, FullAxisName	String IoWaveName, FullIoName		Variable FileRefNum, ChiSqr	String Path2File, message = "Find the XANES data file to load"		KillNNamedWaves("wave",10)	Open /Z=2/M=message/R/T="????" FileRefNum	if (V_Flag == -1)		Print " *** Print data load cancelled by user."		return	endif	if (V_Flag==0)		// The file exists, so try a simple text file load ...		Close FileRefNum		Path2File = S_fileName				// Automatically use wave0, wave1 etc names		Loadwave /N/D/G/Q Path2File				if (V_flag == 0)			Print " *** Error opening XANES file!"			return		endif					// Obtain and tweak the Data name. 		gDataName = ReplaceTextInString(ReplaceTextInString(StripSpacesAndSuffix(S_filename,"."),"_data",""),"_axis","")		gDataName = GenericUserStringInput(gDataName,"Modify the data name if required.")		if (gNumFilesLoaded > 1)			gDataName = CheckDataName(gDataName,"ListOfDataNames")		endif		DataName = gDataName				AxisWaveName=StringFromList(gXASAxisColNum, S_Wavenames)		FullAxisName=DataName+"_axis"		Duplicate /O $AxisWaveName, $FullAxisName				DataWaveName=StringFromList(gXASDataColNum, S_Wavenames)		FullDataName=DataName+"_data"		Duplicate /O $DataWaveName, $FullDataName				IoWaveName=StringFromList(gXASIoColNum, S_Wavenames)		FullIoName=DataName+"_Izero"		Duplicate /O $IoWaveName, $FullIoName				$FullDataName = $DataWaveName/$FullIoName		if (XASNormChoice == 1)			$FullDataName = log($DataWaveName/$FullIoName)		endif				if (cmpstr("none",EdgeMode)!=0)			Variable /G gEdgeVal = GenericUserVarInput(gEdgeVal,"Please enter the approxiate threshold position")			String XASPreEdgeName = DataName+"_pre"			String XASEdgeJumpName = DataName+"_edge"			String XASNormName = DataName+"_unity"						FitXASPreEdge(EdgeMode, FullAxisName,FullDataName,XASPreEdgeName, XASEdgeJumpName, XASNormName,gEdgeVal,1)		endif				KillWavesFromList(S_waveNames)		KillWaves /Z $IoWaveName				// Record the full name of the loaded data file		gNumFilesLoaded+=1		ReDimension /N=(gNumFilesLoaded) ListOfDataNames		ListOfDataNames[gNumFilesLoaded-1]=DataName				DisplayCoefficientsTable("Data_Filenames","Data Filenames","ListOfDataNames;","156;", "2;", 767,499,1015,760,"no")	endifEnd// ***************************************************************************// **************** 					GSAS XRD refinement file input // ***************************************************************************// ***** 				Is there any way this could be included in the regular file input monstrosity?// ***************************************************************************Proc LoadGSASCSVFile()	PauseUpdate; Silent 1		String DataName, DataWaveName, FullDataName, AxisWaveName, FullAxisName	String FitWaveName, FullFitName, BGWaveName, FullBGName, ResidsWaveName, FullResidsName		Variable FileRefNum, ChiSqr	String Path2File, message = "Find the GSAS data file to load"		KillNNamedWaves("wave",10)	Open /Z=2/M=message/R/T="????" FileRefNum	if (V_Flag == -1)		Print " *** Print data load cancelled by user."		return	endif	if (V_Flag==0)		// The file exists, so try a simple text file load ...		Close FileRefNum		Path2File = S_fileName		LoadWave /N/Q/J/D/K=0/L={0,6,0,0,6} Path2File				if (V_flag == 0)			Print " *** Error opening GSAS file!"			return		endif					// Obtain and tweak the Data name. 		gDataName = ReplaceTextInString(ReplaceTextInString(StripSpacesAndSuffix(S_filename,"."),"_data",""),"_axis","")		gDataName = GenericUserStringInput(gDataName,"Modify the data name if required.")		if (gNumFilesLoaded > 1)			gDataName = CheckDataName(gDataName,"ListOfDataNames")		endif		DataName = gDataName				AxisWaveName=StringFromList(1, S_Wavenames)		FullAxisName=DataName+"_axis"		Duplicate /O $AxisWaveName, $FullAxisName				DataWaveName=StringFromList(2, S_Wavenames)		FullDataName=DataName+"_data"		Duplicate /O $DataWaveName, $FullDataName				FitWaveName=StringFromList(3, S_Wavenames)		FullFitName=DataName+"_fit"		Duplicate /O $FitWaveName, $FullFitName				BGWaveName=StringFromList(4, S_Wavenames)		FullBGName=DataName+"_bg"		Duplicate /O $BGWaveName, $FullBGName					ResidsWaveName=StringFromList(5, S_Wavenames)		FullResidsName=DataName+"_resids"		Duplicate /O $ResidsWaveName, $FullResidsName				// Calculate and display the chi-squared for this fit. 		Duplicate /O/D $FullResidsName, ChiSqrWave		ChiSqrWave[]=$FullResidsName[p]^2		ChiSqr = sum(ChiSqrWave,pnt2x(ChiSqrWave,0),pnt2x(ChiSqrWave,numpnts(ChiSqrWave)-1))		Print " *** Loading GSAS Data & Fit file. The total chi-squared of the residuals is",ChiSqr		KillWaves /Z ChiSqrWave					KillWavesFromList(S_waveNames)				// Record the full name of the loaded data file		gNumFilesLoaded+=1		ReDimension /N=(gNumFilesLoaded) ListOfDataNames		ListOfDataNames[gNumFilesLoaded-1]=DataName				DisplayCoefficientsTable("Data_Filenames","Data Filenames","ListOfDataNames;","156;", "2;", 767,499,1015,760,"no")	endifEnd// ***************************************************************************// **************** 			OBSOLETE!!// ***************************************************************************