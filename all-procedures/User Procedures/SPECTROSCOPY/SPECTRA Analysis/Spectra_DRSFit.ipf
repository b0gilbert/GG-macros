#pragma rtGlobals=1		// Use modern global access method.// THeses are truly general functions in MultiPeak//Function SaveChiSquaredValues(DataNum,ChiSq,RChiSq,FitResultsFolder)//Function /T CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,SubDataNum,SubDataType,FitType)//Function /T DataOrSubsidiaryDataInfo(wDataList,wDataGroup,DataNum,SubDataNum,SubDataType,Info)//Function /T ReturnFitFolderName(FitType)//Function SetFitPlotFormat()// ***************************************************************************// **************** 			INITIALIZATION: MAKE GLOBAL VARIABLES AND DATA FOLDERS// ***************************************************************************Function PlotDRS()		WAVE wFitDataSel			= root:SPECTRA:Fitting:DRS:wFitDataSel	NVAR gPrevFitDataNum 	= root:SPECTRA:Fitting:DRSgPrevFitDataNum		// By default, select the first spectrum 	wFitDataSel=0; wFitDataSel[0]=1	gPrevFitDataNum = 0	MakePlotDataFolders("DRSFitPanel",0)		CreateDRSFitPanel("DRSFitPanel")		DisplayDRSDataAndCoeffs(0)	//	TransferPlotPreferences("DRSFitPanel",1)		SetCursorFitRange2("DRSFitPanel", "root:SPECTRA:Fitting:DRS", 0)		NVAR gPlotXMin 				= root:SPECTRA:Plotting:DRSFitPanel:gPlotXMin	NVAR gPlotXMax 			= root:SPECTRA:Plotting:DRSFitPanel:gPlotXMax		SetAxis bottom, gPlotXMin, gPlotXMax	SetAxis /A=2 left		DRSFitPanelLabels()EndFunction InitDRSFit()	String OldDF = getDataFolder(1)	NewDataFolder/O/S root:SPECTRA	NewDataFolder/O/S root:SPECTRA:Fitting		// *** Have the DRS globals completely contained	NewDataFolder/O/S root:SPECTRA:Fitting:DRS				// This command CREATES the waves wFitDataList, wFitDataSel and wFitDataGroup		Variable /G gNData 	= SelectedDataList(0,1,"wFitData","root:SPECTRA:Fitting:DRS","Complex")				// *** GENERAL PEAK FITTING WAVES AND VARIABLES		MakeStringIfNeeded("gSubDataType","none")		String /G gFitType="DRS"				Variable /G gSubDataNumber, gPrevFitDataNum, gNFitPts		Variable /G gCenter=0, gUseMaskFlag = 0, gSameFitRangeFlag=1		Variable /G gCoefs4EachTraceFlag, gAutoSaveCoefFlag, gShowErrorsFlag, gUseErrorsFlag, gFitSD		Variable /G gMonitorCoef, gPrevCoef=0, gPresCoef				// Background polynomials - probably not needed. 		MakeVariableIfNeeded("gBGPoly",0)		NVAR gBGPoly 	= root:SPECTRA:Fitting:DRS:gBGPoly		Variable /G gDBGPoly 		= gBGPoly		Variable /G gPrevBGPoly 	= gBGPoly		MakeWaveIfNeeded("BGCoefs",gBGPoly)		MakeWaveIfNeeded("HoldBGCoefs",gBGPoly)		MakeWaveIfNeeded("Polynomial",0)				// Mask waves		MakeWaveIfNeeded("Mask",0)		MakeWaveIfNeeded("MaskEmpty",0)				// The types of n-parameter fitting functions		MakeVariableIfNeeded("gRxType1",1)		MakeVariableIfNeeded("gRxType2",1)		MakeVariableIfNeeded("gRsType1",1)		MakeVariableIfNeeded("gCdType1",1)		String /G gRxType1List="Debye;Something else"		String /G gRxType2List="Havriliak-Negami;Inertial Oscillator;"		String /G gRsType1List="Damped oscillator;Something else;"		String /G gCdType1List="Salt;Something else;"				MakeVariableIfNeeded("gNumRx1",0); NVAR gNumRx1 = root:SPECTRA:Fitting:DRS:gNumRx1		MakeVariableIfNeeded("gNumRx2",0); NVAR gNumRx2 = root:SPECTRA:Fitting:DRS:gNumRx2		MakeVariableIfNeeded("gNumRs1",0); NVAR gNumRs1 = root:SPECTRA:Fitting:DRS:gNumRs1		MakeVariableIfNeeded("gNumCd1",0); NVAR gNumCd1 = root:SPECTRA:Fitting:DRS:gNumCd1				// By separating the DISPLAYED and ACTUAL variables, I can remember previously used configurations. 		Variable /G gDRx1, gDRx2, gDRs1,gDCd1		Variable /G gPrevRx1, gPrevRx2, gPrevRs1,gPrevCd1		Variable /G gSelRx1=0, gSelRx2=0, gSelRs1=0, gSelCd1=0						// The full coefficients and legend		Variable NCoefs = CalculateNumDRSCoefs(gBGPoly,gNumRx1,gNumRx2,gNumRs1,gNumCd1)				MakeWaveIfNeeded("FitCoefs",NCoefs)		MakeWaveIfNeeded("FitCoefsHold",NCoefs)//		MakeTextWaveIfNeeded("FitCoefsLegend",NCoefs)		Make /O/T/N=(NCoefs) FitCoefsLegend		Make /O/D/N=(NCoefs,3) wFitCoefsSel		Make /O/T/N=(NCoefs,3) wFitCoefsList		SetDimLabel 1, 0, $"\\f01Legend", wFitCoefsList		SetDimLabel 1, 1, $"\\f01Values", wFitCoefsList		SetDimLabel 1, 2, $"\\f01Hold", wFitCoefsList						// These are needed for fitting COMPLEX waves		Make /O/D/N=1 AxisTemp, DataTemp, MaskTemp, FitTemp, ResidsTemp				// The coefficients for each type of contribution - HARD WIRED		Make /O/D/N=(3*gNumRx1) Rx1Coefs, Rx1HoldCoefs	// I'm not certain if these are needed. 		Make /O/D/N=(4*gNumRx2) Rx2Coefs, Rx2HoldCoefs		Make /O/D/N=(4*gNumRs1) Rs1Coefs, Rs1HoldCoefs		Make /O/D/N=(2*gNumCd1) Cd1Coefs, Cd1HoldCoefs		Make /O/D/N=2 Coefs2		Make /O/D/N=3 Coefs3		Make /O/D/N=4 Coefs4		Make /O/D/N=5 Coefs5						//		Variable /G gPeakStatisticType1, gPeakStatisticType2, gPeakStatistic1, gPeakStatistic2//		String /G gPeakStatisticTypeList = "Area;FWHM;l.h.s 0%;l.h.s 50%;l.h.s. 90%;r.h.s 0%;r.h.s 50%;r.h.s 90%;"		// This is problematic if it is called before the DRSFitPanel is created//		UpdateMultiPeakFitCoefficients(-1)			SetDataFolder $(OldDF)End// The numbers of parameters for each fitting function is HARD-WIRED at several points in the code!! Function CalculateNumDRSCoefs(PolyOrder,NumRx1,NumRx2,NumRs1,NumCd1)	Variable PolyOrder,NumRx1,NumRx2,NumRs1,NumCd1			Variable NCoefs = PolyOrder	// Background polynomial	NCoefs += 3 * NumRx1			// Type 1 relaxations	NCoefs += 5 * NumRx2			// Type 2 relaxations	NCoefs += 4 * NumRs1			// Type 1 resonances	NCoefs += 2 * NumCd1			// Type 1 conductivity		return NCoefsEnd// ***************************************************************************// **************** 			Save and Restore the position of cursors that set Fit Range// ***************************************************************************Function SaveCursorFitRange2(WindowName, FitFolder, DataNum)	String WindowName, FitFolder	Variable DataNum		WAVE wFitDataSel			= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataSel")	WAVE wFitDataGroup		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataGroup")	WAVE/T wFitDataList		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataList")		SVAR gSubDataType 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataType")	NVAR gSubDataNum 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataNumber")	SVAR gFitType 				= $(ParseFilePath(2,FitFolder,":",0,0) + "gFitType")		String FitResultsFolder 	= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,gFitType)		// First, save the x-values ...	Variable FitMinVal = min(GetCursorPositionOrValue(WindowName,"A",1),GetCursorPositionOrValue(WindowName,"B",1))	Variable FitMaxVal = max(GetCursorPositionOrValue(WindowName,"A",1),GetCursorPositionOrValue(WindowName,"B",1))		Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMinVal") = FitMinVal	Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMaxVal") = FitMaxVal		// ... then, save the x-points	Variable FitMinPt = min(GetCursorPositionOrValue(WindowName,"A",0),GetCursorPositionOrValue(WindowName,"B",0))	Variable FitMaxPt = max(GetCursorPositionOrValue(WindowName,"A",0),GetCursorPositionOrValue(WindowName,"B",0))		Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMinPt") = FitMinPt	Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMaxPt") = FitMaxPtEndFunction SetCursorFitRange2(WindowName, FitFolder, DataNum)	String WindowName, FitFolder	Variable DataNum		WAVE wFitDataSel			= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataSel")	WAVE wFitDataGroup		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataGroup")	WAVE/T wFitDataList		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataList")		SVAR gSubDataType 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataType")	NVAR gSubDataNum 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataNumber")	SVAR gFitType 				= $(ParseFilePath(2,FitFolder,":",0,0) + "gFitType")		String FitResultsFolder 		= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,gFitType)		String DataFolderName, DataAndFolderName, DataName, AxisAndFolderName		DataName 				= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data name")	DataFolderName 			= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data folder")	AxisAndFolderName		= ParseFilePath(2,DataFolderName,":",0,0) + AxisNameFromDataName(DataName)	WAVE Axis				= $(AxisAndFolderName)	GetAxis /Q/W=$WindowName bottom	MakeVariableIfNeeded(FitResultsFolder+":gFitMinVal",V_min)	MakeVariableIfNeeded(FitResultsFolder+":gFitMaxVal",V_max)	NVAR gFitMinVal = $(FitResultsFolder+":gFitMinVal")	NVAR gFitMaxVal = $(FitResultsFolder+":gFitMaxVal")	// AxisValueToPoint() can tolerate NANs better than BinarySearch()	Variable MinAxisPt	= AxisValueToPoint(Axis, gFitMinVal)	Variable MaxAxisPt	= AxisValueToPoint(Axis, gFitMaxVal)	if (MinAxisPt == MaxAxisPt)		MinAxisPt	= 0		MaxAxisPt	= numpnts(Axis) - 1	endif		Cursor /W=$WindowName A $DataName MinAxisPt	Cursor /W=$WindowName B $DataName MaxAxisPt		return 0End// ***************************************************************************// **************** 		Set the left axis // ***************************************************************************Function ComplexDataFitScaleCheck(CB_Struct) : CheckBoxControl 	STRUCT WMCheckboxAction &CB_Struct 		if (CB_Struct.eventCode == 2)	// Mouse up after pressing		if (CB_Struct.checked)			RescaleComplexDataFit(CB_Struct.win)		endif	else		return 0	endifEndFunction ComplexDataFitScaleButton(B_Struct) : ButtonControl	STRUCT WMButtonAction &B_Struct		if (B_Struct.eventCode == 2)	// Mouse up after pressing		RescaleComplexDataFit(B_Struct.win)	else		return 0		endifEndFunction RescaleComplexDataFit(PlotName)	String PlotName		NVAR gRealImag = root:SPECTRA:Plotting:DRSFitPanel:gRealImag	String DRSTrace, DRSSuffix, DRSTraceList = Tracenamelist(PlotName,";",1)	Variable i, NTraces, LeftMin=1e99, LeftMax=-1e99, AxisMinP, AxisMaxP		// Remove residuals	NTraces 	= ItemsInList(DRSTraceList)	for (i=0;i<NTraces;)		DRSTrace = StringFromList(i,DRSTraceList)		DRSSuffix 	= ReturnLastSuffix(DRSTrace,"_")		if (cmpstr(DRSSuffix,"res") == 0)			DRSTraceList 	= RemoveListItem(i,DRSTraceList)		else			i+=1		endif	endfor	NTraces 	= ItemsInList(DRSTraceList)		// Find the x-axis values of the cursors	Variable FitMinVal = min(GetCursorPositionOrValue(PlotName,"A",1),GetCursorPositionOrValue(PlotName,"B",1))	Variable FitMaxVal = max(GetCursorPositionOrValue(PlotName,"A",1),GetCursorPositionOrValue(PlotName,"B",1))		// Find the display range	GetAxis /W=$PlotName/Q bottom		// Choose the smallest range	FitMinVal 	= (V_min > FitMinVal) ? V_min : FitMinVal	FitMaxVal 	= (V_max < FitMaxVal) ? V_max : FitMaxVal		for (i=0;i<NTraces;i+=1)			DRSTrace = StringFromList(i,DRSTraceList)		WAVE DRS 	= TraceNameToWaveRef(PlotName,DRSTrace)				AxisMinP = AxisValueToPoint( XWaveRefFromTrace(PlotName, DRSTrace), FitMinVal)		AxisMaxP = AxisValueToPoint( XWaveRefFromTrace(PlotName, DRSTrace), FitMaxVal)				// Determine the point ranges for each displayed wave		WaveStats /Q/M=1/C=(gRealImag)/R=[AxisMinP,AxisMaxP] DRS				LeftMin 	= (V_min < LeftMin) ? V_min : LeftMin		LeftMax 	= (V_max > LeftMax) ? V_max : LeftMax	endfor		SetAxis /W=$PlotName left, LeftMin, LeftMaxEnd// ***************************************************************************// **************** 			PLOTTING// ***************************************************************************Function PlotDataInFitPanel2(WindowName,FitFolder,FitPanel)	String WindowName, FitFolder, FitPanel		WAVE wFitDataSel			= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataSel")	WAVE wFitDataGroup		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataGroup")	WAVE/T wFitDataList		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataList")		SVAR gSubDataType 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataType")	NVAR gSubDataNum 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataNumber")	SVAR gFitType 				= $(ParseFilePath(2,FitFolder,":",0,0) + "gFitType")		String AssocWavesFolder = ReturnFitFolderName(gFitType), FirstTraceName		Variable PlotAllFlag = 0, AppendFlag = 0, ErrorsFlag = 1, RightFlag = 0, PlotvsTime=0, AssocWavesFlag = 1, PlotFlag		GetAxis /Q/W=$WindowName left	Variable LeftMin =V_min, LeftMax = V_max 		String OldDF = getDataFolder(1)	SetDataFolder root:SPECTRA:Fitting		FirstTraceName = PlotDataInWindow(WindowName, wFitDataList, wFitDataSel, wFitDataGroup, "blue", PlotAllFlag, AppendFlag, RightFlag, ErrorsFlag,PlotvsTime,AssocWavesFlag,AssocWavesFolder,"",0)	SetDataFolder $(OldDF)		RemoveFromGraph /W=$WindowName /Z nullWave		NVAR gAutoScale 	= $("root:SPECTRA:Plotting:"+FitPanel+":gAutoScale")		NVAR gPlotXMin		= $("root:SPECTRA:Plotting:"+FitPanel+":gPlotXMin")	NVAR gPlotXMax 	= $("root:SPECTRA:Plotting:"+FitPanel+":gPlotXMax")			WAVE axis = WaveRefIndexed(WindowName,0,2)		if ((BinarySearch(axis,gPlotXMin) > 0) || (BinarySearch(axis,gPlotXMax) > 0)) 			SetAxis bottom, gPlotXMin, gPlotXMax		else			SetAxis /A		endif			if (gAutoScale)		SetAxis /A=2 left	else		SetAxis left, LeftMin, LeftMax	endif		NVAR gLogX 			= $("root:SPECTRA:Plotting:"+FitPanel+":gLogX")	ModifyGraph log(bottom)=gLogX		NVAR gRealImag 	= $("root:SPECTRA:Plotting:"+FitPanel+":gRealImag")	ModifyGraph cmplxMode=gRealImagEndFunction SetCoefToTrack2(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		NVAR gMonitorCoef 	= root:SPECTRA:Fitting:DRS:gMonitorCoef	NVAR gPrevCoef		= root:SPECTRA:Fitting:DRS:gPrevCoef	WAVE FitCoefs		= root:SPECTRA:Fitting:DRS:FitCoefs		if (gMonitorCoef == -1)		SetVariable MonitorCoef,title="Track chi-squared "		gPrevCoef = 1	else		SetVariable MonitorCoef,title="Track coefficient # "		gPrevCoef = FitCoefs[gMonitorCoef]	endifEnd// ********************************************************// ******     TRIAL and FIT the data// ********************************************************Function DRSFitTrialButton(B_Struct)	STRUCT WMButtonAction &B_Struct		String ctrlName 			= B_Struct.ctrlName	String PlotName 			= B_Struct.win	Variable eventCode 		= B_Struct.eventCode	Variable eventMod 		= B_Struct.eventMod		if (eventCode != 2)		return 0	// Mouse up after pressing	endif		Variable FitFlag = (cmpstr(ctrlName,"DRSFitButton") == 0) ? 1 : 0		TrialOrFitDRS(FitFlag)EndFunction TrialOrFitDRS(FitFlag)	Variable FitFlag		WAVE wFitDataSel			= root:SPECTRA:Fitting:DRS:wFitDataSel	WAVE /T wFitDataList		= root:SPECTRA:Fitting:DRS:wFitDataList	SVAR gSubDataType 		= root:SPECTRA:Fitting:DRS:gSubDataType	NVAR gSubDataNum 		= root:SPECTRA:Fitting:DRS:gSubDataNumber		NVAR gMonitorCoef 			= root:SPECTRA:Fitting:DRS:gMonitorCoef	NVAR gPrevCoef				= root:SPECTRA:Fitting:DRS:gPrevCoef	NVAR gPresCoef	 			= root:SPECTRA:Fitting:DRS:gPresCoef		NVAR gCenter				= root:SPECTRA:Fitting:DRS:gCenter	NVAR gBGPoly				= root:SPECTRA:Fitting:DRS:gBGPoly		NVAR gNFitPts 				= root:SPECTRA:Fitting:DRS:gNFitPts	NVAR gUseMaskFlag			= root:SPECTRA:Fitting:DRS:gUseMaskFlag	NVAR gAutoSaveCoefFlag	= root:SPECTRA:Fitting:DRS:gAutoSaveCoefFlag	NVAR gFitSD 					= root:SPECTRA:Fitting:DRS:gFitSD		NVAR gAutoRescale			= root:SPECTRA:Plotting:DRSFitPanel:gAutoRescale		WAVE FitCoefs 				= root:SPECTRA:Fitting:DRS:FitCoefs	WAVE FitCoefsHold 			= root:SPECTRA:Fitting:DRS:FitCoefsHold		// These Temp waves are the real-imaginary versions on a doubled and masked Axis. 	WAVE AxisTemp 			= root:SPECTRA:Fitting:DRS:AxisTemp	WAVE DataTemp 			= root:SPECTRA:Fitting:DRS:DataTemp	WAVE FitTemp 				= root:SPECTRA:Fitting:DRS:FitTemp	WAVE ResidsTemp 			= root:SPECTRA:Fitting:DRS:ResidsTemp		// This Temp wave is the Mask + Cursor range on the regular Axis 	WAVE MaskTemp 			= root:SPECTRA:Fitting:DRS:MaskTemp		Variable DataNum	String DataFolderName, DataName, DataAndFolderName, AxisAndFolderName	String FitResultsFolder, FitName, FitAndFolderName, ResidsName, ResidsAndFolderName		SetDataFolder $("root:SPECTRA:Fitting:DRS")		DataNum = FindSelectedData(wFitDataSel)		if (DataNum == -1)			return-1		endif				// Pointers to the data and axis in the data folder		DataName 				= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data name")		DataFolderName 			= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data folder")		DataAndFolderName		= ParseFilePath(2,DataFolderName,":",0,0) + DataName		AxisAndFolderName		= ParseFilePath(2,DataFolderName,":",0,0) + AxisNameFromDataName(DataName)		WAVE Data 				= $(DataAndFolderName)		WAVE Axis				= $(AxisAndFolderName)		Variable NPts = DimSize(Data,0)				// Pointers to the fit and residuals in the fit results folder (the subsdiary folder in LoadN)		FitResultsFolder 			= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"DRS")		FitName 					= FitNameFromDataName(DataName)		FitAndFolderName 		= ParseFilePath(2,FitResultsFolder,":",0,0) + FitName		ResidsName 				= ResidsNameFromDataName(DataName)		ResidsAndFolderName 	= ParseFilePath(2,FitResultsFolder,":",0,0) + ResidsName				// Make a back up of the current coefficients		Duplicate /O/D FitCoefs, $("root:SPECTRA:Fitting:DRS:FitCoefsSave")				// Record the fit range details 		gCenter = mean(Axis)		SaveCursorFitRange2("DRSFitPanel","root:SPECTRA:Fitting:DRS",DataNum)		Variable MinCsr = min(GetCursorPositionOrValue("DRSFitPanel","A",0),GetCursorPositionOrValue("DRSFitPanel","B",0))		Variable MaxCsr = max(GetCursorPositionOrValue("DRSFitPanel","A",0),GetCursorPositionOrValue("DRSFitPanel","B",0))				Variable MinFit = min(GetCursorPositionOrValue("DRSFitPanel","A",1),GetCursorPositionOrValue("DRSFitPanel","B",1))		Variable MaxFit = max(GetCursorPositionOrValue("DRSFitPanel","A",1),GetCursorPositionOrValue("DRSFitPanel","B",1))				//	Remove fit components		String OldDF2 = getDataFolder(1)	// <<<--- ??? do I have to change data folders? 		SetDataFolder $(FitResultsFolder)			String DoNotDeleteList = FitName + ";" + ResidsName + ";"			KillSampleWavesNotInList(SampleNameFromDataName(DataName),DoNotDeleteList)		SetDataFolder $(OldDF2)				// Make the hold string		String HoldString=MakeHoldString(FitCoefsHold)		Print ""		if ((gUseMaskFlag==0) || (FitFlag==0))			Print " Dielectric relaxation fit to",DataName,"from",MinFit,"to",MaxFit			WAVE MaskWave 	= root:SPECTRA:Fitting:DRS:MaskEmpty			Redimension /N=(NPts) MaskWave			MaskWave = 0		else			Print " Dielectric relaxation fit to",DataName,"from",MinFit,"to",MaxFit,"using a Mask"			WAVE MaskWave 	= root:SPECTRA:Fitting:DRS:Mask		endif			// Convert from a complex data wave to a masked, unfolded real-imaginary data wave and record actual number of fit points		gNFitPts 	= ComplexToRealImaginary(Axis,Data,MaskWave,AxisTemp,DataTemp,MaskTemp,MinCsr,MaxCsr)				if (FitFlag == 1)			Variable V_FitOptions=4, V_FitQuitReason, V_FitError						// Fit to the real-imaginary wave but do not generate fit destination wave(s)			if (gFitSD==1)				FuncFit /W=0/N/H=HoldString DielectricFitRI FitCoefs DataTemp /X=AxisTemp			else				FuncFit /Q/W=0/N/H=HoldString DielectricFitRI FitCoefs DataTemp /X=AxisTemp			endif						Variable rchisq=V_chisq/(V_npnts-V_nterms+V_nheld)			print FittingReport(V_FitError,V_FitQuitReason,V_chisq,rchisq,0)			SaveChiSquaredValues(DataNum,V_chisq,rchisq,FitResultsFolder)						UpdateDRSCoeffs(-1)			SaveDRSCoeffs(DataNum,gAutoSaveCoefFlag,FitFlag,0,0)		else			// Change the chi-squared values to NaNs since no fit was performed. 			SaveChiSquaredValues(DataNum,NAN,NAN,FitResultsFolder)			SaveDRSCoeffs(DataNum,0,0,0,0)		endif				// Calculate the Fit and Residuals real-imaginary waves		Redimension /N=(2*gNFitPts) FitTemp, ResidsTemp		DielectricFitRI(FitCoefs,FitTemp,AxisTemp)		ResidsTemp = DataTemp - FitTemp					// Convert back from the real-imaginary data wave to a complex data wave		DuplicateWaveIfNeeded(DataAndFolderName,FitAndFolderName)		WAVE Fit = $(FitAndFolderName)		RealImaginaryToComplex(Fit,FitTemp,MaskTemp,MinCsr,MaxCsr)				DuplicateWaveIfNeeded(DataAndFolderName,ResidsAndFolderName)		WAVE Residuals = $(ResidsAndFolderName)		RealImaginaryToComplex(Residuals,ResidsTemp,MaskTemp,MinCsr,MaxCsr)				// Make components for both Fits and Trials		DRSComponents(DataName,DataFolderName,FitResultsFolder,MinCsr,MaxCsr,1,FitCoefs,Axis)		// ---------------------------------------------------------------------------------------------------------------------					// This should take care of ALL the plotting requirements		UpdateDRSHighlightControls(1)		PlotDataInFitPanel2("DRSFitPanel","root:SPECTRA:Fitting:DRS","DRSFitPanel")		SetCursorFitRange2("DRSFitPanel", "root:SPECTRA:Fitting:DRS", DataNum)		if (gAutoRescale)			DoUpdate 			RescaleComplexDataFit("DRSFitPanel")		endif			// Record the change of a selected coefficient		gPrevCoef = gPresCoef		if (gMonitorCoef == -1)			gPresCoef 	= rchisq		else			gPresCoef 	= FitCoefs[gMonitorCoef]		endif				SetDataFolder root:End// There might be some issues with point number if we are not using a Mask// I think we have to ensure a proper Mask wave before this procedure. Function ComplexToRealImaginary(Axis,Data,Mask,AxisTemp,DataTemp,MaskTemp,MinCsr,MaxCsr)	Wave Axis,Mask,AxisTemp,DataTemp,MaskTemp	Wave /C Data	Variable MinCsr,MaxCsr 	 	Variable i, n=0, nFitPts, NPts=DimSize(Data,0), MaskPts=DimSize(Mask,0) 	 	// Make sure the temporary Mask is the same length as the data.  	Redimension /N=(NPts) MaskTemp 	 	// Count the number of points to be fitted 	MaskTemp[] = (p>=MinCsr) && (p<=MaxCsr) ? Mask[p] : 1 	nFitPts = NPts - sum(MaskTemp) 	 	Redimension /N=(2*nFitPts) AxisTemp, DataTemp 	 	for (i=0;i<NPts;i+=1)		if (MaskTemp[i] != 1)			AxisTemp[n] 				= Axis[i]			DataTemp[n] 			= real(Data[i])			AxisTemp[nFitPts+n] 	= Axis[i]			DataTemp[nFitPts+n] 	= imag(Data[i])			n += 1		endif 	endfor 	 	return nFitPts End  Function RealImaginaryToComplex(DataC,DataRI,MaskC,MinCsr,MaxCsr)	Wave MaskC, DataRI	Wave /C DataC	Variable MinCsr,MaxCsr 	 	Variable i, n=0, NPtsRI=DimSize(DataRI,0), NPtsC=DimSize(DataC,0) 	  	for (i=0;i<NPtsC;i+=1)		if (MaskC[i] != 1)			DataC[i] 	= cmplx(DataRI[n],DataRI[NPtsRI/2+n])			n += 1		else			DataC[i] 	= NaN		endif 	endfor 	 	return 0 End// ********************************************************// ******     A Fit Function to COMPLEX data// ********************************************************// Fits in a real-imaginary waveFunction DielectricFitRI(w, ywv, xwv) : FitFunc	Wave w, ywv, xwv		WAVE BGCoefs		= root:SPECTRA:Fitting:DRS:BGCoefs	WAVE Coefs2		= root:SPECTRA:Fitting:DRS:Coefs2	WAVE Coefs3		= root:SPECTRA:Fitting:DRS:Coefs3	WAVE Coefs4		= root:SPECTRA:Fitting:DRS:Coefs4	WAVE Coefs5		= root:SPECTRA:Fitting:DRS:Coefs5		NVAR gNFitPts 		= root:SPECTRA:Fitting:DRS:gNFitPts		NVAR gCenter		= root:SPECTRA:Fitting:DRS:gCenter	NVAR gBGPoly		= root:SPECTRA:Fitting:DRS:gBGPoly		NVAR gNumRx1		= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2		= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1		= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1		= root:SPECTRA:Fitting:DRS:gNumCd1		NVAR gRxType1		= root:SPECTRA:Fitting:DRS:gRxType1	NVAR gRxType2		= root:SPECTRA:Fitting:DRS:gRxType2	NVAR gRsType1		= root:SPECTRA:Fitting:DRS:gRsType1	NVAR gCdType1 	= root:SPECTRA:Fitting:DRS:gCdType1		Variable i, index		// Make a temporary complex wave for the full fit calculation. 	Make /D/O/C/N=(gNFitPts) dwvC=0		// Disable adding a background for the moment	if (DimSize(BGCoefs,0)>0)		BGCoefs[0,gBGPoly-1]=w[p]//		dwvC 	= poly(BGCoefs,(xwv-gCenter))	endif		index = gBGPoly	if (gNumRx1>0)		for (i=0;i<gNumRx1;i+=1)							// This works for any 3-parameter peak or component//			Coefs3[] = w[index + 3*i + p]				// Enforce positivity			Coefs3[] = abs(w[index + 3*i + p])			w[index + 3*i] = Coefs3[0]			w[index + 3*i+1] = Coefs3[1]			w[index + 3*i+2] = Coefs3[2]			if (gRxType1==1)								// Debye				dwvC+=Debye(Coefs3,xwv)			elseif(gRxType1==2)							// Something else			endif		endfor		endif		index += 3*gNumRx1	if (gNumRx2>0)		for (i=0;i<gNumRx2;i+=1)						// This works for any 5-parameter peak or component			Coefs5[] = w[index + 5*i + p]			if (gRxType2==1)							// Havriliak-Negami				dwvC+=HavriliakNegami(Coefs5,xwv)			elseif (gRxType2==2)						// Inertial Oscillator				dwvC+=InertialOscillator(Coefs5,xwv)			endif		endfor	endif		index += 5*gNumRx2	if (gNumRs1>0)		for (i=0;i<gNumRs1;i+=1)						// This works for any 4-parameter peak or component			Coefs4[] = w[index + 4*i + p]			if (gRsType1==1)							// Damped Oscillator				dwvC+=DampedOscillator(Coefs4,xwv)			elseif (gRsType1==2)						// Something else ...			endif		endfor		endif		index += 4*gNumRs1	if (gNumCd1>0)		for (i=0;i<gNumCd1;i+=1)						// This works for any 2-parameter peak or component			Coefs2[] = w[index + 2*i + p]			if (gCdType1==1)							// Salt conductivity				dwvC+=Salt(Coefs2,xwv)			elseif (gCdType1==2)						// Something else ...			endif		endfor	endif		// Read into the real-imaginary wave 	ywv[0,gNFitPts-1] 	= real(dwvC[p]) 	ywv[gNFitPts,] 		= imag(dwvC[p-gNFitPts])	End			// Example in case we need to enforce positivity//			Coefs4[] = abs(w[index + 4*i + p])//			w[index + 4*i] = Coefs4[0]//			w[index + 4*i+2] = Coefs4[2]//			w[index + 4*i+3] = Coefs4[3]// ********************************************************// ******     Dielectric Spectoscopy Fit Functions// ********************************************************// This is coded so that e0 INCLUDES the infinite dielectric constant so we can just read that from the fit. // The amplitude Si = e0i - e00Function/C Debye(c,f)	// f is the frequency	Wave c				// c[0] = tD		The Debye relaxation time (in PICOSECONDS)	Variable f				// c[1] = e0		The static dielectic constant							// c[2] = e00	The infinite dielectric constant		Variable tD = c[0]/1000		 // The relaxation time in picoseconds	Variable w = 2*pi*f 				// w is the angular frequency in GHz		Variable /C Denom = cmplx(1,-w*tD)		Variable /C e = c[2] + (c[1]-c[2])/Denom		return eEnd// Coffey Adv Chem Phys (2003) Eqn 139Function/C InertialOscillator(c,f)	// f is the frequency	Wave c							// c[0] = tR		The relaxation time	Variable f							// c[1] = e0		The static dielectic constant										// c[2] = e00	DISABLE The infinite dielectric constant										// c[2] = alpha										// c[3] = gamma-prime											// c[4] = sigma				Variable tR 	= c[0]/1000 	// convert time in ps to ns	Variable w 	= 2*pi*f 			// w is the angular frequency, in GHz		Variable/C BB 	= (2/c[3]^2) * cmplx(0,(w*tR)) ^ (2*(c[2]-1))	Variable/C tmp	= cmplx(0,w*tR) ^ c[4]	Variable/C hgf1 	= 1 + BB * (1+tmp)	Variable/C MM 	= hyperG1F1(1,hgf1,BB)		Variable/C PF 	= -tmp/(1-tmp)		Variable/C e 		= c[1]* (1-PF)*MM		return eEndFunction/C BB(c,f)	Wave c	Variable f		Variable tR 	= c[0]/1000 	// convert time in ps to ns	Variable w 	= 2*pi*f 			// w is the angular frequency, in GHz			Variable /C BB 	= (2/c[3]^2) * cmplx(0,(w*tR)) ^ (2*(c[2]-1))	Variable /C tmp	= cmplx(0,w*tR) ^ c[4]	Variable /C hG1F1_1 	= 1 + BB * (1+tmp)	Variable /C hG1F1_2 	= BB		Variable /C MM 	= hyperG1F1(1,hG1F1_1,BB)		return MMEnd// e.g., Elton "excess high f Debye"Function/C HavriliakNegami(c,f)	// f is the frequency	Wave c							// c[0] = tR		The relaxation time	Variable f							// c[1] = e0		The static dielectic constant										// c[2] = e00	The infinite dielectric constant										// c[3] = a		The alpha exponent	0 <= a < 1. Should be ZERO for Debye 										// c[4] = b		The beta explonent	0 < b <= 1. Should be UNITY for Debye		Variable tR 	= c[0]/1000 	// convert time in ps to ns	Variable w 	= 2*pi*f 			// w is the angular frequency, in GHz	Variable exA 	= 1-c[2]	Variable exB 	= -1*c[3]		Variable /C HN1 	= cmplx(c[1] - c[2],0)				// The numerator	Variable /C HN2 	= cmplx(0,-w*tR)^c[3]	Variable /C HN3 	= (1 + HN2)^c[4]		Variable /C e = c[2] + HN1/HN3		return eEnd// e.g., Tang et al., Sci Rep 5, 13645 (2015)Function/C DampedOscillator(c,f)	// f is the frequency	Wave c							// c[0] = wR		The resonance frequency	Variable f							// c[1] = e0		The static dielectic constant										// c[2] = e00	The infinite dielectric constant										// c[3] = a		The dampling coefficient		Variable w 		= 2*pi*f			// w is the angular frequency, in GHz	Variable wR 		= 2*pi*c[0]		Variable /C Num = cmplx((c[1] - c[2]) * wR^2,0)	Variable /C Den	= cmplx((wR^2-w^2),(-2*c[3]*w)) 		Variable /C e = c[2] + Num/Den	//	Variable /C d = Num; return Den		return eEndFunction/C Salt(c,f)			// f is the frequency	Wave c					// c[0] = e0		The static dielectic constant The permittivity of free space cPermittivity 	= 8.854187e-12 	// F/m	Variable f					// c[1] = K		The permittivity		Variable w 	= 2*pi*f 	// w is the angular frequency	Variable s 	= 1e3 * c[1]/(w*c[0])		Variable /C e = cmplx(0,s)		return eEnd// e.g., Buchner 99// 4 coefficients - should really be the Cole-Davidson//Function/C HavriliakNegami(c,f)	// f is the frequency//	Wave c							// c[0] = tR		The relaxation time//	Variable f							// c[1] = S		The amplitude//										// c[2] = a		The alpha exponent	0 <= a < 1. Should be ZERO for Debye //										// c[3] = b		The beta explonent	0 < b <= 1. Should be UNITY for Debye//	//	Variable tR 	= c[0]/1000 	// convert time in ps to ns//	Variable w 	= 2*pi*f 			// w is the angular frequency, in GHz or 10^9 radians/s//	Variable exA 	= 1-c[2]//	Variable exB 	= -1*c[3]//	//	// This has a sign difference relative to Buchner 99//	Variable /C HN1 	= cmplx(0,-w*tR)^c[2]//	Variable /C HN2 	= (1 + HN1)^c[3]//	//	Variable /C e = c[1] /HN2//	////	Variable /C e = c[1] * (1 - cmplx(0,wR)^exA)^exB//	//	return e//End// ********************************************************// ******     Calculates any number of peaks and steps to fit to the data// ********************************************************Function DRSComponents(DataName,DataFolderName,FitFolderName,MinCsr,MaxCsr,TruncFlag,FitCoefs,Axis)	String DataName,DataFolderName,FitFolderName	Variable MinCsr,MaxCsr,TruncFlag	Wave FitCoefs, Axis		WAVE BGCoefs		= root:SPECTRA:Fitting:DRS:BGCoefs	WAVE Coefs2		= root:SPECTRA:Fitting:DRS:Coefs2	WAVE Coefs3		= root:SPECTRA:Fitting:DRS:Coefs3	WAVE Coefs4		= root:SPECTRA:Fitting:DRS:Coefs4	WAVE Coefs5		= root:SPECTRA:Fitting:DRS:Coefs5		NVAR gCenter		= root:SPECTRA:Fitting:DRS:gCenter	NVAR gBGPoly		= root:SPECTRA:Fitting:DRS:gBGPoly		NVAR gNumRx1		= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2		= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1		= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1		= root:SPECTRA:Fitting:DRS:gNumCd1		NVAR gRxType1		= root:SPECTRA:Fitting:DRS:gRxType1	NVAR gRxType2		= root:SPECTRA:Fitting:DRS:gRxType2	NVAR gRsType1		= root:SPECTRA:Fitting:DRS:gRsType1	NVAR gCdType1 	= root:SPECTRA:Fitting:DRS:gCdType1	Variable i, index, Mix	String DataAndFolderName, BGName, PeakName		DataAndFolderName 		= DataFolderName + ":" + DataName		String OldDF = getDataFolder(1)	SetDataFolder $(FitFolderName)				if (0)			// Create the background polynomial			BGName = AnyNameFromDataName(DataName,"bg")			DuplicateWaveIfNeeded(DataAndFolderName,BGName)			WAVE BG = $BGName			BGCoefs[0,gBGPoly-1]=FitCoefs[p]			BG[] = poly(BGCoefs,Axis-gCenter)			if (TruncFlag == 1)				BG[0,MinCsr-1]=NAN				BG[MaxCsr+1,]=NAN			endif		endif				index = gBGPoly		if (gNumRx1>0)			for (i=0;i<gNumRx1;i+=1)				Coefs3[] = FitCoefs[index + 3*i + p]								PeakName = AnyNameFromDataName(DataName,"rx1n"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE /C Peak = $PeakName				if (gRxType1==1)					Peak = Debye(Coefs3,Axis)				elseif(gRxType1==2)				endif				TruncateDRSComponent(Peak,MinCsr,MaxCsr,TruncFlag)			endfor		endif				index += 3*gNumRx1		if (gNumRx2>0)			for (i=0;i<gNumRx2;i+=1)				Coefs5[] = FitCoefs[index + 5*i + p]				PeakName = AnyNameFromDataName(DataName,"rx2n"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE /C Peak = $PeakName				if (gRxType2==1)					Peak =HavriliakNegami(Coefs5,Axis)				elseif (gRxType2==2)					Peak =InertialOscillator(Coefs5,Axis)				endif				TruncateDRSComponent(Peak,MinCsr,MaxCsr,TruncFlag)			endfor		endif				index += 5*gNumRx2		if (gNumRs1>0)			for (i=0;i<gNumRs1;i+=1)				Coefs4[] = FitCoefs[index + 4*i + p]				PeakName = AnyNameFromDataName(DataName,"rs1n"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE /C Peak = $PeakName				if (gRsType1==1)					Peak= DampedOscillator(Coefs4,Axis)				elseif (gRsType1==2)				endif				TruncateDRSComponent(Peak,MinCsr,MaxCsr,TruncFlag)			endfor		endif				index += 4*gNumRs1		if (gNumCd1>0)			for (i=0;i<gNumCd1;i+=1)				Coefs2[] = FitCoefs[index + 2*i + p]				PeakName = AnyNameFromDataName(DataName,"cd1n"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE /C Peak = $PeakName				if (gCdType1==1)					Peak =Salt(Coefs2,Axis)				elseif (gCdType1==2)				endif				TruncateDRSComponent(Peak,MinCsr,MaxCsr,TruncFlag)			endfor		endif	SetDataFolder $(OldDF)EndFunction TruncateDRSComponent(Cmpnt,MinCsr,MaxCsr,TruncFlag)	Wave /C Cmpnt	Variable MinCsr,MaxCsr,TruncFlag		Variable NPts=DimSize(Cmpnt,0)	if (TruncFlag)		if (MinCsr>0)			Cmpnt[0,MinCsr-1]=cmplx(NaN,NaN)		endif		if (MaxCsr<NPts)			Cmpnt[MaxCsr+1,]=cmplx(NaN,NaN)		endif	endifEnd// ***************************************************************************// **************** 			DATA & FIT SAVING AND LOADING// ***************************************************************************Function DRSRecordButton(B_Struct)	STRUCT WMButtonAction &B_Struct		String ctrlName 			= B_Struct.ctrlName	String PlotName 			= B_Struct.win	Variable eventCode 		= B_Struct.eventCode	Variable eventMod 		= B_Struct.eventMod		if (eventCode != 2)		return 0	// Mouse up after pressing	endif		RecordDataAndFit2("root:SPECTRA:Fitting:DRS",ctrlName)EndFunction RecordDataAndFit2(FitFolder,ctrlName)	String FitFolder, ctrlName		WAVE wFitDataSel			= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataSel")	WAVE wFitDataGroup		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataGroup")	WAVE/T wFitDataList		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataList")	SVAR gSubDataType 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataType")	NVAR gSubDataNum 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataNumber")	SVAR gFitType 				= $(ParseFilePath(2,FitFolder,":",0,0) + "gFitType")		Variable DataNum = FindSelectedData(wFitDataSel)	if (DataNum == -1)		return-1	endif		String DataName, AxisName, SampleName, DataFolderName, DataAndFolderName, AxisAndFolderName	String FitResultsFolder, FitName, FitAndFolderName, ResidsName, ResidsAndFolderName	String DataList, AssocList, SaveList		// Pointers to the data and axis in the data folder	DataName 			= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data name")	DataFolderName 		= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data folder")	DataAndFolderName = ParseFilePath(2,DataFolderName,":",0,0) + DataName	AxisName 			= AxisNameFromDataName(DataName)	AxisAndFolderName	= ParseFilePath(2,DataFolderName,":",0,0) + AxisName	SampleName 			= SampleNameFromDataName(DataName)		// Pointers to the fit and residuals in the fit results folder. 	FitResultsFolder 		= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,gFitType)	FitName 				= FitNameFromDataName(DataName)	FitAndFolderName 	= ParseFilePath(2,FitResultsFolder,":",0,0) + FitName	ResidsName 			= ResidsNameFromDataName(DataName)	ResidsAndFolderName = ParseFilePath(2,FitResultsFolder,":",0,0) + ResidsName		if (WaveExists($(FitAndFolderName)) == 1)		// First list the axis and data. 		DataList 	= AxisAndFolderName+";"+ DataAndFolderName+";"			// Then list the associated fit waves		AssocList		= FitName+";"+ ResidsName+";"		AssocList 	+= ExclusiveWaveList(ExclusiveWaveList(FolderWaveList(FitResultsFolder,SampleName+"*",";","",-1,0),"_fit",";"),"_res",";")		AssocList		= AddPrefixOrSuffixToListItems(AssocList,ParseFilePath(2,FitResultsFolder,":",0,0),"")			// Combine them		SaveList  	= DataList + AssocList				if (cmpstr(ctrlName,"SaveFitButton") == 0)			Save /B/C/O/P=home/T SaveList as SampleName+".itx"			Print " *** Saved the data and theory as", SampleName					// Save the fit coefficients, if a fitted wave exists			SaveDRSCoeffs(DataNum,1,0,0,0)					elseif (cmpstr(ctrlName,"KeepFitButton") == 0)			DuplicateAllWavesInDataFolder(FitResultsFolder,DataFolderName,SampleName+"*",0)			endif	endifEnd// ***************************************************************************// **************** 			COEFFICIENT SAVING AND LOADING// ***************************************************************************Function DRSCoeffButtons(B_Struct)	STRUCT WMButtonAction &B_Struct		String ctrlName 			= B_Struct.ctrlName	String PlotName 			= B_Struct.win	Variable eventCode 		= B_Struct.eventCode	Variable eventMod 		= B_Struct.eventMod		if (eventCode != 2)		return 0	// Mouse up after pressing	endif		WAVE wFitDataSel		= root:SPECTRA:Fitting:DRS:wFitDataSel	Variable DataNum = FindSelectedData(wFitDataSel)	if (DataNum == -1)		return-1	endif		// Perhaps could use Function references here	if (cmpstr("SaveCoefsButton",ctrlName)==0)		SaveDRSCoeffs(DataNum,1,0,0,1)	elseif (cmpstr("SaveNullCoefsButton",ctrlName)==0)		SaveDRSCoeffs(DataNum,1,0,1,0)	elseif (cmpstr("LoadLastFitButton",ctrlName)==0)		LoadDRSCoeffsFromFolder(DataNum,1)	elseif (cmpstr("LoadCoefsButton",ctrlName)==0)		if (LoadDRSCoeffsFromFile() !=  -1)			LoadDRSCoeffsFromFolder(DataNum,1)		endif	elseif (cmpstr("DRSKKButton",ctrlName)==0)		DRSKK()	endifEnd// 	This serves TWO functions. // 		1. SaveDRSCoefficientsToFolder// 				This is called every time different data set is selected, in order to keep track of the coefficients for each trace//				The coeff and sigma values are saved in different waves, as originally written. // 		1. SaveDRSCoefficientsToFile//				This saves the coefficient values, errors, and legends in a single binary fileFunction SaveDRSCoeffs(DataNum,SaveToDiskFlag,OverWriteFlag,NullFlag,TextFlag)	Variable DataNum,SaveToDiskFlag, OverWriteFlag, NullFlag,TextFlag	NVAR gFitMinVal 			= gFitMinVal	NVAR gFitMaxVal 			= gFitMaxVal	NVAR gChiSq 				= gChiSq	NVAR gRChiSq 				= gRChiSq		NVAR gBGPoly			= root:SPECTRA:Fitting:DRS:gBGPoly		NVAR gNumRx1		= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2		= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1		= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1		= root:SPECTRA:Fitting:DRS:gNumCd1		NVAR gRxType1		= root:SPECTRA:Fitting:DRS:gRxType1	NVAR gRxType2		= root:SPECTRA:Fitting:DRS:gRxType2	NVAR gRsType1		= root:SPECTRA:Fitting:DRS:gRsType1	NVAR gCdType1 	= root:SPECTRA:Fitting:DRS:gCdType1		WAVE /T wFitDataList		= root:SPECTRA:Fitting:DRS:wFitDataList	WAVE wFitDataSel			= root:SPECTRA:Fitting:DRS:wFitDataSel	WAVE wFitDataGroup		= root:SPECTRA:Fitting:DRS:wFitDataGroup	SVAR gSubDataType 		= root:SPECTRA:Fitting:DRS:gSubDataType	NVAR gSubDataNum 		= root:SPECTRA:Fitting:DRS:gSubDataNumber		WAVE FitCoefs 				= root:SPECTRA:Fitting:DRS:FitCoefs	WAVE FitCoefsHold 			= root:SPECTRA:Fitting:DRS:FitCoefsHold	WAVE /T FitCoefsLegend 	= root:SPECTRA:Fitting:DRS:FitCoefsLegend		Variable i, CoefStartIndex, CoefTotalLength, SigmaFlag=0, NumCoefs=numpnts(FitCoefs)	String FitFolderName, DataName, SampleName, SavedCoefsName, SampleCoefsName, SampleCoefsSigmasName, SampleCoefsHoldName, SampleCoefsLegendName, ValueStr	FitFolderName 	= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"DRS")	DataName 		= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data name")	SampleName 		= SampleNameFromDataName(DataName)		// Use specific names for the saved coefficient waves	SavedCoefsName 			= "fr_" +SampleName	// <---- a distinct name for the coefficients text wave in memory	SampleCoefsName 			= "fc_" +SampleName	SampleCoefsSigmasName 	= "fs_" + SampleName	SampleCoefsHoldName 			= "fh_" +SampleName	SampleCoefsLegendName  = "fL_" +SampleName		// ***** THIS MUST BE CHANGED IN THE CODE ****				CoefStartIndex = 14	// ************************************	CoefTotalLength = NumCoefs + CoefStartIndex	//	print "// ***** THIS MUST BE CHANGED IN THE CODE **** CoefStartIndex = ",14		if (SaveToDiskFlag == 1)		PathInfo FitCoefPath		if (V_flag==0)			NewPath /M="Please choose a location for saving fit coefficients" /O/Q FitCoefPath			if (V_flag==0)				return 0			endif		endif	endif		// Check that we have the sigma values	WAVE W_sigma=$("root:SPECTRA:Fitting:W_sigma")	if (waveexists(W_sigma)==1)		SigmaFlag=1	endif		// ------   Save the coefficients to the correct data folder in memory	// 			2019-08 Read in the HOLD preferences		Make /O/N=(CoefTotalLength) $(CheckFolderColon(FitFolderName) + SampleCoefsName) /WAVE=CoefficientValues	Make /O/N=(CoefTotalLength) $(CheckFolderColon(FitFolderName) + SampleCoefsSigmasName) /WAVE=CoefficientSigmas	Make /O/N=(CoefTotalLength) $(CheckFolderColon(FitFolderName) + SampleCoefsHoldName) /WAVE=CoefficientHold		CoefficientValues 	= NAN	CoefficientSigmas	= NAN	CoefficientHold		= NAN	if (NullFlag != 1)		// COEFFICIENT HEADER STUFF		// The length of the header		CoefficientValues[0] = CoefStartIndex				// Include the fit range in real units		CoefficientValues[1] 	= gFitMinVal		CoefficientValues[2] 	= gFitMaxVal				// Include the chi-squares		CoefficientValues[3] 	= gChiSq		CoefficientValues[4] 	= gRChiSq				// Include the numbers of each type of fit component		CoefficientValues[5] 	= gBGPoly		CoefficientValues[6] 	= gNumRx1		CoefficientValues[7] 	= gRxType1		CoefficientValues[8] 	= gNumRx2		CoefficientValues[9] 	= gRxType2		CoefficientValues[10] 	= gNumRs1		CoefficientValues[11] 	= gRsType1		CoefficientValues[12] 	= gNumCd1		CoefficientValues[13] 	= gCdType1			// Read in the actual fitted coefficients ... 		CoefficientValues[CoefStartIndex,CoefTotalLength-1] = FitCoefs[p-CoefStartIndex]		// ... and hold preferences		CoefficientHold[CoefStartIndex,CoefTotalLength-1] = FitCoefsHold[p-CoefStartIndex]//		CoefficientHold[CoefStartIndex,CoefTotalLength-1] = 1				WAVE W_sigma=$("root:SPECTRA:Fitting:W_sigma")		if (waveexists(W_sigma)==1)			CoefficientSigmas[CoefStartIndex,CoefTotalLength-1] = W_sigma[p-CoefStartIndex]		endif	endif	// ------   Save the coefficients to the correct data folder in memory		if (SaveToDiskFlag)		// All the coefficient information will be stored in a binary TEXT file. 		KillWaves /Z $(CheckFolderColon(FitFolderName) + SavedCoefsName)		Make /O/T/N=(CoefTotalLength,3) $(CheckFolderColon(FitFolderName) + SavedCoefsName) /WAVE=Coeffs2Export		Coeffs2Export 	= ""				// First write in the legend. 		Coeffs2Export[0,CoefStartIndex][0] 						= "_header_"		Coeffs2Export[CoefStartIndex,CoefTotalLength-1][0] 	= FitCoefsLegend[p-CoefStartIndex]				// Now write in the header values. 				// The length of the header		Coeffs2Export[0][1] = num2str(CoefStartIndex)				// Include the fit range in real units		sprintf ValueStr, "%.8f", gFitMinVal		Coeffs2Export[1][1] = ValueStr		sprintf ValueStr, "%.8f", gFitMaxVal		Coeffs2Export[2][1] = ValueStr				if (NullFlag != 1)			// Include the chi-squares			sprintf ValueStr, "%.8e", gChiSq			Coeffs2Export[3][1] = ValueStr			sprintf ValueStr, "%.8e", gRChiSq			Coeffs2Export[4][1] = ValueStr						// Include the numbers of each type of fit component			sprintf ValueStr, "%d", gBGPoly			Coeffs2Export[5][1] = ValueStr			sprintf ValueStr, "%d", gNumRx1			Coeffs2Export[6][1] = ValueStr			sprintf ValueStr, "%d", gRxType1			Coeffs2Export[7][1] = ValueStr			sprintf ValueStr, "%d", gNumRx2			Coeffs2Export[8][1] = ValueStr			sprintf ValueStr, "%d", gRxType2			Coeffs2Export[9][1] = ValueStr			sprintf ValueStr, "%d", gNumRs1			Coeffs2Export[10][1] = ValueStr			sprintf ValueStr, "%d", gRsType1			Coeffs2Export[11][1] = ValueStr			sprintf ValueStr, "%d", gNumCd1			Coeffs2Export[12][1] = ValueStr			sprintf ValueStr, "%d", gCdType1			Coeffs2Export[13][1] = ValueStr						// Now write in the values and errors			for (i=0;i<NumCoefs;i+=1)								sprintf ValueStr, "%.12e", FitCoefs[i]				Coeffs2Export[CoefStartIndex+i][1] = ValueStr								if (SigmaFlag)					sprintf ValueStr, "%.12e", W_sigma[i]					Coeffs2Export[CoefStartIndex+i][2] = ValueStr				endif			endfor		endif				// Save the coefficients and errors to disk if requested		if (SaveToDiskFlag == 1)			if (OverWriteFlag == 1)				Save /O/C/P=FitCoefPath Coeffs2Export as SampleCoefsName+".ibw"			else				Save /C/P=FitCoefPath Coeffs2Export as SampleCoefsName+".ibw"			endif						if (TextFlag)				Save /J/P=FitCoefPath FitCoefsLegend, FitCoefs, W_sigma as SampleCoefsName+".txt"			endif		endif				KillWaves /Z Coeffs2Export	endifEndFunction LoadDRSCoeffsFromFile()	WAVE /T wFitDataList		= root:SPECTRA:Fitting:DRS:wFitDataList	WAVE wFitDataSel			= root:SPECTRA:Fitting:DRS:wFitDataSel	WAVE wFitDataGroup		= root:SPECTRA:Fitting:DRS:wFitDataGroup	SVAR gSubDataType 		= root:SPECTRA:Fitting:DRS:gSubDataType	NVAR gSubDataNum 		= root:SPECTRA:Fitting:DRS:gSubDataNumber		String FitFolderName, DataName, SampleName,  SavedCoefsName, SampleCoefsName, SampleCoefsSigmasName	String message, CoefPath, CoefFile, PathAndFile, LoadedFileName	Variable FileRefNum, NChars, NCoeffLines		Variable i, DataNum = FindSelectedData(wFitDataSel)	if (DataNum == -1)		return-1	endif	FitFolderName 	= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"DRS")	DataName 		= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data name")	SampleName 		= SampleNameFromDataName(DataName)		SavedCoefsName 			= "fr_" +SampleName	SampleCoefsName 			= "fc_" +SampleName	SampleCoefsSigmasName 	= "fs_" + SampleName			String OldDF = getDataFolder(1)	SetDataFolder root:SPECTRA:Import		message="Please locate the saved fit coefficients"		Open /D/R/T="IGBW"/M=message FileRefNum		if (strlen(S_fileName) == 0)			return -1		endif		PathAndFile = S_fileName 				NChars = CountCharsInText(PathAndFile,":")		CoefFile = ReturnTextAfterNthChar(PathAndFile,":",1)		if (cmpstr(CoefFile[0,2],"fc_") != 0)			DoAlert 0, " Please locate a coefficients file begining with 'fc_'"			SetDataFolder $(OldDF)			return -1		endif				CoefPath = ReturnTextBeforeNthChar(PathAndFile,":",NChars)		NewPath /C/O/Q Path2Coefs, CoefPath				Loadwave /A/Q/D/H/O/P=Path2Coefs CoefFile		if (V_flag<1)			SetDataFolder $(OldDF)			return -1		else			LoadedFileName = StringFromList(0,S_waveNames)			WAVE /T SavedCoeffs 	= $LoadedFileName			NCoeffLines 	= DimSize(SavedCoeffs,0)						SetDataFolder $(FitFolderName)				Make /O/D/N=(NCoeffLines)$SampleCoefsName /WAVE=Coeffs				Make /O/D/N=(NCoeffLines)$SampleCoefsSigmasName /WAVE=Sigmas								for (i=0;i<NCoeffLines;i+=1)					Coeffs[] 	= str2num(SavedCoeffs[p][1])					Sigmas[] 	= str2num(SavedCoeffs[p][2])				endfor								KillWaves /Z SavedCoeffs		endif	SetDataFolder $(OldDF)EndFunction LoadDRSCoeffsFromFolder(DataNum, UseSavedFlag)	Variable DataNum, UseSavedFlag	WAVE /T wFitDataList		= root:SPECTRA:Fitting:DRS:wFitDataList	WAVE wFitDataSel			= root:SPECTRA:Fitting:DRS:wFitDataSel	WAVE wFitDataGroup		= root:SPECTRA:Fitting:DRS:wFitDataGroup	SVAR gSubDataType 		= root:SPECTRA:Fitting:DRS:gSubDataType	NVAR gSubDataNum 		= root:SPECTRA:Fitting:DRS:gSubDataNumber		String FitFolderName, DataName, SampleName, SampleCoefsName, SampleCoefsHoldName, SampleCoefsSigmasName		if (UseSavedFlag == 0)		// Ensures that the current coefficients are copied to the selected Data Folder		SaveDRSCoeffs(DataNum,0,0,0,0)	endif		// Load the coefficients saved in the folder for the selected data ...	FitFolderName 	= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"DRS")	DataName 		= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data name")	SampleName 		= SampleNameFromDataName(DataName)	SampleCoefsName 			= "fc_" +SampleName	SampleCoefsSigmasName 	= "fs_" + SampleName	SampleCoefsHoldName 		= "fh_" + SampleName	WAVE CoefficientValues 		= $(FitFolderName+":"+SampleCoefsName)	WAVE CoefficientSigmas 		= $(FitFolderName+":"+SampleCoefsSigmasName)	WAVE CoefficientHold 		= $(FitFolderName+":"+SampleCoefsHoldName)		// ... UNLESS they have not been created yet. In this case, save the displayed coefficients to this location first. 	if (WaveExists(CoefficientValues) == 0)		SaveDRSCoeffs(DataNum,0,0,0,0)				WAVE CoefficientValues 		= $(FitFolderName+":"+SampleCoefsName)		WAVE CoefficientSigmas 		= $(FitFolderName+":"+SampleCoefsSigmasName)		WAVE CoefficientHold 		= $(FitFolderName+":"+SampleCoefsHoldName)	endif	//	UpdateDRSCoeffsFromWave(CoefficientValues,CoefficientSigmas)	UpdateDRSCoeffsFromWave(CoefficientValues,CoefficientSigmas,CoefficientHold)		DRSCoefsToListBox()End		//Function UpdateDRSCoeffsFromWave(Coefs,CoefsSigmas)	Function UpdateDRSCoeffsFromWave(Coefs,CoefsSigmas,CoefsHold)	Wave Coefs, CoefsSigmas, CoefsHold		NVAR gBGPoly		= root:SPECTRA:Fitting:DRS:gBGPoly	NVAR gDBGPoly		= root:SPECTRA:Fitting:DRS:gDBGPoly	NVAR gPrevBGPoly	= root:SPECTRA:Fitting:DRS:gPrevBGPoly		NVAR gNumRx1	= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2	= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1	= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1	= root:SPECTRA:Fitting:DRS:gNumCd1		NVAR gRxType1	= root:SPECTRA:Fitting:DRS:gRxType1	NVAR gRxType2	= root:SPECTRA:Fitting:DRS:gRxType2	NVAR gRsType1	= root:SPECTRA:Fitting:DRS:gRsType1	NVAR gCdType1 	= root:SPECTRA:Fitting:DRS:gCdType1		NVAR gPrevRx1	= root:SPECTRA:Fitting:DRS:gPrevRx1	NVAR gPrevRx2	= root:SPECTRA:Fitting:DRS:gPrevRx2	NVAR gPrevRs1	= root:SPECTRA:Fitting:DRS:gPrevRs1	NVAR gPrevCd1	= root:SPECTRA:Fitting:DRS:gPrevCd1		NVAR gDRx1		= root:SPECTRA:Fitting:DRS:gDRx1	NVAR gDRx2		= root:SPECTRA:Fitting:DRS:gDRx2	NVAR gDRs1		= root:SPECTRA:Fitting:DRS:gDRs1	NVAR gDCd1		= root:SPECTRA:Fitting:DRS:gDCd1		WAVE FitCoefs 			= root:SPECTRA:Fitting:DRS:FitCoefs	WAVE FitCoefsHold 		= root:SPECTRA:Fitting:DRS:FitCoefsHold			Variable CoefStartIndex 	= Coefs[0]	Variable CoefTotalLength 	= numpnts(Coefs)				ReDimension /N=(CoefTotalLength - CoefStartIndex) FitCoefs, FitCoefsHold		// Fill the coefficients values wave	FitCoefs[] 		= Coefs[CoefStartIndex + p]		// Fill the coefficients holds wave	if (WaveExists(CoefsHold))		FitCoefsHold[] 	= CoefsHold[CoefStartIndex + p]	else		FitCoefsHold[] 	= 0	endif			// Fill the coefficients holds wave !*!*! NOT WORKING//	if (waveexists(CoefsSigmas) == 1)//		FitCoefsHold [] 	= (CoefsSigmas[CoefStartIndex + p] == 0)//	else//		FitCoefsHold = 1//	endif		// Update all the Fit global variables ... 	gBGPoly		= Coefs[5]	gNumRx1			= Coefs[6]	gRxType1			= Coefs[7]	gNumRx2			= Coefs[8]	gRxType2 		= Coefs[9]	gNumRs1 			= Coefs[10]	gRsType1 		= Coefs[11]	gNumCd1 		= Coefs[12]	gCdType1 		= Coefs[13]		// ... and their associated displays. 	gDBGPoly 		= gBGPoly	gPrevBGPoly 	= gBGPoly	SetVariable SetBGPolyVar,value= gDBGPoly		gDRx1 		= gNumRx1	gPrevRx1		= gNumRx1	SetVariable SetNumRx1Var,value= gDRx1		gDRx2 		= gNumRx2	gPrevRx2		= gNumRx2	SetVariable SetNumRx2Var,value= gDRx2		gDRs1 		= gNumRs1	gPrevRs1		= gNumRs1	SetVariable SetNumRs1Var,value= gDRs1		gDCd1			= gNumCd1	gPrevCd1		= gNumCd1	SetVariable SetNumCd1Var,value= gDCd1		UpdateDRSCoeffs(-1)End// ***************************************************************************// **************** 			UPDATING THE COEFFICIENTS ROUTINES// ***************************************************************************Function DRSCheckBoxProcs(CB_Struct) : CheckBoxControl 	STRUCT WMCheckboxAction &CB_Struct 		WAVE/T wFitDataList			= root:SPECTRA:Fitting:DRS:wFitDataList		if (CB_Struct.eventCode != 2)		return 0	endif		Variable i, NData=DimSize(wFitDataList,0)		if (cmpstr(CB_Struct.ctrlName,"AutoSaveCoefBox")==0)		if (CB_Struct.checked)			NewPath /M="Please choose a location for saving fit coefficients" /O/Q FitCoefPath		endif		elseif (cmpstr(CB_Struct.ctrlName,"Coefs4EachTraceBox")==0)		if ((CB_Struct.eventMod & 2^1) != 0)		// Shift key is down			DoAlert 1, "Copy these parameters to all data?"			if (V_flag)				for (i=0;i<NData;i+=1)					SaveDRSCoeffs(i,0,0,0,0)				endfor			endif		endif	endif		return 1End//Function MultiPeakPopupProcs(ctrlName,popNum,popStr) : PopupMenuControlFunction DRSPopupProcs(PU_Struct) : PopupMenuControl	STRUCT WMPopupAction &PU_Struct		String panelName 		= PU_Struct.win	String ctrlName 			= PU_Struct.ctrlName // check	Variable popNum 		= PU_Struct.popNum	Variable eventCode 		= PU_Struct.eventCode	String PlotFolder 		= "root:SPECTRA:Plotting:" + panelName		if (cmpstr("none",PU_Struct.popStr) == 0)		return 0	elseif (eventCode != 2)		return 0	endif		if (cmpstr(ctrlName,"SelectRx1Menu")==0)		NVAR Type		= root:SPECTRA:Fitting:DRS:gRxType1	elseif (cmpstr(ctrlName,"SelectRx2Menu")==0)		NVAR Type		= root:SPECTRA:Fitting:DRS:gRxType2	elseif (cmpstr(ctrlName,"SelectRs1Menu")==0)		NVAR Type		= root:SPECTRA:Fitting:DRS:gRsType1	elseif (cmpstr(ctrlName,"SelectCd1Menu")==0)		NVAR Type		= root:SPECTRA:Fitting:DRS:gCdType1	endif	Type = popNum		UpdateDRSCoeffs(-1)End		Function DRSSetVarProcs(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		if (cmpstr(ctrlName,"SetBGPolyVar")==0)		NVAR OldNum			= root:SPECTRA:Fitting:DRS:gPrevBGPoly		NVAR NewNum		 	= root:SPECTRA:Fitting:DRS:gBGPoly	endif	if (cmpstr(ctrlName,"SetNumRx1Var")==0)		NVAR OldNum			= root:SPECTRA:Fitting:DRS:gPrevRx1		NVAR NewNum			= root:SPECTRA:Fitting:DRS:gNumRx1	endif	if (cmpstr(ctrlName,"SetNumRx2Var")==0)		NVAR OldNum			= root:SPECTRA:Fitting:DRS:gPrevRx2		NVAR NewNum			= root:SPECTRA:Fitting:DRS:gNumRx2	endif	if (cmpstr(ctrlName,"SetNumRs1Var")==0)		NVAR OldNum			= root:SPECTRA:Fitting:DRS:gPrevRs1		NVAR NewNum			= root:SPECTRA:Fitting:DRS:gNumRs1	endif	if (cmpstr(ctrlName,"SetNumCd1Var")==0)		NVAR OldNum			= root:SPECTRA:Fitting:DRS:gPrevCd1		NVAR NewNum			= root:SPECTRA:Fitting:DRS:gNumCd1	endif	OldNum = NewNum	NewNum = varNum		UpdateDRSCoeffs(-1)End//Function TypeCoeffsFromFitCoeffs(PCoefs,PCoefsHold,FitCoefs,FitCoefsHold,NCoefs,NPeaks,Index,PeakToDelete)Function TypeCoeffsFromDRSCoeffs(PCoefs,PCoefsHold,FitCoefs,FitCoefsHold,NCoefs,NPeaks,Index,PeakToDelete)	Wave PCoefs,PCoefsHold, FitCoefs,FitCoefsHold	Variable Index, NCoefs, NPeaks, PeakToDelete		ReDimension /N=(NCoefs*NPeaks) PCoefs, PCoefsHold		Variable i=0, k=0	for (i=0;i<NPeaks;i+=1)		if ((i+1) == PeakToDelete)			// Skip a peak that is marked for deletion		else			PCoefs[NCoefs*k, NCoefs*k+(NCoefs-1)]			= FitCoefs[(Index+NCoefs*i) - NCoefs*k + p]			PCoefsHold[NCoefs*k, NCoefs*k+(NCoefs-1)]	= FitCoefsHold[(Index+NCoefs*i) - NCoefs*k + p]			k+=1		endif	endforEnd		// How is this supposed to work? It transfers the coefficients from the large FitCoefs wave// 	into subsidary waves associated with the background and each type of component. //	Then FitCoefs is redimensioned based on the new requested number of components. // 	The original coefficients are read back as appropriate. Default values are guessed for new peaks. //Function UpdateMultiPeakFitCoefficients(PeakToDelete)Function UpdateDRSCoeffs(PeakToDelete)	Variable PeakToDelete	WAVE BGCoefs				= root:SPECTRA:Fitting:DRS:BGCoefs	WAVE HoldBGCoefs			= root:SPECTRA:Fitting:DRS:HoldBGCoefs	//	NVAR OldPolyOrder			= root:SPECTRA:Fitting:DRS:gPrevBGPoly	NVAR NewPolyOrder			= root:SPECTRA:Fitting:DRS:gBGPoly	//	WAVE /T FitCoefsLegend	= root:SPECTRA:Fitting:DRS:FitCoefsLegend	WAVE FitCoefs				= root:SPECTRA:Fitting:DRS:FitCoefs	WAVE FitCoefsHold			= root:SPECTRA:Fitting:DRS:FitCoefsHold	//	WAVE Rx1Coefs				= root:SPECTRA:Fitting:DRS:Rx1Coefs	WAVE Rx1HoldCoefs		= root:SPECTRA:Fitting:DRS:Rx1HoldCoefs	WAVE Rx2Coefs				= root:SPECTRA:Fitting:DRS:Rx2Coefs	WAVE Rx2HoldCoefs		= root:SPECTRA:Fitting:DRS:Rx2HoldCoefs	WAVE Cd1Coefs				= root:SPECTRA:Fitting:DRS:Cd1Coefs	WAVE Cd1HoldCoefs		= root:SPECTRA:Fitting:DRS:Cd1HoldCoefs	WAVE Rs1Coefs				= root:SPECTRA:Fitting:DRS:Rs1Coefs	WAVE Rs1HoldCoefs		= root:SPECTRA:Fitting:DRS:Rs1HoldCoefs		NVAR gNumRx1				= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2				= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1				= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1				= root:SPECTRA:Fitting:DRS:gNumCd1		NVAR gPrevRx1				= root:SPECTRA:Fitting:DRS:gPrevRx1	NVAR gPrevRx2				= root:SPECTRA:Fitting:DRS:gPrevRx2	NVAR gPrevRs1				= root:SPECTRA:Fitting:DRS:gPrevRs1	NVAR gPrevCd1				= root:SPECTRA:Fitting:DRS:gPrevCd1			NVAR gRxType1				= root:SPECTRA:Fitting:DRS:gRxType1	SVAR gRxType1List			= root:SPECTRA:Fitting:DRS:gRxType1List	NVAR gRxType2				= root:SPECTRA:Fitting:DRS:gRxType2	SVAR gRxType2List			= root:SPECTRA:Fitting:DRS:gRxType2List	NVAR gRsType1				= root:SPECTRA:Fitting:DRS:gRsType1	SVAR gRsType1List			= root:SPECTRA:Fitting:DRS:gRsType1List	NVAR gCdType1				= root:SPECTRA:Fitting:DRS:gCdType1	SVAR gCdType1List			= root:SPECTRA:Fitting:DRS:gCdType1List		Variable i, j, k, Index, OldNCoefs, NewNCoefs,DeleteFlag, DeleteNum	String CoefName, PeakType, StepType		// Read the existing coefficients into waves for each peak/edge types	// ------------------------------------------------	// Background polynomial	ReDimension /N=(OldPolyOrder) BGCoefs, HoldBGCoefs		i=0	do		BGCoefs[i]=FitCoefs[i]		HoldBGCoefs[i]=FitCoefsHold[i]		i+=1	while(i<OldPolyOrder)		// Type 1 Relaxations	DeleteFlag=0	Index = OldPolyOrder	if (gPrevRx1>0)			DeleteNum = (gNumRx1<gPrevRx1) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(Rx1Coefs,Rx1HoldCoefs,FitCoefs,FitCoefsHold,3,gNumRx1,Index,DeleteNum)	endif		// Type 2 Relaxations	DeleteFlag=0	Index += (3* gPrevRx1)	if (gPrevRx2>0)			DeleteNum = (gNumRx2<gPrevRx2) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(Rx2Coefs,Rx2HoldCoefs,FitCoefs,FitCoefsHold,5,gNumRx2,Index,DeleteNum)	endif		// Type 1 Resonances	DeleteFlag=0	Index += (5*gPrevRx2)	if (gPrevRs1>0)			DeleteNum = (gNumRs1<gPrevRs1) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(Rs1Coefs,Rs1HoldCoefs,FitCoefs,FitCoefsHold,4,gNumRs1,Index,DeleteNum)	endif		// Type 1 Conduction	DeleteFlag=0	Index +=  (4*gPrevRs1)	if (gPrevCd1>0)			DeleteNum = (gNumCd1<gPrevCd1) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(Cd1Coefs,Cd1HoldCoefs,FitCoefs,FitCoefsHold,2,gNumCd1,Index,DeleteNum)	endif		// Count the total number of fit coefficients required. 	NewNCoefs = CalculateNumDRSCoefs(NewPolyOrder,gNumRx1,gNumRx2,gNumRs1,gNumCd1)	ReDimension /N=(NewNCoefs) FitCoefs, FitCoefsHold, FitCoefsLegend		// Read previous values back into the FitCoefs	// --------------------------------	// Background polynomial	i=0	do		ReDimension /N=(NewPolyOrder) BGCoefs, HoldBGCoefs		FitCoefs[i]=BGCoefs[i]		FitCoefsHold[i]=HoldBGCoefs[i]		FitCoefsLegend[i] = "p"+num2str(i)		i+=1	while(i<NewPolyOrder)	i-=1	if (NewPolyOrder>OldPolyOrder)		// Make a guess for the new, unvalued coefficient		FitCoefs[i]=BGCoefs[i-1]/10	endif		// Type 1 Relaxations	Index = NewPolyOrder	if (gNumRx1>0)				PeakType = StringFromList(gRxType1-1, gRxType1List)				DRSCoeffsFromTypeCoeffs(Rx1Coefs,Rx1HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,3,gNumRx1,Index,PeakType)			if (gNumRx1>gPrevRx1)			if (gPrevRx1>0)				// A new peak of type 1, at least one existing already ...				FitCoefs[Index+3*(gNumRx1-1),Index+3*(gNumRx1-1)+2] 		= FitCoefs[p-3]			else				// The first peak of type 1 ... some default coeffs. 				FitCoefs[Index,Index+2] 			= 1				FitCoefsHold[Index,Index+2] 	= 0			endif		endif	endif		// Type 2 Relaxations	Index += (3*gNumRx1)	if (gNumRx2>0)				PeakType = StringFromList(gRxType2-1, gRxType2List)				DRSCoeffsFromTypeCoeffs(Rx2Coefs,Rx2HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,5,gNumRx2,Index,PeakType)				if (gNumRx2>gPrevRx2)			if (gPrevRx2>0)				// A new peak of type 2, at least one existing already ...				FitCoefs[Index+5*(gNumRx2-1),Index+5*(gNumRx2-1)+4] 		= FitCoefs[p-5]			else				// The first peak of type 2 ... some default coeffs. //				FitCoefs[Index,Index+3] = 0.1				FitCoefs[Index] = 0.1				FitCoefs[Index+1] = 78				FitCoefs[Index+2] = 0				FitCoefs[Index+3] = 1				FitCoefs[Index+4] = 1				FitCoefsHold[Index,Index+3] = 0				FitCoefsHold[Index+2,] = 1			endif		endif	endif		// Type 1 Resonances	Index += (5*gNumRx2)	if (gNumRs1>0)				StepType = StringFromList(gRsType1-1, gRsType1List)				DRSCoeffsFromTypeCoeffs(Rs1Coefs,Rs1HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,4,gNumRs1,Index,StepType)		if (gNumRs1>gPrevRs1)			if (gPrevRs1>0)				// A new step of type 1, at least one existing already ...				FitCoefs[Index+4*(gNumRs1-1),Index+4*(gNumRs1-1)+3] 		= FitCoefs[p-4]			else				// The first peak of type 1 ... some default coeffs. //				FitCoefs[Index,Index] = 0.1				FitCoefs[Index] = 0.1				FitCoefs[Index+1] = 0.05				FitCoefs[Index+2] = 0				FitCoefs[Index+3] = 20				FitCoefsHold[Index,Index+3] = 0				FitCoefsHold[Index,Index+2] = 1			endif		endif	endif		// Type 1 conduction	Index += (4*gNumRs1)	if (gNumCd1>0)				PeakType = StringFromList(gCdType1-1, gCdType1List)				DRSCoeffsFromTypeCoeffs(Cd1Coefs,Cd1HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,2,gNumCd1,Index,PeakType)		if (gNumCd1>gPrevCd1)			if (gPrevCd1>0)				// A new peak of doublet type 1, at least one existing already ...				FitCoefs[Index+2*(gNumCd1-1),Index+2*(gNumCd1-1)+1] 		= FitCoefs[p-2]			else				// The first doublet of type 2 ... some default coeffs??				FitCoefs[Index,Index+1] = 1				FitCoefsHold[Index,Index+1] = 1			endif		endif	endif		// Update the previous peak and step numbers. 	OldPolyOrder 		= NewPolyOrder	gPrevRx1 		= gNumRx1	gPrevRx2 		= gNumRx2	gPrevRs1 		= gNumRs1	gPrevCd1 	= gNumCd1		UpdateDRSHighlightControls(0)		DRSCoefsToListBox()End// Each type of fit component has a coeffs wave for just that type. For example, Rs1Coeffs. This is helpful for creating the component fit functions .Function DRSCoeffsFromTypeCoeffs(PCoefs,PCoefsHold,FitCoefs,FitCoefsHold,FitCoefsLegend,NCoefs,NPeaks,Index,PeakType)	Wave PCoefs,PCoefsHold, FitCoefs,FitCoefsHold	Wave /T FitCoefsLegend	Variable Index, NCoefs, NPeaks	String PeakType		ReDimension /N=(NCoefs*NPeaks) PCoefs, PCoefsHold		Variable i, j	for (i=0;i<NPeaks;i+=1)		for (j=0;j<NCoefs;j+=1)			FitCoefs[Index+NCoefs*i+j]				= PCoefs[NCoefs*i+j]			FitCoefsHold[Index+NCoefs*i+j]		= PCoefsHold[NCoefs*i+j]			FitCoefsLegend[Index+NCoefs*i + j] 	= ReturnDRSLegend(PeakType,j)		endfor	endforEnd// This is a ridiculous approach!!!!!!!Function FillDRSCoefs(PCoefs,PeakType,PeakNum)	Wave PCoefs	String PeakType	Variable PeakNum		WAVE FitCoefs			= root:SPECTRA:Fitting:DRS:FitCoefs		NVAR PolyOrder			= root:SPECTRA:Fitting:DRS:gBGPoly	NVAR gNumRx1			= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2			= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1			= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1			= root:SPECTRA:Fitting:DRS:gNumCd1		Variable NPeakCoefs, Index		strswitch (PeakType)		case "Debye":			NPeakCoefs = 3			Index = PolyOrder			break		case "HavriliakNegami":			NPeakCoefs = 5			Index = PolyOrder + 3*gNumRx1			break		case "Damped Oscillator":			NPeakCoefs = 4			Index = PolyOrder + 3*gNumRx1 + 5*gNumRx2			break		case "Salt":			NPeakCoefs = 7			Index = PolyOrder + 3*gNumRx1 + 5*gNumRx2 + 4*gNumRs1			break	endswitch		ReDimension /N=(NPeakCoefs) PCoefs		PCoefs[] = FitCoefs[Index + NPeakCoefs*(PeakNum-1) + p]End//Function /T ReturnPeakLegend(PeakType,Index)Function /T ReturnDRSLegend(PeakType,Index)	String PeakType	Variable Index		String LegendStr	strswitch (PeakType)		case "Debye":			LegendStr = StringFromList(Index," τ(ps);            ϵ(0);            ϵ(∞);")			break		case "Havriliak-Negami":			LegendStr = StringFromList(Index," τ(ps);            ϵ(0);            ϵ(∞);            𝛼;            β;")			break		case "Inertial Oscillator":			LegendStr = StringFromList(Index," τ(ps);            ϵ(0);            𝛼;            γ;            s;")			break		case "Salt":			LegendStr = StringFromList(Index," 8.8541;        κ;")			break		case "Damped oscillator":			LegendStr = StringFromList(Index," f(GHz);           ϵ(0);           ϵ(∞);           γ;")			break		default:			LegendStr = ""			break	endswitch		if (Index == 0)		LegendStr = PeakType + LegendStr	endif		return LegendStrEnd// ***************************************************************************// **************** 			INTERACTIVE COEFFICIENT LISTBOX// ***************************************************************************//Function ModifyOrHoldFitCoefs(ctrlName,row,col,event) : ListBoxControlFunction ModifyOrHoldDRSCoefs(ctrlName,row,col,event) : ListBoxControl	String ctrlName	Variable row	Variable col	Variable event	//1=mouse down, 2=up, 3=dbl click, 4=cell select with mouse or keys					//5=cell select with shift key, 6=begin edit, 7=end		if ((col == 1) && (event==7))		// Finish editing the cell. Check for numeric input??		// Update all coefficients and holds		DRSCoefsFromListBox()			elseif ((col == 2) && (event == 2))		// First ensure the clicked CheckBox is no longer selected		WAVE wFitCoefsSel		= root:SPECTRA:Fitting:DRS:wFitCoefsSel		wFitCoefsSel[row][col] 	= ClearBit(wFitCoefsSel[row][col],0)				// Update all coefficients and holds		DRSCoefsFromListBox()	endifEnd//Function HoldingFitCoefs(ctrlname):ButtonControlFunction HoldingDRSCoefs(ctrlname):ButtonControl	String ctrlname		WAVE wFitCoefsSel			= root:SPECTRA:Fitting:DRS:wFitCoefsSel	WAVE HoldFitCoefs			= root:SPECTRA:Fitting:DRS:FitCoefsHold		if (cmpstr(ctrlName,"HoldAllDRSCoefsButton")==0)		wFitCoefsSel[][2] = SetBit(wFitCoefsSel[p][2],4)		HoldFitCoefs[] = 1	endif	if (cmpstr(ctrlName,"HoldNoDRSCoefsButton")==0)		wFitCoefsSel[][2] = ClearBit(wFitCoefsSel[p][2],4)		HoldFitCoefs[] = 0	endifEnd//Function FitCoefsToListBox()Function DRsCoefsToListBox()	WAVE /T wFitCoefsList		= root:SPECTRA:Fitting:DRS:wFitCoefsList	WAVE wFitCoefsSel			= root:SPECTRA:Fitting:DRS:wFitCoefsSel	//	WAVE /T FitCoefsLegend	= root:SPECTRA:Fitting:DRS:FitCoefsLegend	WAVE FitCoefs				= root:SPECTRA:Fitting:DRS:FitCoefs	WAVE FitCoefsHold			= root:SPECTRA:Fitting:DRS:FitCoefsHold		Variable i, NPts=DimSize(FitCoefs,0)	String TempStr		Variable NCoefs = numpnts(FitCoefs)	ReDimension /N=(NCoefs,3) wFitCoefsList, wFitCoefsSel	wFitCoefsList[][0] = FitCoefsLegend[p]		// One liner but loses accuracy//	wFitCoefsList[][1] = num2str(FitCoefs[p])		for (i=0;i<NPts;i+=1)//		sprintf TempStr, "%g", FitCoefs[i]		sprintf TempStr, "%4.5f", FitCoefs[i]		wFitCoefsList[i][1] = TempStr	endfor		// Ensure the coefficients are always user-editable ...	wFitCoefsSel[][1] 	= SetBit(wFitCoefsSel[p][1],1)		// Make the hold values checkboxes ... 	wFitCoefsSel[][2]	 = SetBit(wFitCoefsSel[p][2],5)	// ... and update their value. 	wFitCoefsSel[][2]	 = (FitCoefsHold[p] == 1) ? SetBit(wFitCoefsSel[p][2],4) : ClearBit(wFitCoefsSel[p][2],4)	End//Function FitCoefsFromListBox()Function DRSCoefsFromListBox()	WAVE /T wFitCoefsList	= root:SPECTRA:Fitting:DRS:wFitCoefsList	WAVE wFitCoefsSel		= root:SPECTRA:Fitting:DRS:wFitCoefsSel	//	WAVE FitCoefs			= root:SPECTRA:Fitting:DRS:FitCoefs	WAVE HoldFitCoefs		= root:SPECTRA:Fitting:DRS:FitCoefsHold		FitCoefs[] = str2num(wFitCoefsList[p][1])		// A logical expression to convert the ListBoxCheckVar to 1 or 0	HoldFitCoefs[] = ((wFitCoefsSel[p][2] & 2^4) != 0)End// Function RecallFitCoefsSave(ctrlName) : ButtonControlFunction RecallDRSCoefs(ctrlName) : ButtonControl	String ctrlName		WAVE FitCoefs 			= root:SPECTRA:Fitting:DRS:FitCoefs	WAVE FitCoefsSave 		= root:SPECTRA:Fitting:DRS:FitCoefsSave		if (waveexists(FitCoefsSave)==1)		if (numpnts(FitCoefs) == numpnts(FitCoefsSave))			FitCoefs=FitCoefsSave			DRsCoefsToListBox()		endif	endifEnd// ***************************************************************************// **************** 			PLOTTING// ***************************************************************************Function SelectDRSDataToFit(ctrlName,row,col,event) : ListBoxControl	String ctrlName	Variable row	Variable col	Variable event	//1=mouse down, 2=up, 3=dbl click, 4=cell select with mouse or keys						//5=cell select with shift key, 6=begin edit, 7=end		if ((event==4) || (event==5))				// This has to be forced because the list box is set up to allow only one or zero selections. 		WAVE wFitDataSel	= root:SPECTRA:Fitting:DRS:wFitDataSel		wFitDataSel 			= 0		wFitDataSel[row] 	= 1				ListBox FitDataListBox, selRow = row				DisplayDRSDataAndCoeffs(row)			endifEndFunction DisplayDRSDataAndCoeffs(DRSNum)	Variable DRSNum	WAVE/T wFitDataList			= root:SPECTRA:Fitting:DRS:wFitDataList	WAVE wFitDataGroup			= root:SPECTRA:Fitting:DRS:wFitDataGroup	SVAR gSubDataType 			= root:SPECTRA:Fitting:DRS:gSubDataType	NVAR gSubDataNum 			= root:SPECTRA:Fitting:DRS:gSubDataNumber	SVAR gFitType 					= root:SPECTRA:Fitting:gFitType		NVAR gPrevFitDataNum 		= root:SPECTRA:Fitting:DRS:gPrevFitDataNum	NVAR gCoefs4EachTraceFlag 	= root:SPECTRA:Fitting:DRS:gCoefs4EachTraceFlag	NVAR gSameFitRangeFlag		= root:SPECTRA:Fitting:DRS:gSameFitRangeFlag	NVAR gAutoRescale				= root:SPECTRA:Plotting:DRSFitPanel:gAutoRescale		CheckFitResultsFolder(wFitDataList,wFitDataGroup,DRSNum,gSubDataNum,gSubDataType,gFitType)		if (gSameFitRangeFlag == 1)		// This cunningly saves the cursor range from the about-to-be removed data ... 		// ... into the folder for the about-to-be plotted data		SaveCursorFitRange2("DRSFitPanel","root:SPECTRA:Fitting:DRS",DRSNum)	endif		if (gCoefs4EachTraceFlag == 1)		SaveDRSCoeffs(gPrevFitDataNum,0,0,0,0)	endif		PlotDataInFitPanel2("DRSFitPanel","root:SPECTRA:Fitting:DRS","DRSFitPanel")		SetCursorFitRange2("DRSFitPanel", "root:SPECTRA:Fitting:DRS", DRSNum)		UpdateDRSHighlightControls(1)		DRSFitPanelLabels()		if (gAutoRescale)		DoUpdate 		RescaleComplexDataFit("DRSFitPanel")	endif		LoadDRSCoeffsFromFolder(DRSNum,gCoefs4EachTraceFlag)			gPrevFitDataNum = DRSNumEndFunction DRSRealOrImagCheckProc(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked		String PlotName = WinName(0,65)	NVAR gRealImag		= $("root:SPECTRA:Plotting:"+PlotName+":gRealImag")	NVAR gAutoRescale = $("root:SPECTRA:Plotting:"+PlotName+":gAutoRescale")		gRealImag = ReturnLastNumber(ctrlName)	CheckBox AXES_RICheckBox1,value=(gRealImag==1)	CheckBox AXES_RICheckBox2,value=(gRealImag==2)		if (gAutoRescale)		RescaleComplexDataFit(PlotName)	endif		ModifyGraph cmplxMode=(gRealImag)	DRSFitPanelLabels()EndFunction DRSFitPanelLabels()	NVAR gRealImag = root:SPECTRA:Plotting:DRSFitPanel:gRealImag	ModifyGraph mirror(bottom)=2, mirror(left)=1	ModifyGraph fSize=14		if (gRealImag == 1)		Label left "\\Z26ε\\B\\f02\\Z14real"	else		Label left "\\Z26ε\\B\\f02\\Z14imag"	endif	ModifyGraph lblRot(left)=-90	Label bottom "\\Z16Frequency (GHz)"	End// ***************************************************************************// **************** 			CREATE THE INTERACTIVE PANEL FOR FITTING// ***************************************************************************Function CreateDRSFitPanel(FitType)	String FitType		WAVE/T wFitDataList		= root:SPECTRA:Fitting:DRS:wFitDataList	WAVE wFitDataGroup		= root:SPECTRA:Fitting:DRS:wFitDataGroup		WAVE nullWave 				= root:SPECTRA:Plotting:nullWave		DoWindow/K DRSFitPanel	Display /W=(196,65,1087,836)/K=1  nullWave  as "Dielectric Fitting Panel"	DoWindow/C DRSFitPanel	CheckWindowPosition("DRSFitPanel",196,65,1087,836)	ModifyGraph margin(left)=85	 	// *************************************************************	// ****			The MAIN PANEL CONTROLS	// *************************************************************		ControlBar 300		// The List of the DATA to plot and fit	ListBox FitDataListBox,mode= 1,pos={4,40},size={127,254}, proc=SelectDRSDataToFit	ListBox FitDataListBox,listWave=root:SPECTRA:Fitting:DRS:wFitDataList, widths={400}, userColumnResize=1	// ListBox FitDataListBox,selWave=root:SPECTRA:Fitting:wFitDataSel	// This is NOT used for mode=1 ListBoxes		String DataName, DataFolderName, AxisAndFolderName	DataName 				= wFitDataList[0]	DataFolderName 			= "root:SPECTRA:Data:Load" + num2str(wFitDataGroup[0])	AxisAndFolderName		= ParseFilePath(2,DataFolderName,":",0,0) + AxisNameFromDataName(DataName)	WAVE Axis				= $(AxisAndFolderName)		Variable XMin= Axis[0]	Variable XMax= Axis[numpnts(Axis)-1]	Variable XInc = (XMax - XMin)/200		MakeVariableIfNeeded("root:SPECTRA:Plotting:DRSFitPanel:gPlotXMin",XMin)	MakeVariableIfNeeded("root:SPECTRA:Plotting:DRSFitPanel:gPlotXMax",XMax)	SetVariable AXES_MinXAxisSetVar,limits={-Inf,Inf,XInc},pos={676,222},size={105,20},fsize=14,proc=VaryPlotAxisRange,title="Min",value= $("root:SPECTRA:Plotting:DRSFitPanel:gPlotXMin")	SetVariable AXES_MaxXAxisSetVar,limits={-Inf,Inf,XInc},pos={677,245},size={105,20},fsize=14,proc=VaryPlotAxisRange,title="Max",value= $("root:SPECTRA:Plotting:DRSFitPanel:gPlotXMax")		MakeVariableIfNeeded("root:SPECTRA:Plotting:DRSFitPanel:gLogX",0)	CheckBox AXES_LogXCheckBox,pos={680,272}, fSize=14,size={64,14},proc=SetLogAxis,title="log", variable=root:SPECTRA:Plotting:DRSFitPanel:gLogX		MakeVariableIfNeeded("root:SPECTRA:Plotting:DRSFitPanel:gRealImag",1)	NVAR gRealImag = root:SPECTRA:Plotting:DRSFitPanel:gRealImag	CheckBox AXES_RICheckBox1,pos={10,15},proc=DRSRealOrImagCheckProc,title="Real",fSize=14,mode=1, value=(gRealImag==1)	CheckBox AXES_RICheckBox2,pos={65,15},proc=DRSRealOrImagCheckProc,title="Imaginary",fSize=14,mode=1, value=(gRealImag==2)		MakeVariableIfNeeded("root:SPECTRA:Plotting:DRSFitPanel:gAutoRescale",0)	CheckBox AXES_AutoRescale,pos={215,15}, fSize=14,size={64,14},proc=ComplexDataFitScaleCheck,title="auto", variable=root:SPECTRA:Plotting:DRSFitPanel:gAutoRescale	Button AXES_Rescale,pos={150,15},proc=ComplexDataFitScaleButton,size={58,18},title="Rescale"		// The List of the COEFFICIENTS	ListBox FitCoefsListBox,mode= 5,pos={140,40},size={260,254}, widths={130,70,35}	ListBox FitCoefsListBox, editstyle=1, fSize=12, proc=ModifyOrHoldDRSCoefs	ListBox FitCoefsListBox,listWave=root:SPECTRA:Fitting:DRS:wFitCoefsList	ListBox FitCoefsListBox,selWave=root:SPECTRA:Fitting:DRS:wFitCoefsSel		// General Fit Controls	// -------------------------------------- Errors Options	NVAR gShowErrorsFlag = root:SPECTRA:Fitting:DRS:gShowErrorsFlag	CheckBox ShowErrorsCoefBox,pos={410,35},size={112,14},proc=DRSCheckBoxProcs,title="Show &",value= gShowErrorsFlag	NVAR gUseErrorsFlag = root:SPECTRA:Fitting:DRS:gUseErrorsFlag	CheckBox UseErrorsCoefBox,pos={468,35},size={112,14},proc=DRSCheckBoxProcs,title="use errors",value= gUseErrorsFlag	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Masking Options	NVAR gUseMaskFlag = root:SPECTRA:Fitting:DRS:gUseMaskFlag	CheckBox MASK1_PLOT_MaskCheck,pos={410,8},size={44,14},proc=MaskCheckProc,title="Use mask", value= gUseMaskFlag		Button MASK2_PLOT_EditMaskButton,pos={562,224},proc=MaskRegionButtons,size={50,18},title="Edit Mask", disable=1	Button MASK3_PLOT_UpdateMaskButton,pos={562,224},proc=MaskRegionButtons,size={50,18},title="Update", disable=1	Button MASK3_PLOT_MaskButton,pos={548,246},proc=MaskRegionButtons,size={40,18},title="Mask", disable=1	Button MASK3_PLOT_UnMaskButton,pos={599,246},proc=MaskRegionButtons,size={60,18},title="Unmask", disable=1	Button MASK3_PLOT_StoreMaskButton,pos={599,246},proc=MaskRegionButtons,size={60,18},title="Store", disable=1	Button MASK3_PLOT_LoadMaskButton,pos={599,246},proc=MaskRegionButtons,size={60,18},title="Load", disable=1	// --------------------------------------------------------------------------------------------------		// -------------------------------------- Automatic coefficient saving	NVAR gAutoSaveCoefFlag = root:SPECTRA:Fitting:DRS:gAutoSaveCoefFlag	CheckBox AutoSaveCoefBox,pos={410,21},size={44,14},proc=DRSCheckBoxProcs,title="Autosave coeficients",variable=gAutoSaveCoefFlag	// --------------------------------------------------------------------------------------------------		// -------------------------------------- Fixing or changing the fit range for each trace	NVAR gSameFitRangeFlag = root:SPECTRA:Fitting:DRS:gSameFitRangeFlag	CheckBox SameFitRangeCoefBox,pos={410,63},size={44,14},proc=DRSCheckBoxProcs,title="Same fit range",variable=gSameFitRangeFlag	// --------------------------------------------------------------------------------------------------		// -------------------------------------- Crudely spit out the standard deviations on the parameters	NVAR gFitSD = root:SPECTRA:Fitting:DRS:gFitSD	CheckBox PrintSDsBox,pos={410,79},size={44,14},proc=DRSCheckBoxProcs,title="Print fit s.d.'s",variable=gFitSD	// --------------------------------------------------------------------------------------------------				// -------------------------------------- Display Coefficient changes	NVAR gCoefs4EachTraceFlag = root:SPECTRA:Fitting:DRS:gCoefs4EachTraceFlag	CheckBox Coefs4EachTraceBox,pos={410,49},size={44,14},proc=DRSCheckBoxProcs,title="Coeffs 4 each trace",variable=gCoefs4EachTraceFlag	NVAR gMonitorCoef 	= root:SPECTRA:Fitting:DRS:gMonitorCoef	gMonitorCoef = -1	SetVariable MonitorCoef,pos={404,156},size={130,15},limits={-1,Inf,1},title="Track coefficient #",variable= gMonitorCoef,proc=SetCoefToTrack2	ValDisplay LastCoefDisplay,pos={433,172},size={104,14},title="Last",value= #"root:SPECTRA:Fitting:DRS:gPrevCoef"	ValDisplay NewCoefDisplay,pos={414,189},size={123,14},title="Current ",value= #"root:SPECTRA:Fitting:DRS:gPresCoef"	// --------------------------------------------------------------------------------------------------	AddDRSFitControls()End// Add the controls for Multiple Peak FittingFunction AddDRSFitControls()				Button HoldAllDRSCoefsButton,pos={275,15},size={60,20},proc=HoldingDRSCoefs,title="Hold All"	Button HoldNoDRSCoefsButton,pos={342,15},size={46,20},proc=HoldingDRSCoefs,title="None"		Button DRSTrialButton,pos={412,110},fColor=(32768,40777,65535),proc=DRSFitTrialButton,size={50,20},title="Trial"	Button DRSFitButton,pos={412,133},fColor=(65535,32768,32768),proc=DRSFitTrialButton,size={50,20},title="Fit"	Button LastFitButton,pos={482,133},size={50,20},proc=RecallDRSCoefs,title="Undo"	Button SaveFitButton,pos={482,110},size={50,20},proc=DRSRecordButton,title="Save"	Button KeepFitButton,pos={482,110},size={50,20},proc=DRSRecordButton,title="Keep"		Button SaveCoefsButton,pos={412,207},size={120,20},proc=DRSCoeffButtons,title="Save Coefficients"	Button LoadCoefsButton,pos={412,229},size={120,20},proc=DRSCoeffButtons,title="Load Coefficients"	Button LoadLastFitButton,pos={412,251},size={120,20},proc=DRSCoeffButtons,title="Last Saved Coefs"	Button SaveNullCoefsButton,pos={412,273},size={40,20},proc=DRSCoeffButtons,title="Null"		Button DRSKKButton,pos={412,273},size={40,20},proc=DRSCoeffButtons,title="KK"	// No longer needed as the legend is stored with the coefficients//	Button SaveCoefsLegendButton,pos={462,273},size={70,20},proc=FitCoefficientButtons,title="Legend"		GroupBox Rx1Group,pos={542,22},size={172,100}, fColor=(52428,1,1), title="3-parameter relaxations"	GroupBox Rx2Group,pos={716,22},size={172,100}, fColor=(52428,1,1), title="5-parameter relaxations"	GroupBox Rs1Group,pos={542,122},size={172,100}, fColor=(52428,1,1), title="4-parameter resonances"	GroupBox Cd1Gro02,pos={716,122},size={172,100}, fColor=(52428,1,1), title="2-parameter backgrounds"		GroupBox MaskGroup,pos={542,207},size={122,85}, fColor=(52428,1,1), title="masking"	GroupBox PlotGroup,pos={666,207},size={122,85}, fColor=(52428,1,1), title="plot range"	// -------------------------------------- Background Polynomial	SetVariable SetBGPolyVar,pos={579,5},size={180,15},proc=DRSSetVarProcs,title="Background polynomial"	SetVariable SetBGPolyVar,fsize=12,limits={0,20,1},value= root:SPECTRA:Fitting:DRS:gDBGPoly,disable=1	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Number of relaxations of type 1	NVAR gDRx1 			= root:SPECTRA:Fitting:DRS:gDRx1	NVAR gNumRx1 		= root:SPECTRA:Fitting:DRS:gNumRx1		gDRx1 = gNumRx1	SetVariable SetNumRx1Var,pos={560,35},size={130,15},fsize=13,proc=DRSSetVarProcs,title="# relaxations"	SetVariable SetNumRx1Var,limits={0,20,1},value= root:SPECTRA:Fitting:DRS:gDRx1		// The form of type 1 peaks. 	NVAR gRxType1				= root:SPECTRA:Fitting:DRS:gRxType1	SVAR gRxType1List			= root:SPECTRA:Fitting:DRS:gRxType1List	PopupMenu SelectRx1Menu,pos={547,55},size={130,20},proc=DRSPopupProcs,title=""	PopupMenu SelectRx1Menu,mode=gRxType1, value= #"root:SPECTRA:Fitting:DRS:gRxType1List	"	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Number of relaxations of type 2	NVAR gDRx2			= root:SPECTRA:Fitting:DRS:gDRx2	NVAR gNumRx2 		= root:SPECTRA:Fitting:DRS:gNumRx2		gDRx2 = gNumRx2	SetVariable SetNumRx2Var,pos={729,35},size={130,15},fsize=13,proc=DRSSetVarProcs,title="# relaxations"	SetVariable SetNumRx2Var,limits={0,20,1},value= root:SPECTRA:Fitting:DRS:gDRx2		// The form of type 1 peaks. 	NVAR gRxType2				= root:SPECTRA:Fitting:DRS:gRxType2	SVAR gRxType2List			= root:SPECTRA:Fitting:DRS:gRxType2List	PopupMenu SelectRx2Menu,pos={720,55},size={130,20},proc=DRSPopupProcs,title=""	PopupMenu SelectRx2Menu,mode=gRxType1, value= #"root:SPECTRA:Fitting:DRS:gRxType2List	"	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Number of resonances of type 1	NVAR gDRs1 			= root:SPECTRA:Fitting:DRS:gDRs1	NVAR gNumRs1 		= root:SPECTRA:Fitting:DRS:gNumRs1		gDRs1 = gNumRs1	SetVariable SetNumRs1Var,pos={560,137},size={130,15},fsize=13,proc=DRSSetVarProcs,title="# resonances"	SetVariable SetNumRs1Var,limits={0,20,1},value= root:SPECTRA:Fitting:DRS:gDRs1		// The form of the resonances	NVAR gRsType1			= root:SPECTRA:Fitting:DRS:gRsType1	SVAR gRsType1List		= root:SPECTRA:Fitting:DRS:gRsType1List	PopupMenu SelectRs1Menu,pos={547,157},size={130,20},proc=DRSPopupProcs,title=""	PopupMenu SelectRs1Menu,mode=gRsType1, value= #"root:SPECTRA:Fitting:DRS:gRsType1List"	// -----------------------------------------------------------------------------------------------------		// --------------------------------------   	Number of conductivity bscskgrounds of type 1	------------------------------------	NVAR gDCd1 		= root:SPECTRA:Fitting:DRS:gDCd1	NVAR gNumCd1 		= root:SPECTRA:Fitting:DRS:gNumCd1		gDCd1 = gNumCd1	SetVariable SetNumCd1Var,pos={729,137},size={130,15},fsize=13,proc=DRSSetVarProcs,title="# conduction"	SetVariable SetNumCd1Var,limits={0,10,1},value= root:SPECTRA:Fitting:DRS:gDCd1		// The form of type 2 doublets	NVAR gCdType1			= root:SPECTRA:Fitting:DRS:gCdType1	SVAR gCdType1List		= root:SPECTRA:Fitting:DRS:gCdType1List	PopupMenu SelectCd1Menu,pos={720,157},size={130,20},proc=DRSPopupProcs,title=""	PopupMenu SelectCd1Menu,mode=gCdType1,value= #"root:SPECTRA:Fitting:DRS:gCdType1List"	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Highlight an individual peak. 		NVAR gNumRx1			= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2			= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1			= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1			= root:SPECTRA:Fitting:DRS:gNumCd1		// These should not be necessary//	NVAR gSelRx1			= root:SPECTRA:Fitting:DRS:gSelRx1//	NVAR gSelRx2			= root:SPECTRA:Fitting:DRS:gSelRx2//	NVAR gSelRs1			= root:SPECTRA:Fitting:DRS:gSelRs1//	NVAR gSelCd1			= root:SPECTRA:Fitting:DRS:gSelCd1		SetVariable HighlightRx1Var,pos={550,81},fsize=13,size={40,15},title=" ",limits={0,gNumRx1,1},value= root:SPECTRA:Fitting:DRS:gSelRx1, proc = HighlightDRSCmpnt	SetVariable HighlightRx2Var,pos={725,81},fsize=13,size={40,15},title=" ",limits={0,gNumRx2,1},value= root:SPECTRA:Fitting:DRS:gSelRx2, proc = HighlightDRSCmpnt	SetVariable HighlightRs1Var,pos={550,183},fsize=13,size={40,15},title=" ",limits={0,gNumRs1,1},value= root:SPECTRA:Fitting:DRS:gSelRs1, proc = HighlightDRSCmpnt	SetVariable HighlightCd1Var,pos={725,183},fsize=13,size={40,15},title=" ",limits={0,gNumCd1,1},value= root:SPECTRA:Fitting:DRS:gSelCd1, proc = HighlightDRSCmpnt	// -----------------------------------------------------------------------------------------------------	// -------------------------------------- Delete the highlighted peak from the coefficients//	Button DeleteHighlightedPeak1Button,pos={605,81},size={24,15},title="X", proc = DeleteHighlightedCmpnt//	Button DeleteHighlightedPeak2Button,pos={731,81},size={24,15},title="X", proc = DeleteHighlightedCmpnt//	Button DeleteHighlightedStep1Button,pos={605,183},size={24,15},title="X", proc = DeleteHighlightedCmpnt//	Button DeleteHighlightedDblt1Button,pos={731,183},size={24,15},title="X", proc = DeleteHighlightedCmpnt	// -----------------------------------------------------------------------------------------------------	//	SetVariable SetPeakStatType1,pos={546,101},size={14,17},fSize=11, proc=SetPeakStatistic,title=" "//	SetVariable SetPeakStatType1,limits={0,7,1},value= root:SPECTRA:Fitting:DRS:gPeakStatisticType1//	//	SetVariable SetPeakStatType2,pos={670,101},size={14,17},fSize=11, proc=SetPeakStatistic,title=" "//	SetVariable SetPeakStatType2,limits={0,7,1},value= root:SPECTRA:Fitting:DRS:gPeakStatisticType2		// -------------------------------------- Display the highlighted peak statistic//	ValDisplay PeakStatisticDisplay1,pos={564,102},size={97,14},title="Area",value=#"root:SPECTRA:Fitting:DRS:gPeakStatistic1"//	ValDisplay PeakStatisticDisplay2,pos={687,102},size={97,14},title="Area",value=#"root:SPECTRA:Fitting:DRS:gPeakStatistic2"	// -----------------------------------------------------------------------------------------------------End// ***************************************************************************// **************** 			Highlighting components of the peak fit// ***************************************************************************Function UpdateDRSHighlightControls(NoneFlag)	Variable NoneFlag		NVAR gNumRx1			= root:SPECTRA:Fitting:DRS:gNumRx1	NVAR gNumRx2			= root:SPECTRA:Fitting:DRS:gNumRx2	NVAR gNumRs1			= root:SPECTRA:Fitting:DRS:gNumRs1	NVAR gNumCd1			= root:SPECTRA:Fitting:DRS:gNumCd1	NVAR gSelRx1			= root:SPECTRA:Fitting:DRS:gSelRx1	NVAR gSelRx2			= root:SPECTRA:Fitting:DRS:gSelRx2	NVAR gSelRs1			= root:SPECTRA:Fitting:DRS:gSelRs1	NVAR gSelCd1			= root:SPECTRA:Fitting:DRS:gSelCd1		if (NoneFlag == 0)		gSelRx1 	= 0		gSelRx2 	= 0		gSelRs1 	= 0		gSelCd1 	= 0	endif		SetVariable HighlightRx1Var,limits={0,gNumRx1,1},win=DRSFitPanel,value= root:SPECTRA:Fitting:DRS:gSelRx1	SetVariable HighlightRx2Var,limits={0,gNumRx2,1},win=DRSFitPanel,value= root:SPECTRA:Fitting:DRS:gSelRx2	SetVariable HighlightRs1Var,limits={0,gNumRs1,1},win=DRSFitPanel,value= root:SPECTRA:Fitting:DRS:gSelRs1	SetVariable HighlightCd1Var,limits={0,gNumCd1,1},win=DRSFitPanel,value= root:SPECTRA:Fitting:DRS:gSelCd1EndFunction HighlightDRSCmpnt(sv) : SetVariableControl	STRUCT WMSetVariableAction &sv	 	WAVE wFitDataSel			= root:SPECTRA:Fitting:DRS:wFitDataSel	WAVE /T wFitDataList		= root:SPECTRA:Fitting:DRS:wFitDataList		String DataName, SampleName, PeakType, CpntSuffix, CpntName		// Need to distinguished between selected DataWave and selected Fit Component//	Variable Selected = sv.dval		if (sv.eventCode>0)				if (cmpstr(sv.ctrlName,"HighlightRx1Var")==0)				NVAR Selected			= root:SPECTRA:Fitting:DRS:gSelRx1//				NVAR StatType			= root:SPECTRA:Fitting:DRS:gPeakStatisticType1//				NVAR PeakStatistic		= root:SPECTRA:Fitting:DRS:gPeakStatistic1				NVAR DRSType			= root:SPECTRA:Fitting:DRS:gRxType1				SVAR DRSTypeList		= root:SPECTRA:Fitting:DRS:gRxType1List				CpntSuffix = "_Rx1n"							elseif (cmpstr(sv.ctrlName,"HighlightRx2Var")==0)				NVAR Selected			= root:SPECTRA:Fitting:DRS:gSelRx2//				NVAR StatType			= root:SPECTRA:Fitting:DRS:gPeakStatisticType2//				NVAR PeakStatistic		= root:SPECTRA:Fitting:DRS:gPeakStatistic2				NVAR DRSType			= root:SPECTRA:Fitting:DRS:gRxType2				SVAR DRSTypeList		= root:SPECTRA:Fitting:DRS:gRxType2List				CpntSuffix = "_Rx2n"							elseif (cmpstr(sv.ctrlName,"HighlightRs1Var")==0)				NVAR Selected			= root:SPECTRA:Fitting:DRS:gSelectedStep1				CpntSuffix = "Rs1n"							elseif (cmpstr(sv.ctrlName,"HighlightCd1Var")==0)				NVAR Selected		= root:SPECTRA:Fitting:DRS:gSelectedDoublets1				CpntSuffix = "Cd1n"			endif			//			Selected = sv.dval // This should be redundant, actually - CHECK						Variable DataNum = FindSelectedData(wFitDataSel)			if (DataNum == -1)				return-1			endif						DataName 		= wFitDataList[DataNum]			SampleName 		= SampleNameFromDataName(DataName)			CpntName 		= SampleName + CpntSuffix+num2str(Selected) // or sv.dval						HighlightTrace("DRSFitPanel",CpntName,"yellow",2)						if ((cmpstr("_p1n",CpntSuffix) == 0) || (cmpstr("_p2n",CpntSuffix) == 0))				WAVE Cpnt			= TraceNameToWaveRef("DRSFitPanel",CpntName)				WAVE Axis			= XWaveRefFromTrace("DRSFitPanel",CpntName)//				SVAR StatList		= root:SPECTRA:Fitting:DRS:gPeakStatisticTypeList								PeakType = StringFromList(DRSType-1, DRSTypeList)								Make /FREE/O/N=3 tempCoefs				FillDRSCoefs(tempCoefs,PeakType,Selected)//				FillPeakCoefs(tempCoefs,PeakType,Selected)//				PeakStatistic = CalculatePeakStatistic(Axis,Cpnt,tempCoefs,PeakType,StringFromList(StatType,StatList))			endif						// Normal coloring for the preceding trace ... 			CpntName = SampleName + CpntSuffix+num2str(Selected+1)			HighlightTrace("DRSFitPanel",CpntName,"green",1)			// ... and the next one. 			CpntName = SampleName + CpntSuffix+num2str(Selected-1)			HighlightTrace("DRSFitPanel",CpntName,"green",1)	endifEnd//Function DeleteHighlightedCmpnt(ctrlname):ButtonControlFunction DeleteHighlightedDRSCmpnt(ctrlname):ButtonControl	String ctrlname		String NumPeaksCtrlName	if (cmpstr(ctrlName,"DeleteHighlightedPeak1Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:DRS:gNumFitPeaks1		NVAR DPeaks				= root:SPECTRA:Fitting:DRS:gDFitPeaks1		NVAR PeakToDelete		= root:SPECTRA:Fitting:DRS:gSelectedPeaks1		NumPeaksCtrlName		= "SetNumFitPeaks1Var"	elseif (cmpstr(ctrlName,"DeleteHighlightedPeak2Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:DRS:gNumFitPeaks2		NVAR DPeaks				= root:SPECTRA:Fitting:DRS:gDFitPeaks2		NVAR PeakToDelete		= root:SPECTRA:Fitting:DRS:gSelectedPeaks2		NumPeaksCtrlName 		= "SetNumFitPeaks2Var"	elseif (cmpstr(ctrlName,"DeleteHighlightedStep1Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:DRS:gNumFitSteps1		NVAR DPeaks				= root:SPECTRA:Fitting:DRS:gDFitSteps1		NVAR PeakToDelete		= root:SPECTRA:Fitting:DRS:gSelectedStep1		NumPeaksCtrlName 		= "SetNumFitStepsVar"	elseif (cmpstr(ctrlName,"DeleteHighlightedDblt1Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:DRS:gNumFitDoublets1		NVAR DPeaks				= root:SPECTRA:Fitting:DRS:gDFitDoublets1		NVAR PeakToDelete		= root:SPECTRA:Fitting:DRS:gSelectedPeaks1		NumPeaksCtrlName 		= "SetNumFitDoublets1Var"	endif		if (PeakToDelete > 0)		NumPeaks -= 1		UpdateMultiPeakFitCoefficients(PeakToDelete)		DPeaks = NumPeaks		SetVariable $NumPeaksCtrlName, value=DPeaks		CalculateMultiPeakFit(0)	endifEnd// ***************************************************************************// **************** 			// Use the current fit to extend the data and to perform the KK transform. // ***************************************************************************Function DRSKK()	NVAR gRealImag = root:SPECTRA:Plotting:DRSFitPanel:gRealImag	NVAR gNFitPts 		= root:SPECTRA:Fitting:DRS:gNFitPts		WAVE FitCoefs 	= root:SPECTRA:Fitting:DRS:FitCoefs		String DRSTraces = TraceNameList("DRSFitPanel",",",1)	String DataName = ListMatch(DRSTraces, "*_data")	String SampleName 	= SampleNameFromDataName(DataName)		WAVE Data 	= TraceNameToWaveRef("DRSFitPanel",DataName)	WAVE Axis 	= XWaveRefFromTrace("DRSFitPanel",DataName)		gNFitPts = 500000		String OldDF = getDataFolder(1)	SetDataFolder root:			// These are the extended waves for KK		Make /O/D/N=(gNFitPts) DataLong=0, AxisLong=0, TransformLong=0		SetScale/P x 0,0.01,"", DataLong, TransformLong		AxisLong[] = p*0.01				// Calculate the Calculated real-imaginary waves		Make /O/D/N=(2*gNFitPts) CalcTemp=0, AxisTemp=0		AxisTemp[0,gNFitPts-1] 	= AxisLong[p]		AxisTemp[gNFitPts,] 		= AxisLong[p-gNFitPts]				DielectricFitRI(FitCoefs,CalcTemp,AxisTemp)				DataLong[] 	= CalcTemp[p+gNFitPts*(gRealImag-1)]				AxisTemp[0,gNFitPts-1] 	= -AxisLong[gNFitPts-p]		AxisTemp[gNFitPts,] 		= AxisLong[p-gNFitPts]						if (0)	// This allows an abrupt step at 0		CalcTemp[0,gNFitPts-1] 	= -DataLong[gNFitPts-p]		CalcTemp[gNFitPts] 		= 0		CalcTemp[gNFitPts+1,] 	= DataLong[p-gNFitPts]		else	// This ais better		CalcTemp[0,gNFitPts-1] 	= -DataLong[gNFitPts-p] + DataLong[0]		CalcTemp[gNFitPts] 		= 0		CalcTemp[gNFitPts+1,] 	= DataLong[p-gNFitPts] - DataLong[0]		endif		SetScale/P x -4999.99,0.01,"", CalcTemp				HilbertTransform /DEST=DRS_Hilbert CalcTemp				TransformLong[] 	= -1 * DRS_Hilbert[p+gNFitPts]			SetDataFolder $OldDfEnd// From IXS routines, using 10000 ptsFunction KKTransform(epsRe)	Wave epsRe		WaveStats /Q/M=1 epsRe	if (V_numNaNs > 0)		print "please remove NaNs or Infs!"		return 0	endif		Duplicate /O epsRe, epsIm		Make /D/O/N=19999 epsReSym=0, epsImSym=0	SetScale/P x -999.9,0.1,"", epsReSym, epsImSym // So point 9999 is zero		// f(-x) = -f(x) 	// This correctly places both + and - waves on the right points	epsReSym[0,10000-1] 	= -epsRe[10000-p-1]	epsReSym[9999,] 		= epsRe[p-10000+1]		// Add a point to end as we need an even number of points	Redimension /N=20000 epsReSym		epsReSym[19999]=epsReSym[19998]	HilbertTransform /DEST=IXS4_Hilbert epsReSym	epsImSym 		= 1 - IXS4_Hilbert						// Point 9999 is zero for Hilbert		// New re-populate the half-space real function	epsIm[] = epsImSym[p+9999]		Duplicate /O epsRe, e1	Duplicate /O epsRe, e2 		e1 = epsRe/(epsRe^2+epsIm^2)	e2 = epsIm/(epsRe^2+epsIm^2)End// ***************************************************************************// **************** 			Displaying a statistic associated with the highlighted component// ***************************************************************************//Function CalculatePeakStatistic(Axis,Peak,Coefs,PeakType,StatType)//	Wave Axis, Peak, Coefs//	String PeakType, StatType////	Variable Statistic////	if (cmpstr("Area",StatType) == 0)//		FUNCREF UnityFunction PeakFunction = $(PeakType + "Area")//		Statistic = Coefs[0]//		//	elseif(cmpstr("FWHM",StatType) == 0)//		FUNCREF UnityFunction PeakFunction = $(PeakType + "FWHM")//		Statistic = PeakFunction(Coefs,0)//	//	elseif (StrSearch(StatType,"l.h.s",0) > -1)//	//	elseif (StrSearch(StatType,"r.h.s",0) > -1)//	//	endif//	//	return Statistic//End////Function SetPeakStatistic(ctrlName,varNum,varStr,varName) : SetVariableControl//	String ctrlName//	Variable varNum//	String varStr//	String varName//	//	SVAR StatList			= root:SPECTRA:Fitting:DRS:gPeakStatisticTypeList//		//	String DisplayName = "PeakStatisticDisplay" + num2str(ReturnLastNumber(ctrlName))//	String TitleStr = StringFromList(varNum,StatList)//	ValDisplay $DisplayName,title=TitleStr//	//	NVAR PeakStatistic	= $("root:SPECTRA:Fitting:DRS:gPeakStatistic"+num2str(ReturnLastNumber(ctrlName)))//	PeakStatistic = 0//End////Function SetCursorFitRange2(WindowName,FitFolder,DataNum)////	String WindowName, FitFolder////	Variable DataNum////	////	WAVE/T wFitDataList		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataList")////	WAVE wFitDataGroup		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataGroup")////	SVAR gSubDataType 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataType")////	NVAR gSubDataNum 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataNumber")////	SVAR gFitType 				= $(ParseFilePath(2,FitFolder,":",0,0) + "gFitType")////	////	String FitResultsFolder 		=  CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,gFitType)////	////	String DataFolderName, DataAndFolderName, DataName, AxisAndFolderName////	////	DataName 				= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data name")////	DataFolderName 			= DataOrSubsidiaryDataInfo(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,"Subsidiary data folder")////	AxisAndFolderName		= ParseFilePath(2,DataFolderName,":",0,0) + AxisNameFromDataName(DataName)////	WAVE Axis				= $(AxisAndFolderName)////////	GetAxis /Q/W=$WindowName bottom////	MakeVariableIfNeeded(FitResultsFolder+":gFitMinVal",V_min)////	MakeVariableIfNeeded(FitResultsFolder+":gFitMaxVal",V_max)////	NVAR gFitMinVal = $(FitResultsFolder+":gFitMinVal")////	NVAR gFitMaxVal = $(FitResultsFolder+":gFitMaxVal")////////	// AxisValueToPoint() can tolerate NANs better than BinarySearch()////	Variable MinAxisPt	= AxisValueToPoint(Axis, gFitMinVal)////	Variable MaxAxisPt	= AxisValueToPoint(Axis, gFitMaxVal)////	if (MinAxisPt == MaxAxisPt)////		MinAxisPt	= 0////		MaxAxisPt	= numpnts(Axis) - 1////	endif////	////	Cursor /W=$WindowName A $DataName MinAxisPt////	Cursor /W=$WindowName B $DataName MaxAxisPt////	////	return 0////End// root:SPECTRA:Fitting:BDS"////Function SaveCursorFitRange2(WindowName,FitFolder,DataNum)////	String WindowName, FitFolder////	Variable DataNum////	////	WAVE/T wFitDataList		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataList")////	WAVE wFitDataGroup		= $(ParseFilePath(2,FitFolder,":",0,0) + "wFitDataGroup")////	SVAR gSubDataType 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataType")////	NVAR gSubDataNum 		= $(ParseFilePath(2,FitFolder,":",0,0) + "gSubDataNumber")////	SVAR gFitType 				= $(ParseFilePath(2,FitFolder,":",0,0) + "gFitType")////	////	String FitResultsFolder 		= CheckFitResultsFolder(wFitDataList,wFitDataGroup,DataNum,gSubDataNum,gSubDataType,gFitType)////	////	// First, save the x-values ...////	Variable FitMinVal = min(GetCursorPositionOrValue(WindowName,"A",1),GetCursorPositionOrValue(WindowName,"B",1))////	Variable FitMaxVal = max(GetCursorPositionOrValue(WindowName,"A",1),GetCursorPositionOrValue(WindowName,"B",1))////	////	Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMinVal") = FitMinVal////	Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMaxVal") = FitMaxVal////	////	// ... then, save the x-points////	Variable FitMinPt = min(GetCursorPositionOrValue(WindowName,"A",0),GetCursorPositionOrValue(WindowName,"B",0))////	Variable FitMaxPt = max(GetCursorPositionOrValue(WindowName,"A",0),GetCursorPositionOrValue(WindowName,"B",0))////	////	Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMinPt") = FitMinPt////	Variable /G $(CheckFolderColon(FitResultsFolder) + "gFitMaxPt") = FitMaxPt////End