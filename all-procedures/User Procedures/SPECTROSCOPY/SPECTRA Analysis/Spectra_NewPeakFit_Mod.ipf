#pragma rtGlobals=1		// Use modern global access method.Function SpectraFitButton(ctrlname):ButtonControl	String ctrlname		MakeFittingFolder()		String FitType	Prompt FitType,"Fit options",popup,"Multipeak;EXAFS;"	DoPrompt "Choose the fit method.", FitType	if (V_flag == 0)		return 0	endif				if (cmpstr("Multipeak",FitType) == 0)		InitMultiPeakFit()		elseif (cmpstr("EXAFS",FitType) == 0)//		InitEXAFSFit()		endif	//	LaunchSpectraFit(FitType)End// ***************************************************************************// **************** 			INITIALIZATION: MAKE GLOBAL VARIABLES AND DATA FOLDERS// ***************************************************************************Function MakeFittingFolder()		WAVE /T wDataList	= root:SPECTRA:wDataList	WAVE wDataSel		= root:SPECTRA:wDataSel	String OldDF 		= getDataFolder(1)	String FittingFolder 	= "root:SPECTRA:Fitting:"		NewDataFolder/O/S $(FittingFolder)		// The list of data that can be plotted and fitted		Duplicate /O/T 	wDataList, wFitDataList		Duplicate /O 		wDataSel, 	wFitDataSel				wFitDataSel = 0			wFitDataSel[FindSelectedData(wDataSel)] = 1				// *** GENERAL PEAK FITTING WAVES AND VARIABLES//		Variable /G gFitType=FitType, gPrevFitDataNum, gSameFitRangeFlag=1		Variable /G gFitType=1, gPrevFitDataNum, gSameFitRangeFlag=1		Variable /G gCenter=0, gUseMaskFlag = 0, gAutoSaveCoefFlag, gShowErrorsFlag, gUseErrorsFlag		Variable /G gCoefs4EachTraceFlag, gMonitorCoef, gPrevCoef=0, gPresCoef				MakeVariableIfNeeded("gBGPolyOrder",4)		NVAR gBGPolyOrder = root:SPECTRA:Fitting:gBGPolyOrder				Variable /G gDBGPolyOrder 		= gBGPolyOrder		Variable /G gOldBGPolyOrder 	= gBGPolyOrder						// The list of coefficients for display, modifying and holding		Make /O/D/N=(3,gBGPolyOrder) wFitCoefsSel		Make /O/T/N=(3,gBGPolyOrder) wFitCoefsList		SetDimLabel 1, 0, $"\\f01Legend", wFitCoefsList		SetDimLabel 1, 1, $"\\f01Values", wFitCoefsList		SetDimLabel 1, 2, $"\\f01Hold", wFitCoefsList				MakeWaveIfNeeded("BGCoefs",gBGPolyOrder)		MakeWaveIfNeeded("HoldBGCoefs",gBGPolyOrder)		MakeWaveIfNeeded("Mask",0)		// Is this wave really needed?		MakeWaveIfNeeded("Polynomial",0)			SetDataFolder $(OldDF)EndFunction InitMultiPeakFit()			String FittingFolder 	= "root:SPECTRA:Fitting:"	String FitTypeFolder 	= "root:SPECTRA:Fitting:MultiPeak"		String OldDF 		= getDataFolder(1)	SetDataFolder $(FittingFolder)	NewDataFolder/O/S $(FitTypeFolder)			// By separating the DISPLAYED and ACTUAL variables, I can remember previously used configurations. 		MakeVariableIfNeeded("gFitPeakType1",1)		MakeVariableIfNeeded("gFitPeakType2",1)		MakeVariableIfNeeded("gFitStep1Type",1)		MakeVariableIfNeeded("gFitDoubletType1",1)		Variable /G gNumFitPeaks1, gNumFitPeaks2, gNumFitSteps1,gNumFitDoublets1		Variable /G gDFitPeaks1, gDFitPeaks2, gDFitSteps1,gDFitDoublets1,gPrevFitPeaks1, gPrevFitPeaks2, gPrevFitSteps1,gPrevFitDoublets1		Variable /G gSelectedPeaks1=0, gSelectedPeaks2=0, gSelectedStep1=0, gSelectedDoublets1=0				Variable /G gPeakStatisticType1, gPeakStatisticType2, gPeakStatistic1, gPeakStatistic2		String /G gPeakStatisticTypeList = "Area;FWHM;l.h.s 0%;l.h.s 50%;l.h.s. 90%;r.h.s 0%;r.h.s 50%;r.h.s 90%;"				String /G gFitPeakType1List="Gaussian;Lorentzian;"		String /G gFitPeakType2List="Voigt;"		String /G gFitStep1TypeList="Arc-Tangent;"		String /G gFitDoubletType1List="Voigt Doublet;"				// The full coefficients and legend		NVAR gBGPolyOrder 	= root:SPECTRA:Fitting:gBGPolyOrder		Variable NCoefs = CalculateNumFitCoefs(gBGPolyOrder,gNumFitPeaks1,gNumFitPeaks2,gNumFitSteps1,gNumFitDoublets1)		MakeWaveIfNeeded("FitCoefs",NCoefs)		MakeWaveIfNeeded("FitCoefsHold",NCoefs)		MakeTextWaveIfNeeded("FitCoefsLegend",NCoefs)		Make /O/T/N=(NCoefs) FitCoefsLegend				// Subsidiary coefficients		Make /O/D/N=(3*gNumFitPeaks1) P1Coefs, P1HoldCoefs		Make /O/D/N=(4*gNumFitPeaks2) P2Coefs, P2HoldCoefs		Make /O/D/N=(3*gNumFitSteps1) Stp1Coefs, Stp1HoldCoefs		Make /O/D/N=(7*gNumFitDoublets1) D1Coefs, D1HoldCoefs		Make /O/D/N=3 Coefs3		Make /O/D/N=4 Coefs4		Make /O/D/N=7 Coefs7			SetDataFolder $(OldDF)End//Function CloseFitPanel(ctrlName) : ButtonControl//	String ctrlName//	//	DoWindow/K SpectraFitPanel//EndFunction LaunchSpectraFit(FitType)	Variable FitType		DoWindow /F SpectraFitPanel	InitPeakFitSpectra(FitType)		WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	NVAR gPrevFitDataNum 	= root:SPECTRA:Fitting:gPrevFitDataNum	NVAR gFitType 			= root:SPECTRA:Fitting:gFitType	gFitType=FitType		Variable DataNum = FindSelectedData(wFitDataSel)	gPrevFitDataNum = DataNum		MakePlotDataFolders("SpectraFitPanel")		CreateFitSpectraPanel(FitType)		SetFitPlotFormat()		PlotDataInFitPanel("SpectraFitPanel")		TransferPlotPreferences("SpectraFitPanel",1)		//	AddPlotLabels("SpectraFitPanel")		NVAR gPlotXMin =  $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMin")	NVAR gPlotXMax =  $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMax")	//	if ((numtype(gPlotXMax) != 0) || (numtype(gPlotXMax) != 0))	if ((NVAR_Exists(gPlotXMax) == 0) || (NVAR_Exists(gPlotXMax) == 0))		SetAxis /A; DoUpdate		GetAxis /Q/W=SpectraFitPanel bottom		Variable /G $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMin") = V_min		Variable /G $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMax") = V_max	endif		NVAR gPlotXMin =  $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMin")	NVAR gPlotXMax =  $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMax")		ReScalePlotAxes("SpectraFitPanel","left",gPlotXMin, gPlotXMax,0,0,0,1)		SetCursorFitRange("SpectraFitPanel", DataNum)	//	if (FitType == 1)//		// Does this call work OK here?  NO!!! //		UpdateMultiPeakFitCoefficients(-1)//	endifEnd// ***************************************************************************// **************** 			PLOTTING// ***************************************************************************Function SelectDataToFit(ctrlName,row,col,event) : ListBoxControl	String ctrlName	Variable row	Variable col	Variable event	//1=mouse down, 2=up, 3=dbl click, 4=cell select with mouse or keys					//5=cell select with shift key, 6=begin edit, 7=end	NVAR gFitType 				= root:SPECTRA:Fitting:gFitType	NVAR gPrevFitDataNum 		= root:SPECTRA:Fitting:gPrevFitDataNum	NVAR gCoefs4EachTraceFlag 	= root:SPECTRA:Fitting:gCoefs4EachTraceFlag	NVAR gSameFitRangeFlag		= root:SPECTRA:Fitting:gSameFitRangeFlag		// Why do I have to force this? 	WAVE wFitDataSel		= root:SPECTRA:Fitting:wFitDataSel	wFitDataSel = 0	wFitDataSel[row] = 1		if ((event==4) || (event==5))		CheckDataFitFolder(row)				if (gSameFitRangeFlag == 1)			// This cunningly saves the cursor range from the about-to-be removed data ... 			// ... into the folder for the about-to-be plotted data			SaveCursorFitRange("SpectraFitPanel",row)		endif				PlotDataInFitPanel("SpectraFitPanel")				SetCursorFitRange("SpectraFitPanel", row)				ListBox FitDataListBox, selRow = row		//		if (SetCursorFitRange("SpectraFitPanel",row) == 0)//			// The fit range cursors do not lie within the axis range! //			gSameFitRangeFlag = 0//			CheckBox SameFitRangeCoefBox, win=SpectraFitPanel, value=gSameFitRangeFlag//		endif				if (gFitType == 1)			// Updates relevant for Multiple Peak Fitting			UpdateHighlightPeakControls(1)			LoadMultiPeakCoeffsFromFolder(row,gCoefs4EachTraceFlag)		elseif (gFitType == 2)		endif				gPrevFitDataNum = row	endifEndFunction PlotDataInFitPanel(WindowName)	String WindowName	String OldDF = getDataFolder(1)	NVAR gFitType 			= root:SPECTRA:Fitting:gFitType	WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	WAVE wFitDataGroup		= root:SPECTRA:Fitting:wFitDataGroup	WAVE/T wFitDataList		= root:SPECTRA:Fitting:wFitDataList		String AssocWavesFolder = ReturnFitFolderName(gFitType)	Variable PlotAllFlag = 0, AppendFlag = 0, ErrorsFlag = 1, RightFlag = 0, AssocWavesFlag = 1, PlotFlag		SetDataFolder root:SPECTRA:Fitting		PlotFlag = PlotDataInWindow(WindowName, wFitDataList, wFitDataSel, wFitDataGroup, "blue", PlotAllFlag, AppendFlag, RightFlag, ErrorsFlag,AssocWavesFlag,AssocWavesFolder)	SetDataFolder $(OldDF)		RemoveFromGraph /W=$WindowName /Z nullWave		NVAR gPlotXMin	= root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMin	NVAR gPlotXMax 	= root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMax		ReScalePlotAxes(WindowName,"left",gPlotXMin, gPlotXMax,0,0,0,1)EndFunction SetCoefToTrack(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		NVAR gMonitorCoef 	= root:SPECTRA:Fitting:gMonitorCoef	NVAR gPrevCoef		= root:SPECTRA:Fitting:gPrevCoef	WAVE FitCoefs		= root:SPECTRA:Fitting:MultiPeaks:FitCoefs		gPrevCoef = FitCoefs[gMonitorCoef]EndFunction SetCursorFitRange(WindowName, DataNum)	String WindowName	Variable DataNum		WAVE/T wFitDataList	= root:SPECTRA:Fitting:wFitDataList		String DataFolderName, FitFolderName, DataAndFolderName, DataName, AxisName, AxisAndFolderName		// Pointers to the data and fit DataFolders	DataFolderName 	= ReturnDataLoadFolder(DataNum)	FitFolderName 	= CheckDataFitFolder(DataNum)	DataName				= wFitDataList[DataNum]	DataAndFolderName 	= DataFolderName + ":" + wFitDataList[DataNum]	AxisName 				= AxisNameFromDataName(DataName)	AxisAndFolderName 	= AxisNameFromDataName(DataAndFolderName)		WAVE Axis		= $(AxisAndFolderName)		GetAxis /Q/W=$WindowName bottom	MakeVariableIfNeeded(FitFolderName+":gFitMinVal",V_min)	MakeVariableIfNeeded(FitFolderName+":gFitMaxVal",V_max)	NVAR gFitMinVal = $(FitFolderName+":gFitMinVal")	NVAR gFitMaxVal = $(FitFolderName+":gFitMaxVal")	// AxisValueToPoint() can tolerate NANs better than BinarySearch()	Variable MinAxisPt	= AxisValueToPoint(Axis, gFitMinVal)	Variable MaxAxisPt	= AxisValueToPoint(Axis, gFitMaxVal)		if (MinAxisPt == MaxAxisPt)		MinAxisPt	= 0		MaxAxisPt	= numpnts(Axis) - 1	endif		Cursor /W=$WindowName A $DataName MinAxisPt	Cursor /W=$WindowName B $DataName MaxAxisPt		return 0EndFunction SaveCursorFitRange(WindowName,DataNum)	String WindowName	Variable DataNum		String FitFolderName 	= CheckDataFitFolder(DataNum)	Variable FitMinVal = min(GetCursorPositionOrValue(WindowName,"A",1),GetCursorPositionOrValue(WindowName,"B",1))	Variable FitMaxVal = max(GetCursorPositionOrValue(WindowName,"A",1),GetCursorPositionOrValue(WindowName,"B",1))		Variable /G $(CheckFolderColon(FitFolderName) + "gFitMinVal") = FitMinVal	Variable /G $(CheckFolderColon(FitFolderName) + "gFitMaxVal") = FitMaxValEnd// This should be a GENERAL FIT FUNCTIONFunction SaveChiSquaredValues(DataNum,ChiSq,RChiSq)	Variable DataNum, ChiSq, RChiSq		// Pointers to the correct Fit folder	String FitFolderName 	= CheckDataFitFolder(DataNum)		String OldDF = getDataFolder(1)	SetDataFolder $(FitFolderName)		Variable /G gChiSq = ChiSq		Variable /G gRChiSq = RChiSq	SetDataFolder $(OldDF)End// This checks that the fit results folder is created, ...Function /T CheckDataFitFolder(DataNum)	Variable DataNum		NVAR gFitType 			= root:SPECTRA:Fitting:gFitType	WAVE/T wFitDataList		= root:SPECTRA:Fitting:wFitDataList	WAVE wFitDataGroup		= root:SPECTRA:Fitting:wFitDataGroup		String FitDataFolderName = "root:SPECTRA:Data:Load" + num2str(wFitDataGroup[DataNum])		if (DataFolderExists(FitDataFolderName) == 0)		Print " *** The data folder does not exist!"		return ""	else		FitDataFolderName += ":" + ReturnFitFolderName(gFitType)		if (DataFolderExists(FitDataFolderName) == 0)			NewDataFolder /O  $FitDataFolderName		endif						FitDataFolderName += ":" + SampleNameFromDataName(wFitDataList[DataNum])		if (DataFolderExists(FitDataFolderName) == 0)			NewDataFolder /O  $FitDataFolderName		endif	endif			// ... and also returns the full DataFolder name. 	return FitDataFolderNameEndFunction /T ReturnFitFolderName(FitType)	Variable FitType	if (FitType == 1)		return "MultiPeakFit"	elseif (FitType == 2)		return "UnitCellFit"	endifEndFunction SetFitPlotFormat()	ModifyGraph mirror(bottom)=2, mirror(left)=1End// ********************************************************// ******     TRIAL and FIT the data// ********************************************************Function FitSelectedData(ctrlName) : ButtonControl	String ctrlName		CalculateMultiPeakFit(1)EndFunction TrialSelectedData(ctrlName) : ButtonControl	String ctrlName		CalculateMultiPeakFit(0)EndFunction CalculateMultiPeakFit(FitFlag)	Variable FitFlag		WAVE Mask	 			= root:SPECTRA:Fitting:wMask	WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	WAVE /T wFitDataList	= root:SPECTRA:Fitting:wFitDataList	//	NVAR gMonitorCoef 	= root:SPECTRA:Fitting:gMonitorCoef	NVAR gPrevCoef		= root:SPECTRA:Fitting:gPrevCoef	NVAR gPresCoef	 	= root:SPECTRA:Fitting:gPresCoef	//	NVAR gCenter				= root:SPECTRA:Fitting:gCenter	NVAR gBGPolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	NVAR gUseMaskFlag		= root:SPECTRA:Fitting:gUseMaskFlag	NVAR gAutoSaveCoefFlag	= root:SPECTRA:Fitting:gAutoSaveCoefFlag	//	WAVE FitCoefs 			= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE FitCoefsHold 		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold		Variable DataNum	String DataFolderName, DataName, DataAndFolderName, AxisName	String FitFolderName, FitName, FitAndFolderName, ResidsName, ResidsAndFolderName		SetDataFolder root:	String OldDF = getDataFolder(1)		SetDataFolder $("root:SPECTRA:Fitting")		DataNum = FindSelectedData(wFitDataSel)		if (DataNum == -1)			return-1		endif				// Pointers to the data and fit DataFolders		DataFolderName 	= ReturnDataLoadFolder(DataNum)		FitFolderName 	= CheckDataFitFolder(DataNum)					Duplicate /O/D FitCoefs, $("root:SPECTRA:Fitting:MultiPeaks:FitCoefsSave")				DataName			 	= wFitDataList[DataNum]		DataAndFolderName 	= DataFolderName + ":" + wFitDataList[DataNum]		AxisName 				= AxisNameFromDataNAme(DataAndFolderName)		WAVE Data 			= $(DataAndFolderName)		WAVE Axis 			= $(AxisName)		 		FitName 					= FitNameFromDataName(DataName)		FitAndFolderName 		= FitFolderName + ":" + FitName		ResidsName 				= ResidsNameFromDataName(DataName)		ResidsAndFolderName 	= FitFolderName + ":" + ResidsName				// Record fit range details 		gCenter = mean(Axis)		SaveCursorFitRange("SpectraFitPanel",DataNum)		Variable MinCsr = min(GetCursorPositionOrValue("SpectraFitPanel","A",0),GetCursorPositionOrValue("SpectraFitPanel","B",0))		Variable MaxCsr = max(GetCursorPositionOrValue("SpectraFitPanel","A",0),GetCursorPositionOrValue("SpectraFitPanel","B",0))				Variable MinFit = min(GetCursorPositionOrValue("SpectraFitPanel","A",1),GetCursorPositionOrValue("SpectraFitPanel","B",1))		Variable MaxFit = max(GetCursorPositionOrValue("SpectraFitPanel","A",1),GetCursorPositionOrValue("SpectraFitPanel","B",1))				//	Remove fit components		String OldDF2 = getDataFolder(1)		SetDataFolder $(FitFolderName)			String DoNotDeleteList = FitName + ";" + ResidsName + ";"			KillSampleWavesNotInList(SampleNameFromDataName(DataName),DoNotDeleteList)		SetDataFolder $(OldDF2)				// Make the hold string		String HoldString=MakeHoldString(FitCoefsHold)				if (FitFlag == 1)			Variable V_FitOptions=4, V_FitQuitReason, V_FitError						Print ""			if ((waveexists(Mask)==1) && (gUseMaskFlag==1))				Print " Multi-peak fit to",DataName,"from",MinFit,"to",MaxFit,"using a Mask"				FuncFit /Q/W=0/N/H=HoldString MutiplePeaksFit FitCoefs Data[MinCsr,MaxCsr] /X=Axis /M=Mask			else				Print " Multi-peak fit to",DataName,"from",MinFit,"to",MaxFit				FuncFit /Q/W=0/N/H=HoldString MutiplePeaksFit FitCoefs Data[MinCsr,MaxCsr] /X=Axis			endif						Variable rchisq=V_chisq/(V_npnts-V_nterms+V_nheld)			FittingReport(V_FitError,V_FitQuitReason,V_chisq,rchisq,0)			SaveChiSquaredValues(DataNum,V_chisq,rchisq)						UpdateMultiPeakFitCoefficients(-1)			SaveMultiPeakFitCoefficients(DataNum,gAutoSaveCoefFlag,FitFlag,0,0)		else			SaveChiSquaredValues(DataNum,NAN,NAN)			SaveMultiPeakFitCoefficients(DataNum,0,0,0,0)		endif				// Create and fill the fit and residuals waves		DuplicateWaveIfNeeded(DataAndFolderName,FitAndFolderName)		WAVE Fit = $(FitAndFolderName)		MutiplePeaksFit(FitCoefs,Fit,Axis)				if (FitFlag == 1)			Fit[0,MinCsr-1]=NAN			Fit[MaxCsr+1,]=NAN		endif				DuplicateWaveIfNeeded(DataAndFolderName,ResidsAndFolderName)		WAVE Residuals = $(ResidsAndFolderName)		Residuals=Data - Fit		Residuals[0,MinCsr-1]=NAN		Residuals[MaxCsr+1,]=NAN				// Make components for both Fits and Trials		MutiplePeakComponents(DataName,DataFolderName,FitFolderName,MinCsr,MaxCsr,1,FitCoefs,Axis)					// This should take care of ALL the plotting requirements		UpdateHighlightPeakControls(1)		PlotDataInFitPanel("SpectraFitPanel")				SetCursorFitRange("SpectraFitPanel", DataNum)			// Record the change of a selected coefficient		gPrevCoef = gPresCoef		gPresCoef = FitCoefs[gMonitorCoef]		SetDataFolder $(OldDF)End// ********************************************************// ******     Calculates any number of peaks and steps to fit to the data// ********************************************************Function MutiplePeakComponents(DataName,DataFolderName,FitFolderName,MinCsr,MaxCsr,TruncFlag,FitCoefs,Axis)	String DataName,DataFolderName,FitFolderName	Variable MinCsr,MaxCsr,TruncFlag	Wave FitCoefs, Axis		WAVE BGCoefs				= root:SPECTRA:Fitting:BGCoefs	WAVE Coefs3				= root:SPECTRA:Fitting:MultiPeaks:Coefs3	WAVE Coefs4				= root:SPECTRA:Fitting:MultiPeaks:Coefs4	WAVE Coefs7				= root:SPECTRA:Fitting:MultiPeaks:Coefs7	//	NVAR gCenter				= root:SPECTRA:Fitting:gCenter	NVAR gBGPolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	NVAR gNumFitPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR gNumFitPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	NVAR gNumFitSteps1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	NVAR gNumFitDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1	//	NVAR gFitPeakType1		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	NVAR gFitPeakType2		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	NVAR gFitStep1Type		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	NVAR gFitDoubletType1 	= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1	Variable i, index, Mix	String DataAndFolderName, BGName, PeakName		DataAndFolderName 		= DataFolderName + ":" + DataName		String OldDF = getDataFolder(1)	SetDataFolder $(FitFolderName)		// Create the background polynomial		BGName = AnyNameFromDataName(DataName,"bg")		DuplicateWaveIfNeeded(DataAndFolderName,BGName)		WAVE BG = $BGName				BGCoefs[0,gBGPolyOrder-1]=FitCoefs[p]		BG[] = poly(BGCoefs,Axis-gCenter)		if (TruncFlag == 1)			BG[0,MinCsr-1]=NAN			BG[MaxCsr+1,]=NAN		endif			index = gBGPolyOrder		if (gNumFitPeaks1>0)			for (i=0;i<gNumFitPeaks1;i+=1)				// This works for any 3-parameter peak or component				Coefs3[] = FitCoefs[index + 3*i + p]								PeakName = AnyNameFromDataName(DataName,"p1n"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE Peak = $PeakName								if (gFitPeakType1==1)					// Gaussian peak					Peak= GaussianPeak(Coefs3,Axis)									elseif(gFitPeakType1==2)					// Lorentzian peak					Peak= LorentzianPeak(Coefs3,Axis)									elseif(gFitPeakType1==3)					// Lorentzian peak					Peak= LogNormalPDFCoeff(Coefs3,Axis)									endif				if (TruncFlag == 1)					Peak[0,MinCsr-1]=NAN					Peak[MaxCsr+1,]=NAN				endif			endfor		endif				index += 3*gNumFitPeaks1		if (gNumFitPeaks2>0)			for (i=0;i<gNumFitPeaks2;i+=1)				// This works for any 4-parameter peak or component				Coefs4[] = FitCoefs[index + 4*i + p]								PeakName = AnyNameFromDataName(DataName,"p2n"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE Peak = $PeakName								if (gFitPeakType2==1)					// Voigt peak - requires some more care with coefficient bounds during fitting					Coefs4[3] = ClipValue(FitCoefs[index + 4*i + 3],0.000001,0.999999)					FitCoefs[index + 4*i+3] = Coefs4[3]										Peak = 0					AddBenVoigtPeak(Peak,Axis,Coefs4[0],Coefs4[1],0,Coefs4[2],Coefs4[3])									elseif (gFitPeakType2==2)					// A/S Gaussian peak					Peak= ASGaussianPeak(Coefs4,Axis)									endif				if (TruncFlag == 1)					Peak[0,MinCsr-1]=NAN					Peak[MaxCsr+1,]=NAN				endif			endfor		endif				index += 4*gNumFitPeaks2		if (gNumFitSteps1>0)			for (i=0;i<gNumFitSteps1;i+=1)				// This works for any 3-parameter peak or component				Coefs3[] = FitCoefs[index + 3*i + p]								PeakName = AnyNameFromDataName(DataName,"stpn"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE Peak = $PeakName								if (gFitStep1Type==1)					// Arc-Tangent absorption threshold					Peak= ArcTanStep(Coefs3,Axis)									elseif (gFitStep1Type==2)					// Something else ...									endif				if (TruncFlag == 1)					Peak[0,MinCsr-1]=NAN					Peak[MaxCsr+1,]=NAN				endif			endfor		endif				index += 3*gNumFitSteps1		if (gNumFitDoublets1>0)			for (i=0;i<gNumFitDoublets1;i+=1)				// This works for any 7-parameter peak or component				Coefs7[] = FitCoefs[index + 7*i + p]				PeakName = AnyNameFromDataName(DataName,"Dbn"+num2str(i+1))				DuplicateWaveIfNeeded(DataAndFolderName,PeakName)				WAVE Peak = $PeakName								if (gFitDoubletType1==1)					// Voigt profile doublet					Peak = 0					AddBenVoigtDoublet(Peak,Axis,Coefs7[0],Coefs7[1],Coefs7[2],Coefs7[3],0,Coefs7[4],Coefs7[5],Coefs7[6])									elseif (gFitDoubletType1==2)					// Something else ...									endif				if (TruncFlag == 1)					Peak[0,MinCsr-1]=NAN					Peak[MaxCsr+1,]=NAN				endif			endfor		endif	SetDataFolder $(OldDF)EndFunction MutiplePeaksFit(w, ywv, xwv) : FitFunc	Wave w, ywv, xwv		WAVE BGCoefs				= root:SPECTRA:Fitting:BGCoefs	WAVE Coefs3				= root:SPECTRA:Fitting:MultiPeaks:Coefs3	WAVE Coefs4				= root:SPECTRA:Fitting:MultiPeaks:Coefs4	WAVE Coefs7				= root:SPECTRA:Fitting:MultiPeaks:Coefs7	//	NVAR gCenter				= root:SPECTRA:Fitting:gCenter	NVAR gBGPolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	NVAR gNumFitPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR gNumFitPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	NVAR gNumFitSteps1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	NVAR gNumFitDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1	//	NVAR gFitPeakType1		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	NVAR gFitPeakType2		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	NVAR gFitStep1Type		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	NVAR gFitDoubletType1 	= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1		Variable i, index, Mix		BGCoefs[0,gBGPolyOrder-1]=w[p]	ywv = poly(BGCoefs,(xwv-gCenter))		index = gBGPolyOrder	if (gNumFitPeaks1>0)		for (i=0;i<gNumFitPeaks1;i+=1)			// This works for any 3-parameter peak or component			Coefs3[] = abs(w[index + 3*i + p])						w[index + 3*i] = Coefs3[0]			w[index + 3*i+2] = Coefs3[2]						if (gFitPeakType1==1)				// Gaussian peak				ywv+= GaussianPeak(Coefs3,xwv)							elseif(gFitPeakType1==2)				// Lorentzian peak				ywv+= LorentzianPeak(Coefs3,xwv)							elseif(gFitPeakType1==3)				// Lorentzian peak				ywv+= LogNormalPDFCoeff(Coefs3,xwv)							endif		endfor		endif		index += 3*gNumFitPeaks1	if (gNumFitPeaks2>0)		for (i=0;i<gNumFitPeaks2;i+=1)			// This works for any 4-parameter peak or component			Coefs4[] = abs(w[index + 4*i + p])						w[index + 4*i] = Coefs4[0]			w[index + 4*i+2] = Coefs4[2]			w[index + 4*i+3] = Coefs4[3]						if (gFitPeakType2==1)				// Voigt peak - requires some more care with coefficient bounds during fitting				Coefs4[3] = ClipValue(w[index + 4*i+3],0.0000001,0.999999)				w[index + 4*i+3] = Coefs4[3]								AddBenVoigtPeak(ywv,xwv,Coefs4[0],Coefs4[1],0,Coefs4[2],Coefs4[3])							elseif (gFitPeakType2==2)				// A/S Gaussian peak				ywv+= ASGaussianPeak(Coefs4,xwv)			endif		endfor	endif		index += 4*gNumFitPeaks2	if (gNumFitSteps1>0)		for (i=0;i<gNumFitSteps1;i+=1)			// This works for any 3-parameter peak or component			Coefs3[] = abs(w[index + 3*i + p])						if (gFitStep1Type==1)				// Arc-Tangent absorption threshold				ywv+= ArcTanStep(Coefs3,xwv)			elseif (gFitStep1Type==2)				// Something else ...			endif		endfor		endif		index += 3*gNumFitSteps1	if (gNumFitDoublets1>0)		for (i=0;i<gNumFitDoublets1;i+=1)			// This works for any 7-parameter peak or component			Coefs7[] = abs(w[index + 7*i + p])						if (gFitDoubletType1==1)				// Voigt profile doublet - requires some more care with coefficient bounds during fitting				Coefs7[6] = mod(abs(w[index + 7*i+6]),1)				w[index + 7*i+6] = Coefs7[6]								AddBenVoigtDoublet(ywv,xwv,Coefs7[0],Coefs7[1],Coefs7[2],Coefs7[3],0,Coefs7[4],Coefs7[5],Coefs7[6])							elseif (gFitDoubletType1==2)				// Something else ...							endif		endfor	endifEnd// ***************************************************************************// **************** 			DATA & FIT SAVING AND LOADING// ***************************************************************************Function RecordDataAndFit(ctrlName) : ButtonControl	String ctrlName	String WindowName	String OldDF = getDataFolder(1)	NVAR gFitType 			= root:SPECTRA:Fitting:gFitType	WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	WAVE wFitDataGroup		= root:SPECTRA:Fitting:wFitDataGroup	WAVE/T wFitDataList		= root:SPECTRA:Fitting:wFitDataList		String FolderStem 		= "root:SPECTRA:Data:Load"	String DataName, AxisName, DataWavesFolder, OrigFolderName, SampleName, FitName, ResName, FitFolderName, DataList, AssocList, SaveList		Variable DataNum = FindSelectedData(wFitDataSel)	if (DataNum == -1)		return-1	endif		DataName				= wFitDataList[DataNum]	AxisName 				= AxisNameFromDataName(DataName)	SampleName 			= SampleNameFromDataName(DataName)	FitName				= SampleName + "_fit"	ResName				= SampleName + "_res"		DataWavesFolder		= FolderStem + num2str(wFitDataGroup[DataNum])	OrigFolderName 		= DataWavesFolder + ":Originals"	FitFolderName		 	= DataWavesFolder + ":" + ReturnFitFolderName(gFitType) + ":" + SampleName		WAVE Fit	= $(CheckFolderColon(FitFolderName) + FitName)	if (WaveExists(Fit) == 1)		NVAR gFitMinVal = $(FitFolderName+":gFitMinVal")		NVAR gFitMaxVal = $(FitFolderName+":gFitMaxVal")				WAVE 	Axis = $(CheckFolderColon(DataWavesFolder) + AxisName)		Variable MinAxisPt	= AxisValueToPoint(Axis, gFitMinVal)		Variable MaxAxisPt	= AxisValueToPoint(Axis, gFitMaxVal)			Fit[0,MinAxisPt-1] 	= NAN		Fit[MaxAxisPt+1,] 	= NAN			// First list the axis and data. 		DataList 	= AxisName+";"+ DataName+";"		DataList	= AddPrefixOrSuffixToListItems(DataList,DataWavesFolder+":","")				// Then list the associated fit waves		AssocList	= FitName+";"+ ResName+";"		AssocList 	+= ExclusiveWaveList(ExclusiveWaveList(FolderWaveList(FitFolderName,SampleName+"*",";","",-1,0),"_fit",";"),"_res",";")		AssocList	= AddPrefixOrSuffixToListItems(AssocList,FitFolderName+":","")				// Combine them		SaveList  	= DataList + AssocList				if (cmpstr(ctrlName,"SaveFitButton") == 0)			Save /B/C/O/P=home/T SaveList as SampleName+".itx"			Print " *** Saved the data and theory as", SampleName					// Save the fit coefficients, if a fitted wave exists			SaveMultiPeakFitCoefficients(DataNum,1,0,0,0)					elseif (cmpstr(ctrlName,"KeepFitButton") == 0)			DuplicateAllWavesInDataFolder(FitFolderName,DataWavesFolder,SampleName+"*")//			DuplicateAllWavesInDataFolder(FitFolderName,OrigFolderName,SampleName+"*")				endif	endifEnd// ***************************************************************************// **************** 			COEFFICIENT SAVING AND LOADING// ***************************************************************************Function FitCoefficientButtons(ctrlName) : ButtonControl	String ctrlName		WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	Variable DataNum = FindSelectedData(wFitDataSel)	if (DataNum == -1)		return-1	endif	if (cmpstr("SaveCoefsButton",ctrlName)==0)		SaveMultiPeakFitCoefficients(DataNum,1,0,0,0)	elseif (cmpstr("SaveNullCoefsButton",ctrlName)==0)		SaveMultiPeakFitCoefficients(DataNum,1,0,1,0)	elseif (cmpstr("SaveCoefsLegendButton",ctrlName)==0)		SaveMultiPeakFitCoefficients(DataNum,1,0,0,1)	elseif (cmpstr("LoadLastFitButton",ctrlName)==0)		LoadMultiPeakCoeffsFromFolder(DataNum,1)	elseif (cmpstr("LoadCoefsButton",ctrlName)==0)		if (LoadMultiPeakCoeffsFromFile() !=  -1)			LoadMultiPeakCoeffsFromFolder(DataNum,1)		endif	endifEndFunction SaveMultiPeakFitCoefficients(DataNum,SaveToDiskFlag,OverWriteFlag,NullFlag,LegendFlag)	Variable DataNum,SaveToDiskFlag, OverWriteFlag, NullFlag, LegendFlag	NVAR gBGPolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	//	NVAR gNumFitPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR gNumFitPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	NVAR gNumFitSteps1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	NVAR gNumFitDoublets1	= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1	//	NVAR gFitPeakType1		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	NVAR gFitPeakType2		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	NVAR gFitStep1Type		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	NVAR gFitDoubletType1 	= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1	//	WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	WAVE /T wFitDataList	= root:SPECTRA:Fitting:wFitDataList	//	WAVE FitCoefs 			= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE FitCoefsHold 		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold	WAVE /T FitCoefsLegend 	= root:SPECTRA:Fitting:MultiPeaks:FitCoefsLegend		Variable CoefStartIndex, CoefTotalLength	String FitFolderName, DataName, SampleName, SampleCoefsName, SampleCoefsSigmasName, SampleCoefsLegendName		DataName 			= wFitDataList[DataNum]	SampleName 		= SampleNameFromDataName(DataName)	FitFolderName 	= CheckDataFitFolder(DataNum)		// Use specific names for the saved coefficient waves	SampleCoefsName 			= "fc_" +SampleName	SampleCoefsSigmasName 	= "fs_" + SampleName	SampleCoefsLegendName  = "fL_" +SampleName		// ***** THIS MUST BE CHANGED IN THE CODE ****				CoefStartIndex = 14	// ************************************	CoefTotalLength = numpnts(FitCoefs) + CoefStartIndex		if (LegendFlag == 1)		// Save the LEGEND only		Make /T/O/N=(CoefTotalLength) $(CheckFolderColon(FitFolderName) + SampleCoefsLegendName)		WAVE /T CoefficientLegend	= $(CheckFolderColon(FitFolderName) + SampleCoefsLegendName)				CoefficientLegend = "_header_"		CoefficientLegend[CoefStartIndex,CoefTotalLength-1] = FitCoefsLegend[p-CoefStartIndex]				Duplicate /O/T CoefficientLegend, $SampleCoefsLegendName			if (OverWriteFlag == 1)			Save /O/C/P=home $SampleCoefsLegendName as SampleCoefsLegendName+".ibw"		else			Save /C/P=home $SampleCoefsLegendName as SampleCoefsLegendName+".ibw"		endif		return 1	endif			Make /O/N=(CoefTotalLength) $(CheckFolderColon(FitFolderName) + SampleCoefsName)	Make /O/N=(CoefTotalLength) $(CheckFolderColon(FitFolderName) + SampleCoefsSigmasName)		WAVE CoefficientValues	= $(CheckFolderColon(FitFolderName) + SampleCoefsName)	WAVE CoefficientSigmas	= $(CheckFolderColon(FitFolderName) + SampleCoefsSigmasName)		CoefficientValues = NAN	CoefficientSigmas=NAN	if (NullFlag != 1)		// COEFFICIENT HEADER STUFF		// The length of the header		CoefficientValues[0] = CoefStartIndex				// Include the fit range in real units		NVAR gFitMinVal = gFitMinVal		NVAR gFitMaxVal = gFitMaxVal		CoefficientValues[1] = gFitMinVal		CoefficientValues[2] = gFitMaxVal				// Include the chi-squares		NVAR gChiSq = gChiSq		NVAR gRChiSq = gRChiSq		CoefficientValues[3] = gChiSq		CoefficientValues[4] = gRChiSq				// Include the numbers of each type of fit component		CoefficientValues[5] = gBGPolyOrder		CoefficientValues[6] = gNumFitPeaks1		CoefficientValues[7] = gFitPeakType1		CoefficientValues[8] = gNumFitPeaks2		CoefficientValues[9] = gFitPeakType2		CoefficientValues[10] = gNumFitSteps1		CoefficientValues[11] = gFitStep1Type		CoefficientValues[12] = gNumFitDoublets1		CoefficientValues[13] = gFitDoubletType1					// Read in the actual fitted coefficients		CoefficientValues[CoefStartIndex,CoefTotalLength-1] = FitCoefs[p-CoefStartIndex]				WAVE W_sigma=$("root:SPECTRA:Fitting:W_sigma")		if (waveexists(W_sigma)==1)			CoefficientSigmas[CoefStartIndex,CoefTotalLength-1] = W_sigma[p-CoefStartIndex]		endif	endif		// Save the coefficients and errors to disk if requested	if (SaveToDiskFlag == 1)		if (OverWriteFlag == 1)			Save /O/C/P=home CoefficientValues as SampleCoefsName+".ibw"			Save /O/C/P=home CoefficientSigmas as SampleCoefsSigmasName+".ibw"		else			Save /C/P=home CoefficientValues as SampleCoefsName+".ibw"			Save /O/C/P=home CoefficientSigmas as SampleCoefsSigmasName+".ibw"		endif	endifEndFunction LoadMultiPeakCoeffsFromFile()	String OldDF = getDataFolder(1)	WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	WAVE /T wFitDataList	= root:SPECTRA:Fitting:wFitDataList		String FitFolderName, DataName, SampleName,  SampleCoefsName, SampleCoefsSigmasName	String message, CoefPath, CoefFile, PathAndFile, LoadedFileName	Variable FileRefNum, NChars, DataNum = FindSelectedData(wFitDataSel)	if (DataNum == -1)		return-1	endif		DataName 					= wFitDataList[DataNum]	FitFolderName 			= CheckDataFitFolder(DataNum)	SampleName 				= SampleNameFromDataName(DataName)	SampleCoefsName 			= "fc_" +SampleName	SampleCoefsSigmasName 	= "fs_" + SampleName			SetDataFolder $(FitFolderName)		message="Please locate the saved fit coefficients"		Open /D/R/T="IGBW"/M=message FileRefNum		if (strlen(S_fileName) == 0)			return -1		endif		PathAndFile = S_fileName				NChars = CountCharsInText(PathAndFile,":")		CoefFile = ReturnTextAfterNthChar(PathAndFile,":",1)		if (cmpstr(CoefFile[0,2],"fs_")==0)			if (cmpstr(CoefFile[0,2],"fs_")==0)				CoefFile = ReplaceString("fs_",CoefFile,"fc_")			else				DoAlert 0, " Please locate a coefficients file begining with 'fc_' or fs_' "				SetDataFolder $(OldDF)				return -1			endif		endif				CoefPath = ReturnTextBeforeNthChar(PathAndFile,":",NChars)		NewPath /C/O/Q Path2Coefs, CoefPath				Loadwave /A/Q/D/H/O/P=Path2Coefs CoefFile		if (V_flag<1)			SetDataFolder $(OldDF)			return -1		else			LoadedFileName = StringFromList(0,S_waveNames)			Duplicate /O/D $LoadedFileName, tempCoefs			KillWavesFromList(S_waveNames)			Duplicate /O/D tempCoefs, $SampleCoefsName			KillWaves /Z tempCoefs		endif				CoefFile = ReplaceString("fc_",CoefFile,"fs_")		Loadwave /A/Q/D/H/O/P=Path2Coefs CoefFile		if (V_flag<1)			SetDataFolder $(OldDF)			return 0		else			LoadedFileName = StringFromList(0,S_waveNames)			Duplicate /O/D $LoadedFileName, tempSigmas			KillWavesFromList(S_waveNames)			Duplicate /O/D tempSigmas, $SampleCoefsSigmasName			KillWaves /Z tempSigmas		endif	SetDataFolder $(OldDF)EndFunction LoadMultiPeakCoeffsFromFolder(DataNum, UseSavedFlag)	Variable DataNum, UseSavedFlag	//	WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	WAVE /T wFitDataList	= root:SPECTRA:Fitting:wFitDataList		String FitFolderName, DataName, SampleName, SampleCoefsName, SampleCoefsHoldsName, SampleCoefsSigmasName		if (UseSavedFlag == 0)		// Ensures that the current coefficients are copied to the selected Data Folder		SaveMultiPeakFitCoefficients(DataNum,0,0,0,0)	endif		// Load the coefficients saved in the folder for the selected data ...	DataName 			= wFitDataList[DataNum]	SampleName 		= SampleNameFromDataName(DataName)	FitFolderName 	= CheckDataFitFolder(DataNum)	SampleCoefsName 				= "fc_" +SampleName	SampleCoefsSigmasName 		= "fs_" + SampleName	WAVE CoefficientValues 		= $(FitFolderName+":"+SampleCoefsName)	WAVE CoefficientSigmas 		= $(FitFolderName+":"+SampleCoefsSigmasName)		// ... UNLESS they have not been created yet. In this case, save the displayed coefficients to this location first. 	if (WaveExists(CoefficientValues) == 0)		SaveMultiPeakFitCoefficients(DataNum,0,0,0,0)				WAVE CoefficientValues 		= $(FitFolderName+":"+SampleCoefsName)		WAVE CoefficientSigmas 		= $(FitFolderName+":"+SampleCoefsSigmasName)	endif		UpdateFitCoeffsFromWave(CoefficientValues,CoefficientSigmas)	FitCoefsToListBox()End		Function UpdateFitCoeffsFromWave(Coefs,CoefsSigmas)	Wave Coefs,CoefsSigmas		NVAR gBGPolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	NVAR gDBGPolyOrder		= root:SPECTRA:Fitting:gDBGPolyOrder	NVAR gPrevBGPolyOrder	= root:SPECTRA:Fitting:gOldBGPolyOrder	//	NVAR gNumFitPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR gNumFitPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	NVAR gNumFitSteps1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	NVAR gNumFitDoublets1	= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1	//	NVAR gPrevFitPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks1	NVAR gPrevFitPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks2	NVAR gPrevFitSteps1		= root:SPECTRA:Fitting:MultiPeaks:gPrevFitSteps1	NVAR gPrevFitDoublets1	= root:SPECTRA:Fitting:MultiPeaks:PrevgFitDoublets1	//	NVAR gDFitPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gDFitPeaks1	NVAR gDFitPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gDFitPeaks2	NVAR gDFitSteps1			= root:SPECTRA:Fitting:MultiPeaks:gDFitSteps1	NVAR gDFitDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gDFitDoublets1	//	NVAR gFitPeakType1		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	NVAR gFitPeakType2		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	NVAR gFitStep1Type		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	NVAR gFitDoubletType1 	= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1	//	WAVE FitCoefs 			= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE FitCoefsHold 		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold			Variable CoefStartIndex 	= Coefs[0]	Variable CoefTotalLength 	= numpnts(Coefs)				ReDimension /N=(CoefTotalLength - CoefStartIndex) FitCoefs, FitCoefsHold		// Fill the coefficients values wave	FitCoefs[] 		= Coefs[CoefStartIndex + p]		// Fill the coefficients holds wave	if (waveexists(CoefsSigmas) == 1)		FitCoefsHold [] 	= (CoefsSigmas[CoefStartIndex + p] == 0)	else		FitCoefsHold = 1	endif		// Update all the Fit global variables ... 	gBGPolyOrder			= Coefs[5]	gNumFitPeaks1		= Coefs[6]	gFitPeakType1		= Coefs[7]	gNumFitPeaks2		= Coefs[8]	gFitPeakType2 		= Coefs[9]	gNumFitSteps1 		= Coefs[10]	gFitStep1Type 		= Coefs[11]	gNumFitDoublets1 	= Coefs[12]	gFitDoubletType1 		= Coefs[13]		// ... and their associated displays. 	gDBGPolyOrder 		= gBGPolyOrder	gPrevBGPolyOrder 	= gBGPolyOrder	SetVariable SetFitBGPolyOrderVar,value= gDBGPolyOrder		gDFitPeaks1 			= gNumFitPeaks1	gPrevFitPeaks1		= gNumFitPeaks1	SetVariable SetNumFitPeaks1Var,value= gDFitPeaks1		gDFitPeaks2 			= gNumFitPeaks2	gPrevFitPeaks2		= gNumFitPeaks2	SetVariable SetNumFitPeaks2Var,value= gDFitPeaks2		gDFitSteps1 			= gNumFitSteps1	gPrevFitSteps1		= gNumFitSteps1	SetVariable SetNumFitStepsVar,value= gDFitSteps1		gDFitDoublets1		= gNumFitDoublets1	gPrevFitDoublets1	= gNumFitDoublets1	SetVariable SetNumFitDoublets1Var,value= gDFitDoublets1		UpdateMultiPeakFitCoefficients(-1)End// ***************************************************************************// **************** 			Highlighting components of the peak fit// ***************************************************************************Function UpdateHighlightPeakControls(NoneFlag)	Variable NoneFlag	NVAR gSelectedPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks1	NVAR gSelectedPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks2	NVAR gSelectedStep1			= root:SPECTRA:Fitting:MultiPeaks:gSelectedStep1	NVAR gSelectedDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gSelectedDoublets1	//	NVAR gNumFitPeaks1			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR gNumFitPeaks2			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	NVAR gNumFitSteps1			= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	NVAR gNumFitDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1		if (NoneFlag == 0)		gSelectedPeaks1 		= 0		gSelectedPeaks2 		= 0		gSelectedStep1 		= 0		gSelectedDoublets1 	= 0	endif		SetVariable HighlightPeaks1Var,limits={0,gNumFitPeaks1,1},win=SpectraFitPanel,value= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks1	SetVariable HighlightPeaks2Var,limits={0,gNumFitPeaks2,1},win=SpectraFitPanel,value= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks2	SetVariable HighlightSteps1Var,limits={0,gNumFitSteps1,1},win=SpectraFitPanel,value= root:SPECTRA:Fitting:MultiPeaks:gSelectedStep1	SetVariable HighlightDoublets1Var,limits={0,gNumFitDoublets1,1},win=SpectraFitPanel,value= root:SPECTRA:Fitting:MultiPeaks:gSelectedDoublets1EndFunction HighlightCmpnt(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		WAVE wFitDataSel			= root:SPECTRA:Fitting:wFitDataSel	WAVE /T wFitDataList	= root:SPECTRA:Fitting:wFitDataList		String DataName, SampleName, PeakType, CpntSuffix, CpntName		if (cmpstr(ctrlName,"HighlightPeaks1Var")==0)		NVAR Selected			= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks1		NVAR StatType			= root:SPECTRA:Fitting:MultiPeaks:gPeakStatisticType1		NVAR PeakStatistic	= root:SPECTRA:Fitting:MultiPeaks:gPeakStatistic1		NVAR FitPeakType		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1		SVAR FitPeakTypeList	= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1List		CpntSuffix = "_p1n"			elseif (cmpstr(ctrlName,"HighlightPeaks2Var")==0)		NVAR Selected			= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks2		NVAR StatType			= root:SPECTRA:Fitting:MultiPeaks:gPeakStatisticType2		NVAR PeakStatistic	= root:SPECTRA:Fitting:MultiPeaks:gPeakStatistic2		NVAR FitPeakType		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2		SVAR FitPeakTypeList	= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2List		CpntSuffix = "_p2n"			elseif (cmpstr(ctrlName,"HighlightSteps1Var")==0)		NVAR Selected			= root:SPECTRA:Fitting:MultiPeaks:gSelectedStep1		CpntSuffix = "_stpn"			elseif (cmpstr(ctrlName,"HighlightDoublets1Var")==0)		NVAR Selected		= root:SPECTRA:Fitting:MultiPeaks:gSelectedDoublets1		CpntSuffix = "_Dbn"	endif		Selected = varNum // redundant, actually		Variable DataNum = FindSelectedData(wFitDataSel)	if (DataNum == -1)		return-1	endif		DataName 		= wFitDataList[DataNum]	SampleName 	= SampleNameFromDataName(DataName)	CpntName 		= SampleName + CpntSuffix+num2str(varNum)		HighlightTrace("SpectraFitPanel",CpntName,"yellow",2)		if ((cmpstr("_p1n",CpntSuffix) == 0) || (cmpstr("_p2n",CpntSuffix) == 0))		WAVE Cpnt			= TraceNameToWaveRef("SpectraFitPanel",CpntName)		WAVE Axis			= XWaveRefFromTrace("SpectraFitPanel",CpntName)		SVAR StatList		= root:SPECTRA:Fitting:MultiPeaks:gPeakStatisticTypeList				PeakType = StringFromList(FitPeakType-1, FitPeakTypeList)				Make /D/O/N=3 tempCoefs		FillPeakCoefs(tempCoefs,PeakType,Selected)		PeakStatistic = CalculatePeakStatistic(Axis,Cpnt,tempCoefs,PeakType,StringFromList(StatType,StatList))		KillWaves /Z tempCoefs	endif		// Normal coloring for the preceding trace ... 	CpntName = SampleName + CpntSuffix+num2str(varNum+1)	HighlightTrace("SpectraFitPanel",CpntName,"green",1)	// ... and the next one. 	CpntName = SampleName + CpntSuffix+num2str(varNum-1)	HighlightTrace("SpectraFitPanel",CpntName,"green",1)	EndFunction DeleteHighlightedCmpnt(ctrlname):ButtonControl	String ctrlname		String NumPeaksCtrlName	if (cmpstr(ctrlName,"DeleteHighlightedPeak1Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1		NVAR DPeaks				= root:SPECTRA:Fitting:MultiPeaks:gDFitPeaks1		NVAR PeakToDelete		= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks1		NumPeaksCtrlName		= "SetNumFitPeaks1Var"	endif	if (cmpstr(ctrlName,"DeleteHighlightedPeak2Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2		NVAR DPeaks				= root:SPECTRA:Fitting:MultiPeaks:gDFitPeaks2		NVAR PeakToDelete		= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks2		NumPeaksCtrlName 		= "SetNumFitPeaks2Var"	endif	if (cmpstr(ctrlName,"DeleteHighlightedStep1Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1		NVAR DPeaks				= root:SPECTRA:Fitting:MultiPeaks:gDFitSteps1		NVAR PeakToDelete		= root:SPECTRA:Fitting:MultiPeaks:gSelectedStep1		NumPeaksCtrlName 		= "SetNumFitStepsVar"	endif	if (cmpstr(ctrlName,"DeleteHighlightedDblt1Button")==0)		NVAR NumPeaks			= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1		NVAR DPeaks				= root:SPECTRA:Fitting:MultiPeaks:gDFitDoublets1		NVAR PeakToDelete		= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks1		NumPeaksCtrlName 		= "SetNumFitDoublets1Var"	endif		if (PeakToDelete > 0)		NumPeaks -= 1		UpdateMultiPeakFitCoefficients(PeakToDelete)		DPeaks = NumPeaks		SetVariable $NumPeaksCtrlName, value=DPeaks		CalculateMultiPeakFit(0)	endifEnd// ***************************************************************************// **************** 			Displaying a statistic associated with the highlighted component// ***************************************************************************Function CalculatePeakStatistic(Axis,Peak,Coefs,PeakType,StatType)	Wave Axis, Peak, Coefs	String PeakType, StatType	Variable Statistic	if (cmpstr("Area",StatType) == 0)		FUNCREF UnityFunction PeakFunction = $(PeakType + "Area")		Statistic = Coefs[0]			elseif(cmpstr("FWHM",StatType) == 0)		FUNCREF UnityFunction PeakFunction = $(PeakType + "FWHM")		Statistic = PeakFunction(Coefs,0)		elseif (StrSearch(StatType,"l.h.s",0) > -1)		elseif (StrSearch(StatType,"r.h.s",0) > -1)		endif		return StatisticEndFunction SetPeakStatistic(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		SVAR StatList			= root:SPECTRA:Fitting:MultiPeaks:gPeakStatisticTypeList			String DisplayName = "PeakStatisticDisplay" + num2str(ReturnLastNumber(ctrlName))	String TitleStr = StringFromList(varNum,StatList)	ValDisplay $DisplayName,title=TitleStr		NVAR PeakStatistic	= $("root:SPECTRA:Fitting:MultiPeaks:gPeakStatistic"+num2str(ReturnLastNumber(ctrlName)))	PeakStatistic = 0End// ***************************************************************************// **************** 			UPDATING THE COEFFICIENTS ROUTINES// ***************************************************************************Function FittingCheckBoxProcs(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked		// These globals are the same for all Fitting approaches	if (cmpstr(ctrlName,"UseMaskWhenFittingBox")==0)		NVAR Flag = root:SPECTRA:Fitting:gUseMaskFlag	endif	if (cmpstr(ctrlName,"AutoSaveCoefBox")==0)		NVAR Flag = root:SPECTRA:Fitting:gAutoSaveCoefFlag	endif	if (cmpstr(ctrlName,"Coefs4EachTraceBox")==0)		NVAR Flag = root:SPECTRA:Fitting:gCoefs4EachTraceFlag	endif	if (cmpstr(ctrlName,"SameFitRangeCoefBox")==0)		NVAR Flag = root:SPECTRA:Fitting:gSameFitRangeFlag	endif	Flag = checkedEndFunction MultiPeakPopupProcs(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		if (cmpstr(ctrlName,"SelectPeakType1Menu")==0)		NVAR Type		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	endif	if (cmpstr(ctrlName,"SelectPeakType2Menu")==0)		NVAR Type		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	endif	if (cmpstr(ctrlName,"SelectStepTypeMenu")==0)		NVAR Type		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	endif	if (cmpstr(ctrlName,"SelectDoubletType1Menu")==0)		NVAR Type		= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1	endif	Type = popNum	UpdateMultiPeakFitCoefficients(-1)EndFunction MultiPeakSetVarProcs(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		if (cmpstr(ctrlName,"SetFitBGPolyOrderVar")==0)		NVAR OldNum			= root:SPECTRA:Fitting:gOldBGPolyOrder		NVAR NewNum		 	= root:SPECTRA:Fitting:gBGPolyOrder	endif	if (cmpstr(ctrlName,"SetNumFitPeaks1Var")==0)		NVAR OldNum			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks1		NVAR NewNum			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	endif	if (cmpstr(ctrlName,"SetNumFitPeaks2Var")==0)		NVAR OldNum			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks2		NVAR NewNum			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	endif	if (cmpstr(ctrlName,"SetNumFitStepsVar")==0)		NVAR OldNum			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitSteps1		NVAR NewNum			= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	endif	if (cmpstr(ctrlName,"SetNumFitDoublets1Var")==0)		NVAR OldNum			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitDoublets1		NVAR NewNum			= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1	endif	OldNum = NewNum	NewNum = varNum	UpdateMultiPeakFitCoefficients(-1)EndFunction CalculateNumFitCoefs(PolyOrder,NPeaks1,NPeaks2,NSteps,NDoublets1)	Variable PolyOrder,NPeaks1,NPeaks2,NSteps,NDoublets1			Variable NCoefs = PolyOrder		// Background polynomial	NCoefs += 3 * NPeaks1			// Type 1 peaks	NCoefs += 4 * NPeaks2			// Type 2 peaks	NCoefs += 3 * NSteps				// Absorption edges	NCoefs += 7 * NDoublets1		// Voigt-profile doublets		return NCoefsEndFunction TypeCoeffsFromFitCoeffs(PCoefs,PCoefsHold,FitCoefs,FitCoefsHold,NCoefs,NPeaks,Index,PeakToDelete)	Wave PCoefs,PCoefsHold, FitCoefs,FitCoefsHold	Variable Index, NCoefs, NPeaks, PeakToDelete		ReDimension /N=(NCoefs*NPeaks) PCoefs, PCoefsHold		Variable i=0, k=0	for (i=0;i<NPeaks;i+=1)		if ((i+1) == PeakToDelete)			// Skip a peak that is marked for deletion		else			PCoefs[NCoefs*k, NCoefs*k+(NCoefs-1)]		= FitCoefs[(Index+NCoefs*i) - NCoefs*k + p]			PCoefsHold[NCoefs*k, NCoefs*k+(NCoefs-1)]	= FitCoefsHold[(Index+NCoefs*i) - NCoefs*k + p]			k+=1		endif	endforEndFunction UpdateMultiPeakFitCoefficients(PeakToDelete)	Variable PeakToDelete	WAVE BGCoefs				= root:SPECTRA:Fitting:BGCoefs	WAVE HoldBGCoefs		= root:SPECTRA:Fitting:HoldBGCoefs	//	NVAR OldPolyOrder		= root:SPECTRA:Fitting:gOldBGPolyOrder	NVAR NewPolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	//	WAVE /T FitCoefsLegend	= root:SPECTRA:Fitting:MultiPeaks:FitCoefsLegend	WAVE FitCoefs				= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE FitCoefsHold		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold	//	WAVE P1Coefs				= root:SPECTRA:Fitting:MultiPeaks:P1Coefs	WAVE P1HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:P1HoldCoefs	WAVE P2Coefs				= root:SPECTRA:Fitting:MultiPeaks:P2Coefs	WAVE P2HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:P2HoldCoefs	WAVE D1Coefs				= root:SPECTRA:Fitting:MultiPeaks:D1Coefs	WAVE D1HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:D1HoldCoefs	WAVE Stp1Coefs			= root:SPECTRA:Fitting:MultiPeaks:Stp1Coefs	WAVE Stp1HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:Stp1HoldCoefs	//	NVAR OldNPeaks1			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks1	NVAR NewNPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR OldNPeaks2			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks2	NVAR NewNPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	NVAR OldNSteps			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitSteps1	NVAR NewNSteps			= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	//	NVAR OldNDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gPrevFitDoublets1	NVAR NewNDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1	//	NVAR gFitPeakType1		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	SVAR gFitPeakType1List	= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1List	NVAR gFitPeakType2		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	SVAR gFitPeakType2List	= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2List	NVAR gFitStep1Type		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	SVAR gFitStep1TypeList	= root:SPECTRA:Fitting:MultiPeaks:gFitStep1TypeList	//	NVAR gFitDoubletType1		= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1	SVAR gFitDoubletType1List	= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1List		Variable i, j, k, Index, OldNCoefs, NewNCoefs,DeleteFlag, DeleteNum	String CoefName, PeakType, StepType		// Read the existing coefficients into waves for each peak/edge types	// ------------------------------------------------	// Background polynomial	ReDimension /N=(OldPolyOrder) BGCoefs, HoldBGCoefs		i=0	do		BGCoefs[i]=FitCoefs[i]		HoldBGCoefs[i]=FitCoefsHold[i]		i+=1	while(i<OldPolyOrder)		// Type 1 Peaks	DeleteFlag=0	Index = OldPolyOrder	if (OldNPeaks1>0)			DeleteNum = (NewNPeaks1<OldNPeaks1) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(P1Coefs,P1HoldCoefs,FitCoefs,FitCoefsHold,3,NewNPeaks1,Index,DeleteNum)	endif		// Type 2 Peaks	DeleteFlag=0	Index += (3* OldNPeaks1)	if (OldNPeaks2>0)			DeleteNum = (NewNPeaks2<OldNPeaks2) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(P2Coefs,P2HoldCoefs,FitCoefs,FitCoefsHold,4,NewNPeaks2,Index,DeleteNum)	endif		// Steps	DeleteFlag=0	Index += (4*OldNPeaks2)	if (OldNSteps>0)			DeleteNum = (NewNSteps<OldNSteps) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(Stp1Coefs,Stp1HoldCoefs,FitCoefs,FitCoefsHold,3,NewNSteps,Index,DeleteNum)	endif		// Type 1 Doublets	DeleteFlag=0	Index +=  (3*OldNSteps)	if (OldNDoublets1>0)			DeleteNum = (NewNDoublets1<OldNDoublets1) ? PeakToDelete : -1				TypeCoeffsFromFitCoeffs(D1Coefs,D1HoldCoefs,FitCoefs,FitCoefsHold,7,NewNDoublets1,Index,DeleteNum)	endif		// Count the total number of fit coefficients required. 	NewNCoefs = CalculateNumFitCoefs(NewPolyOrder,NewNPeaks1,NewNPeaks2,NewNSteps,NewNDoublets1)	ReDimension /N=(NewNCoefs) FitCoefs, FitCoefsHold, FitCoefsLegend		// Read previous values back into the FitCoefs	// --------------------------------	// Background polynomial	i=0	do		ReDimension /N=(NewPolyOrder) BGCoefs, HoldBGCoefs		FitCoefs[i]=BGCoefs[i]		FitCoefsHold[i]=HoldBGCoefs[i]		FitCoefsLegend[i] = "p"+num2str(i)		i+=1	while(i<NewPolyOrder)	i-=1	if (NewPolyOrder>OldPolyOrder)		// Make a guess for the new, unvalued coefficient		FitCoefs[i]=BGCoefs[i-1]/10	endif		// Type 1 Peaks	Index = NewPolyOrder	if (NewNPeaks1>0)				PeakType = StringFromList(gFitPeakType1-1, gFitPeakType1List)				FitCoeffsFromTypeCoeffs(P1Coefs,P1HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,3,NewNPeaks1,Index,PeakType)			if (NewNPeaks1>OldNPeaks1)			if (OldNPeaks1>0)				// A new peak of type 1, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+3*i,Index+3*i+2]=FitCoefs[3*j-3*i+p]				FitCoefsHold[Index+3*i,Index+3*i+2]=FitCoefsHold[3*j-3*i+p]								// ... but add 2 x previous width to the position					FitCoefs[Index+3*i+1]=FitCoefs[Index+3*j+1] + 2*FitCoefs[Index+3*j+2]			else				// The first peak of type 1 ... some default coeffs. 				FitCoefs[Index,Index+2] = 1				FitCoefsHold[Index,Index+2] = 0			endif		endif	endif		// Type 2 Peaks	Index += (3*NewNPeaks1)	if (NewNPeaks2>0)				PeakType = StringFromList(gFitPeakType2-1, gFitPeakType2List)				FitCoeffsFromTypeCoeffs(P2Coefs,P2HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,4,NewNPeaks2,Index,PeakType)				if (NewNPeaks2>OldNPeaks2)			if (OldNPeaks2>0)				// A new peak of type 2, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+4*i,Index+4*i+3]=FitCoefs[4*j-4*i+p]				FitCoefsHold[Index+4*i,Index+4*i+3]=FitCoefsHold[4*j-4*i+p]								// ... but add 2 x previous width to the position					FitCoefs[Index+4*i+1]=FitCoefs[Index+4*j+1] + 2*FitCoefs[Index+4*j+2]			else				// The first peak of type 2 ... some default coeffs. 				FitCoefs[Index,Index+3] = 0.5				FitCoefsHold[Index,Index+3] = 0				// Automatically fix the Voigt width and shape parameters for any new peak				FitCoefsHold[Index+2] = 1				FitCoefsHold[Index+3] = 1			endif		endif	endif		// Steps	Index += (4*NewNPeaks2)	if (NewNSteps>0)				StepType = StringFromList(gFitStep1Type-1, gFitStep1TypeList)				FitCoeffsFromTypeCoeffs(Stp1Coefs,Stp1HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,3,NewNSteps,Index,StepType)		if (NewNSteps>OldNSteps)			if (OldNSteps>0)				// A new peak of type 1, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+3*i,Index+3*i+2]=FitCoefs[3*j-3*i+p]				FitCoefsHold[Index+3*i,Index+3*i+2]=FitCoefsHold[3*j-3*i+p]								// ... but add 2 x previous width to the position					FitCoefs[Index+3*i+1]=FitCoefs[Index+3*j+1] + 2*FitCoefs[Index+3*j+2]			else				// The first peak of type 1 ... some default coeffs. 				FitCoefs[Index,Index+2] = 1				FitCoefsHold[Index,Index+2] = 0			endif		endif	endif		// Type 1 Doublets	Index += (3*NewNSteps)	if (NewNDoublets1>0)				PeakType = StringFromList(gFitDoubletType1-1, gFitDoubletType1List)				FitCoeffsFromTypeCoeffs(D1Coefs,D1HoldCoefs,FitCoefs,FitCoefsHold,FitCoefsLegend,7,NewNDoublets1,Index,PeakType)		if (NewNDoublets1>OldNDoublets1)			if (OldNDoublets1>0)				// A new peak of doublet type 1, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+7*i,Index+7*i+6]=FitCoefs[7*j-7*i+p]				FitCoefsHold[Index+7*i,Index+7*i+6]=FitCoefsHold[7*j-7*i+p]								// ... but add 0.75 x previous splitting to the position					FitCoefs[Index+7*i+2]=FitCoefs[Index+7*j+2] + 0.75*FitCoefs[Index+7*j+3]			else				// The first doublet of type 2 ... some default coeffs??				FitCoefs[Index,Index+6] = 1				FitCoefsHold[Index,Index+6] = 1			endif		endif	endif		// Update the previous peak and step numbers. 	OldPolyOrder 		= NewPolyOrder	OldNPeaks1 		= NewNPeaks1	OldNPeaks2 		= NewNPeaks2	OldNSteps 			= NewNSteps	OldNDoublets1 	= NewNDoublets1		UpdateHighlightPeakControls(0)	FitCoefsToListBox()EndFunction FitCoeffsFromTypeCoeffs(PCoefs,PCoefsHold,FitCoefs,FitCoefsHold,FitCoefsLegend,NCoefs,NPeaks,Index,PeakType)	Wave PCoefs,PCoefsHold, FitCoefs,FitCoefsHold	Wave /T FitCoefsLegend	Variable Index, NCoefs, NPeaks	String PeakType		ReDimension /N=(NCoefs*NPeaks) PCoefs, PCoefsHold		Variable i, j	for (i=0;i<NPeaks;i+=1)		for (j=0;j<NCoefs;j+=1)			FitCoefs[Index+NCoefs*i+j]		= PCoefs[NCoefs*i+j]			FitCoefsHold[Index+NCoefs*i+j]	= PCoefsHold[NCoefs*i+j]			//			FitCoefsLegend[Index+NCoefs*i + j] 	= ReturnPeakLegend(PeakType,j)		endfor	endforEndFunction FillPeakCoefs(PCoefs,PeakType,PeakNum)	Wave PCoefs	String PeakType	Variable PeakNum		WAVE FitCoefs			= root:SPECTRA:Fitting:MultiPeaks:FitCoefs		NVAR PolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	NVAR NPeaks1			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR NPeaks2			= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR NSteps			= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	NVAR NDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1		Variable NPeakCoefs, Index		strswitch (PeakType)		case "Gaussian":			NPeakCoefs = 3			Index = PolyOrder			break		case "Lorentzian":			NPeakCoefs = 3			Index = PolyOrder			break		case "Voigt":			NPeakCoefs = 4			Index = PolyOrder + 3*NPeaks1			break		case "Arc-Tangent":			NPeakCoefs = 3			Index = PolyOrder + 3*NPeaks1 + 3*NPeaks2			break		case "Voigt Doublet":			NPeakCoefs = 7			Index = PolyOrder + 3*NPeaks1 + 3*NPeaks2 + 3*NSteps			break		default:			NPeakCoefs = 3			break	endswitch		ReDimension /N=(NPeakCoefs) PCoefs		PCoefs[] = FitCoefs[Index + NPeakCoefs*(PeakNum-1) + p]EndFunction /T ReturnPeakLegend(PeakType,Index)	String PeakType	Variable Index		String LegendStr	strswitch (PeakType)		case "Gaussian":			LegendStr = StringFromList(Index," Amplitude;        Position;            Width;")			break		case "Lorentzian":			LegendStr = StringFromList(Index," Amplitude;        Position;            Width;")			break		case "Voigt":			LegendStr = StringFromList(Index," Amplitude;        Position;            Width;          Mixing;")			break		case "Arc-Tangent":			LegendStr = StringFromList(Index," Amplitude;        Position;            Width;")			break		case "Voigt Doublet":			LegendStr = StringFromList(Index," Amplitude;            Ampl ratio;       1st peak posn;               Splitting;      1st peak width;             Width ratio;                  Mixing;")			break		default:			LegendStr = ""			break	endswitch		if (Index == 0)		LegendStr = PeakType + LegendStr	endif		return LegendStrEnd// ***************************************************************************// **************** 			INTERACTIVE COEFFICIENT LISTBOX// ***************************************************************************Function ModifyOrHoldFitCoefs(ctrlName,row,col,event) : ListBoxControl	String ctrlName	Variable row	Variable col	Variable event	//1=mouse down, 2=up, 3=dbl click, 4=cell select with mouse or keys					//5=cell select with shift key, 6=begin edit, 7=end		if ((col == 1) && (event==7))		// Finish editing the cell. Check for numeric input??		// Update all coefficients and holds		FitCoefsFromListBox()			elseif ((col == 2) && (event == 2))		// First ensure the clicked CheckBox is no longer selected		WAVE wFitCoefsSel		= root:SPECTRA:Fitting:wFitCoefsSel		wFitCoefsSel[row][col] 	= ClearBit(wFitCoefsSel[row][col],0)				// Update all coefficients and holds		FitCoefsFromListBox()	endifEndFunction HoldingFitCoefs(ctrlname):ButtonControl	String ctrlname		WAVE wFitCoefsSel			= root:SPECTRA:Fitting:wFitCoefsSel	WAVE HoldFitCoefs			= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold		if (cmpstr(ctrlName,"HoldAllFitCoefsButton")==0)		wFitCoefsSel[][2] = SetBit(wFitCoefsSel[p][2],4)		HoldFitCoefs[] = 1	endif	if (cmpstr(ctrlName,"HoldNoFitCoefsButton")==0)		wFitCoefsSel[][2] = ClearBit(wFitCoefsSel[p][2],4)		HoldFitCoefs[] = 0	endifEndFunction FitCoefsToListBox()	WAVE /T wFitCoefsList		= root:SPECTRA:Fitting:wFitCoefsList	WAVE wFitCoefsSel			= root:SPECTRA:Fitting:wFitCoefsSel	//	WAVE /T FitCoefsLegend		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsLegend	WAVE FitCoefs					= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE FitCoefsHold			= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold		Variable NCoefs = numpnts(FitCoefs)	ReDimension /N=(NCoefs,3) wFitCoefsList, wFitCoefsSel	wFitCoefsList[][0] = FitCoefsLegend[p]	wFitCoefsList[][1] = num2str(FitCoefs[p])		// Ensure the coefficients are always user-editable ...	wFitCoefsSel[][1] = SetBit(wFitCoefsSel[p][1],1)		// Make the hold values checkboxes ... 	wFitCoefsSel[][2]	 = SetBit(wFitCoefsSel[p][2],5)	// ... and update their value. 	wFitCoefsSel[][2]	 = (FitCoefsHold[p] == 1) ? SetBit(wFitCoefsSel[p][2],4) : ClearBit(wFitCoefsSel[p][2],4)	EndFunction FitCoefsFromListBox()	WAVE /T wFitCoefsList	= root:SPECTRA:Fitting:wFitCoefsList	WAVE wFitCoefsSel		= root:SPECTRA:Fitting:wFitCoefsSel	//	WAVE FitCoefs				= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE HoldFitCoefs		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold		FitCoefs[] = str2num(wFitCoefsList[p][1])		// A logical expression to convert the ListBoxCheckVar to 1 or 0	HoldFitCoefs[] = ((wFitCoefsSel[p][2] & 2^4) != 0)EndFunction RecallFitCoefsSave(ctrlName) : ButtonControl	String ctrlName		WAVE FitCoefs 			= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE FitCoefsSave 		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsSave		if (waveexists(FitCoefsSave)==1)		if (numpnts(FitCoefs) == numpnts(FitCoefsSave))			FitCoefs=FitCoefsSave			FitCoefsToListBox()		endif	endifEnd// ***************************************************************************// **************** 			CREATE THE INTERACTIVE PANEL FOR FITTING// ***************************************************************************Function CreateFitSpectraPanel(FitType)	Variable FitType		WAVE nullWave 	= root:SPECTRA:Plotting:nullWave	Display /W=(196,65,993,838)/K=2  nullWave  as "Spectrum Fitting Panel"	DoWindow/C SpectraFitPanel	CheckWindowPosition("SpectraFitPanel",196,65,993,838)	 	// *************************************************************	// ****			The MAIN PANEL CONTROLS	// *************************************************************		ControlBar 300		// The List of the DATA to plot and fit	ListBox FitDataListBox,mode= 1,pos={4,40},size={127,254}, proc=SelectDataToFit	ListBox FitDataListBox,listWave=root:SPECTRA:Fitting:wFitDataList//	ListBox FitDataListBox,selWave=root:SPECTRA:Fitting:wFitDataSel	// This is NOT used for mode=1 ListBoxes		GetAxis /Q/W=SpectraFitPanel bottom	Variable XInc = (V_max - V_min)/200		SetVariable AXES_MinXAxisSetVar,limits={-Inf,Inf,XInc},pos={676,222},size={105,20},fsize=14,proc=VaryPlotAxisRange,title="Min",value= $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMin")	SetVariable AXES_MaxXAxisSetVar,limits={-Inf,Inf,XInc},pos={676,261},size={105,20},fsize=14,proc=VaryPlotAxisRange,title="Max",value= $("root:SPECTRA:Plotting:SpectraFitPanel:gPlotXMax")		// The List of the COEFFICIENTS	ListBox FitCoefsListBox,mode= 5,pos={140,40},size={260,254}, widths={130,70,35}	ListBox FitCoefsListBox, editstyle=1, fSize=12, proc=ModifyOrHoldFitCoefs	ListBox FitCoefsListBox,listWave=root:SPECTRA:Fitting:wFitCoefsList	ListBox FitCoefsListBox,selWave=root:SPECTRA:Fitting:wFitCoefsSel		// General Fit Controls	// -------------------------------------- Errors Options	NVAR gShowErrorsFlag = root:SPECTRA:Fitting:gShowErrorsFlag	CheckBox ShowErrorsCoefBox,pos={410,35},size={112,14},proc=FittingCheckBoxProcs,title="Show &",value= gShowErrorsFlag	NVAR gUseErrorsFlag = root:SPECTRA:Fitting:gUseErrorsFlag	CheckBox UseErrorsCoefBox,pos={468,35},size={112,14},proc=FittingCheckBoxProcs,title="use errors",value= gUseErrorsFlag	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Masking Options	NVAR gUseMaskFlag = root:SPECTRA:Fitting:gUseMaskFlag	CheckBox MASK1_PLOT_MaskCheck,pos={410,8},size={44,14},proc=MaskCheckProc,title="Use mask", value= gUseMaskFlag		Button MASK2_PLOT_EditMaskButton,pos={562,224},proc=MaskRegionButtons,size={50,18},title="Edit Mask", disable=1	Button MASK3_PLOT_UpdateMaskButton,pos={562,224},proc=MaskRegionButtons,size={50,18},title="Update", disable=1	Button MASK3_PLOT_MaskButton,pos={548,246},proc=MaskRegionButtons,size={40,18},title="Mask", disable=1	Button MASK3_PLOT_UnMaskButton,pos={599,246},proc=MaskRegionButtons,size={60,18},title="Unmask", disable=1	Button MASK3_PLOT_StoreMaskButton,pos={599,246},proc=MaskRegionButtons,size={60,18},title="Store", disable=1	Button MASK3_PLOT_LoadMaskButton,pos={599,246},proc=MaskRegionButtons,size={60,18},title="Load", disable=1		// --------------------------------------------------------------------------------------------------		// -------------------------------------- Automatic coefficient saving	NVAR gAutoSaveCoefFlag = root:SPECTRA:Fitting:gAutoSaveCoefFlag	CheckBox AutoSaveCoefBox,pos={410,21},size={44,14},proc=FittingCheckBoxProcs,title="Autosave coeficients",value=gAutoSaveCoefFlag	// --------------------------------------------------------------------------------------------------		// -------------------------------------- Fixing or changing the fit range for each trace	NVAR gSameFitRangeFlag = root:SPECTRA:Fitting:gSameFitRangeFlag	CheckBox SameFitRangeCoefBox,pos={410,63},size={44,14},proc=FittingCheckBoxProcs,title="Same fit range",value=gSameFitRangeFlag	// --------------------------------------------------------------------------------------------------		// -------------------------------------- Display Coefficient changes	NVAR gCoefs4EachTraceFlag = root:SPECTRA:Fitting:gCoefs4EachTraceFlag	CheckBox Coefs4EachTraceBox,pos={410,49},size={44,14},proc=FittingCheckBoxProcs,title="Coeffs 4 each trace",value=gCoefs4EachTraceFlag	NVAR gMonitorCoef 	= root:SPECTRA:Fitting:gMonitorCoef	SetVariable MonitorCoef,pos={414,156},size={123,15},title="Track coefficient #",value= gMonitorCoef,proc=SetCoefToTrack	ValDisplay LastCoefDisplay,pos={433,172},size={104,14},title="Last",value= #"root:SPECTRA:Fitting:gPrevCoef"	ValDisplay NewCoefDisplay,pos={414,189},size={123,14},title="Current ",value= #"root:SPECTRA:Fitting:gPresCoef"	// --------------------------------------------------------------------------------------------------		//	Button GuessFitCoefsButton,pos={769,153},proc=GuessFitCoefs,size={120,20},title="Guess Coefficients"//	Button ExportViewerPlotbutton,pos={14,282},size={50,20},proc=ExportTopPlot,title="Export"	Button CloseFitPlotButton,pos={5,10},size={50,20},proc=CloseFitPanel,title="Close"		if (FitType == 1)		AddMultiPeakFitControls()	elseif (FitType == 2)		AddXRDFitControls()	endifEnd// Add the controls for Multiple Peak FittingFunction AddMultiPeakFitControls()				Button HoldAllFitCoefsButton,pos={177,15},size={70,20},proc=HoldingFitCoefs,title="Hold All"	Button HoldNoFitCoefsButton,pos={290,15},size={70,20},proc=HoldingFitCoefs,title="Hold None"		Button TrialDataButton,pos={412,110},fColor=(32768,40777,65535),proc=TrialSelectedData,size={50,20},title="Trial"	Button FitDataButton,pos={412,133},fColor=(65535,32768,32768),proc=FitSelectedData,size={50,20},title="Fit"	Button LastFitButton,pos={482,133},size={50,20},proc=RecallFitCoefsSave,title="Undo"		Button SaveFitButton,pos={482,110},size={50,20},proc=RecordDataAndFit,title="Save"	Button KeepFitButton,pos={482,110},size={50,20},proc=RecordDataAndFit,title="Keep"	//		Button SaveCoefsButton,pos={412,207},size={120,20},proc=FitCoefficientButtons,title="Save Coefficients"		Button LoadCoefsButton,pos={412,229},size={120,20},proc=FitCoefficientButtons,title="Load Coefficients"	Button LoadLastFitButton,pos={412,251},size={120,20},proc=FitCoefficientButtons,title="Last Saved Coefs"	Button SaveNullCoefsButton,pos={412,273},size={40,20},proc=FitCoefficientButtons,title="Null"		Button SaveCoefsLegendButton,pos={462,273},size={70,20},proc=FitCoefficientButtons,title="Legend"	// -------------------------------------- Background Polynomial	SetVariable SetFitBGPolyOrderVar,pos={579,5},size={180,15},proc=MultiPeakSetVarProcs,title="Background polynomial"	SetVariable SetFitBGPolyOrderVar,fsize=12,limits={1,20,1},value= root:SPECTRA:Fitting:gDBGPolyOrder	// --------------------------------------------------------------------------------------------------			GroupBox Peak1Group,pos={542,22},size={122,100}, fColor=(52428,1,1), title="3-parameter peaks"	GroupBox Peak2Group,pos={666,22},size={122,100}, fColor=(52428,1,1), title="4-parameter peaks"	GroupBox Step1Group,pos={542,122},size={122,85}, fColor=(52428,1,1), title="3-parameter fns"	GroupBox Peak1Gro02,pos={666,122},size={122,85}, fColor=(52428,1,1), title="compound peaks"	GroupBox Doublet1Group,pos={542,207},size={122,85}, fColor=(52428,1,1), title="masking"	GroupBox Peak1Gro03,pos={666,207},size={122,85}, fColor=(52428,1,1), title="plot range"	// -------------------------------------- Number of peaks of type 1		NVAR gDFitPeaks1 		= root:SPECTRA:Fitting:MultiPeaks:gDFitPeaks1	NVAR gNumFitPeaks1 	= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1		gDFitPeaks1 = gNumFitPeaks1	SetVariable SetNumFitPeaks1Var,pos={560,35},size={74,15},proc=MultiPeakSetVarProcs,title="# peaks"	SetVariable SetNumFitPeaks1Var,limits={0,20,1},value= gDFitPeaks1		// The form of type 1 peaks. 	NVAR gFitPeakType1			= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	SVAR gFitPeakType1List		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1List	PopupMenu SelectPeakType1Menu,pos={547,55},size={130,20},proc=MultiPeakPopupProcs,title=""	PopupMenu SelectPeakType1Menu,mode=gFitPeakType1, value= #"root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1List	"	// --------------------------------------------------------------------------------------------------		// --------------------------------------   	Number of peaks of type 2	------------------------------------	NVAR gDFitPeaks2 		= root:SPECTRA:Fitting:MultiPeaks:gDFitPeaks2	NVAR gNumFitPeaks2 	= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2		gDFitPeaks2 = gNumFitPeaks2	SetVariable SetNumFitPeaks2Var,pos={689,35},size={74,15},proc=MultiPeakSetVarProcs,title="# peaks"	SetVariable SetNumFitPeaks2Var,limits={0,20,1},value= gDFitPeaks2		// The form of type 2 peaks	NVAR gFitPeakType2			= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	SVAR gFitPeakType2List		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2List	PopupMenu SelectPeakType2Menu,pos={671,55},size={130,20},proc=MultiPeakPopupProcs,title=""	PopupMenu SelectPeakType2Menu,mode=gFitPeakType2,value= #"root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2List"	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Number of steps	NVAR gDFitSteps1 		= root:SPECTRA:Fitting:MultiPeaks:gDFitSteps1	NVAR gNumFitSteps1 	= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1		gDFitSteps1 = gNumFitSteps1	SetVariable SetNumFitStepsVar,pos={563,137},size={74,15},proc=MultiPeakSetVarProcs,title="# edges"	SetVariable SetNumFitStepsVar,limits={0,20,1},value= gDFitSteps1		// The form of the steps (e.g. absorption threshold)	NVAR gFitStep1Type			= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	SVAR gFitStep1TypeList		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1TypeList	PopupMenu SelectStepTypeMenu,pos={548,157},size={130,20},proc=MultiPeakPopupProcs,title=""	PopupMenu SelectStepTypeMenu,mode=gFitStep1Type, value= #"root:SPECTRA:Fitting:MultiPeaks:gFitStep1TypeList"	// -----------------------------------------------------------------------------------------------------		// --------------------------------------   	Number of doublets of type 1	------------------------------------	NVAR gDFitDoublets1 		= root:SPECTRA:Fitting:MultiPeaks:gDFitDoublets1	NVAR gNumFitDoublets1 	= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1		gDFitDoublets1 = gNumFitDoublets1	SetVariable SetNumFitDoublets1Var,pos={680,137},size={86,15},proc=MultiPeakSetVarProcs,title="# doublets"	SetVariable SetNumFitDoublets1Var,limits={0,10,1},value= gDFitDoublets1		// The form of type 2 doublets	NVAR gFitDoubletType1			= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1	SVAR gFitDoubletType1List		= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1List	PopupMenu SelectDoubletType1Menu,pos={671,157},size={130,20},proc=MultiPeakPopupProcs,title=""	PopupMenu SelectDoubletType1Menu,mode=gFitDoubletType1,value= #"root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1List"	// --------------------------------------------------------------------------------------------------	// -------------------------------------- Highlight an individual peak. //	NVAR gSelectedPeaks1			= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks1//	NVAR gSelectedPeaks2			= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks2//	NVAR gSelectedStep1				= root:SPECTRA:Fitting:MultiPeaks:gSelectedStep1//	NVAR gSelectedDoublets1			= root:SPECTRA:Fitting:MultiPeaks:gSelectedDoublets1		SetVariable HighlightPeaks1Var,pos={571,81},size={30,15},title=" ",limits={0,gNumFitPeaks1,1},value= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks1, proc = HighlightCmpnt	SetVariable HighlightPeaks2Var,pos={697,81},size={30,15},title=" ",limits={0,gNumFitPeaks2,1},value= root:SPECTRA:Fitting:MultiPeaks:gSelectedPeaks2, proc = HighlightCmpnt	SetVariable HighlightSteps1Var,pos={571,183},size={30,15},title=" ",limits={0,gNumFitSteps1,1},value= root:SPECTRA:Fitting:MultiPeaks:gSelectedStep1, proc = HighlightCmpnt	SetVariable HighlightDoublets1Var,pos={697,183},size={30,15},title=" ",limits={0,gNumFitDoublets1,1},value= root:SPECTRA:Fitting:MultiPeaks:gSelectedDoublets1, proc = HighlightCmpnt	// -----------------------------------------------------------------------------------------------------	// -------------------------------------- Delete the highlighted peak from the coefficients	Button DeleteHighlightedPeak1Button,pos={605,81},size={24,15},title="X", proc=DeleteHighlightedCmpnt	Button DeleteHighlightedPeak2Button,pos={731,81},size={24,15},title="X", proc = DeleteHighlightedCmpnt	Button DeleteHighlightedStep1Button,pos={605,183},size={24,15},title="X", proc = DeleteHighlightedCmpnt	Button DeleteHighlightedDblt1Button,pos={731,183},size={24,15},title="X", proc = DeleteHighlightedCmpnt	// -----------------------------------------------------------------------------------------------------		SetVariable SetPeakStatType1,pos={546,101},size={14,17},fSize=11, proc=SetPeakStatistic,title=" "	SetVariable SetPeakStatType1,limits={0,7,1},value= root:SPECTRA:Fitting:MultiPeaks:gPeakStatisticType1		SetVariable SetPeakStatType2,pos={670,101},size={14,17},fSize=11, proc=SetPeakStatistic,title=" "	SetVariable SetPeakStatType2,limits={0,7,1},value= root:SPECTRA:Fitting:MultiPeaks:gPeakStatisticType2		// -------------------------------------- Display the highlighted peak statistic	ValDisplay PeakStatisticDisplay1,pos={564,102},size={97,14},title="Area",value=#"root:SPECTRA:Fitting:MultiPeaks:gPeakStatistic1"	ValDisplay PeakStatisticDisplay2,pos={687,102},size={97,14},title="Area",value=#"root:SPECTRA:Fitting:MultiPeaks:gPeakStatistic2"	// -----------------------------------------------------------------------------------------------------EndFunction AddXRDFitControls()//	NVAR gFitPeakType1		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	// -------------------------------------- Space group	SVAR gSpaceGroupList	= root:SPECTRA:Fitting:XRD:gSpaceGroupList	PopupMenu SpaceGroupMenu,pos={547,55},size={130,20},proc=XRDPopupProcs,title="Space Group"	PopupMenu SpaceGroupMenu,fsize=12,mode=1, value= #"root:SPECTRA:Fitting:MultiPeaks:gSpaceGroupList"		// -------------------------------------- X-ray Wavelength	SVAR gXRDLambdaList	= root:SPECTRA:Fitting:XRD:gXRDLambdaList	PopupMenu WavelengthMenu,pos={547,55},size={130,20},proc=XRDPopupProcs,title="X-ray wavelength"	PopupMenu WavelengthMenu,fsize=12,mode=1, value= #"root:SPECTRA:Fitting:MultiPeaks:gXRDLambdaList"		// -------------------------------------- Number of extra Gaussian peaks	NVAR gNBraggPeaks		= root:SPECTRA:Fitting:XRD:gNBraggPeaks	SetVariable SetNumXRDPeaksVar,pos={560,35},size={74,15},proc=XRDSetVarProcs,title="# peaks"	SetVariable SetNumXRDPeaksVar,limits={0,20,1},value= gNBraggPeaks		// -------------------------------------- Number of extra Gaussian peaks	NVAR gNExtraGauss		= root:SPECTRA:Fitting:XRD:gNExtraGauss	SetVariable SetNumExtraPeaksVar,pos={560,35},size={74,15},proc=XRDSetVarProcs,title="# extra peaks"	SetVariable SetNumExtraPeaksVar,limits={0,20,1},value= gNExtraGauss		// -------------------------------------- Add an amorphous background component	NVAR gAmBGFlag 			= root:SPECTRA:Fitting:XRD:gAmBGFlag	CheckBox AmBGCheckBox,pos={410,49},size={44,14},proc=XRDCheckBoxProcs,title="Amorphous background?",value=gAmBGFlag		// -------------------------------------- Add an amorphous background component	NVAR gRecordCellVolFlag	= root:SPECTRA:Fitting:XRD:gRecordCellVolFlag	CheckBox RecordVolCheckBox,pos={410,49},size={44,14},proc=XRDCheckBoxProcs,title="Record unit cell volume?",value=gRecordCellVolFlagEnd// This checks that the fit results folder is created, ...Function /T oldCheckDataFitFolder(DataNum)	Variable DataNum		NVAR gFitType 			= root:SPECTRA:Fitting:gFitType	WAVE/T wFitDataList		= root:SPECTRA:Fitting:wFitDataList	WAVE wFitDataGroup		= root:SPECTRA:Fitting:wFitDataGroup		String FitDataFolderName = "root:SPECTRA:Data:Load" + num2str(wFitDataGroup[DataNum])		String OldDF = getDataFolder(1)	SetDataFolder root:SPECTRA:Data			if (DataFolderExists(FitDataFolderName) == 0)			NewDataFolder /O/S $FitDataFolderName		else			SetDataFolder $FitDataFolderName		endif						FitDataFolderName += ":" + ReturnFitFolderName(gFitType)		if (DataFolderExists(FitDataFolderName) == 0)			NewDataFolder /O/S  $FitDataFolderName		else			SetDataFolder $FitDataFolderName		endif						FitDataFolderName += ":" + SampleNameFromDataName(wFitDataList[DataNum])		if (DataFolderExists(FitDataFolderName) == 0)			NewDataFolder /O/S  $FitDataFolderName		else			SetDataFolder $FitDataFolderName		endif		SetDataFolder $(OldDF)			// ... and also returns the full DataFolder name. 	return FitDataFolderNameEndFunction oUpdateMultiPeakFitCoefficients(PeakToDelete)	Variable PeakToDelete	WAVE BGCoefs				= root:SPECTRA:Fitting:BGCoefs	WAVE HoldBGCoefs		= root:SPECTRA:Fitting:HoldBGCoefs	//	NVAR OldPolyOrder		= root:SPECTRA:Fitting:gOldBGPolyOrder	NVAR NewPolyOrder		= root:SPECTRA:Fitting:gBGPolyOrder	//	WAVE /T FitCoefsLegend	= root:SPECTRA:Fitting:MultiPeaks:FitCoefsLegend	WAVE FitCoefs				= root:SPECTRA:Fitting:MultiPeaks:FitCoefs	WAVE HoldFitCoefs		= root:SPECTRA:Fitting:MultiPeaks:FitCoefsHold	//	WAVE P1Coefs				= root:SPECTRA:Fitting:MultiPeaks:P1Coefs	WAVE P1HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:P1HoldCoefs	WAVE P2Coefs				= root:SPECTRA:Fitting:MultiPeaks:P2Coefs	WAVE P2HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:P2HoldCoefs	WAVE D1Coefs				= root:SPECTRA:Fitting:MultiPeaks:D1Coefs	WAVE D1HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:D1HoldCoefs	WAVE Stp1Coefs			= root:SPECTRA:Fitting:MultiPeaks:Stp1Coefs	WAVE Stp1HoldCoefs		= root:SPECTRA:Fitting:MultiPeaks:Stp1HoldCoefs	//	NVAR OldNPeaks1			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks1	NVAR NewNPeaks1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks1	NVAR OldNPeaks2			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitPeaks2	NVAR NewNPeaks2		= root:SPECTRA:Fitting:MultiPeaks:gNumFitPeaks2	NVAR OldNSteps			= root:SPECTRA:Fitting:MultiPeaks:gPrevFitSteps1	NVAR NewNSteps			= root:SPECTRA:Fitting:MultiPeaks:gNumFitSteps1	//	NVAR OldNDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gPrevFitDoublets1	NVAR NewNDoublets1		= root:SPECTRA:Fitting:MultiPeaks:gNumFitDoublets1	//	NVAR gFitPeakType1		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1	SVAR gFitPeakType1List	= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType1List	NVAR gFitPeakType2		= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2	SVAR gFitPeakType2List	= root:SPECTRA:Fitting:MultiPeaks:gFitPeakType2List	NVAR gFitStep1Type		= root:SPECTRA:Fitting:MultiPeaks:gFitStep1Type	SVAR gFitStep1TypeList	= root:SPECTRA:Fitting:MultiPeaks:gFitStep1TypeList	//	NVAR gFitDoubletType1		= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1	SVAR gFitDoubletType1List	= root:SPECTRA:Fitting:MultiPeaks:gFitDoubletType1List		Variable i, j, k, Index, OldNCoefs, NewNCoefs,DeleteFlag	String CoefName, PeakType, StepType		// Read the existing coefficients into waves for each peak/edge types	// ------------------------------------------------	// Background polynomial	ReDimension /N=(OldPolyOrder) BGCoefs, HoldBGCoefs		i=0	do		BGCoefs[i]=FitCoefs[i]		HoldBGCoefs[i]=HoldFitcoefs[i]		i+=1	while(i<OldPolyOrder)		// Type 1 Peaks	DeleteFlag=0	Index = OldPolyOrder	if (OldNPeaks1>0)		ReDimension /N=(3*OldNPeaks1) P1Coefs, P1HoldCoefs		if (NewNPeaks1<OldNPeaks1)			DeleteFlag=1		endif		i=0		k=0		do			if ((DeleteFlag==1) && ((i+1) == PeakToDelete))				// Skip a peak that is marked for deletion				Print "Type 1 Peak deleted!"			else					P1Coefs[3*k, 3*k+2] = FitCoefs[(Index+3*i) - 3*k + p]				P1HoldCoefs[3*k, 3*k+2] = HoldFitcoefs[(Index+3*i) - 3*k + p]				k+=1			endif			i+=1		while(i<OldNPeaks1)	endif		// Type 2 Peaks	DeleteFlag=0	Index += (3* OldNPeaks1)	if (OldNPeaks2>0)		ReDimension /N=(4*OldNPeaks2) P2Coefs, P2HoldCoefs		if (NewNPeaks2<OldNPeaks2)			DeleteFlag=1		endif		i=0		k=0		do			if ((DeleteFlag==1) && ((i+1) == PeakToDelete))				// Skip a peak that is marked for deletion				Print "Type 2 Peak deleted!"			else					P2Coefs[4*k, 4*k+3] = FitCoefs[(Index+4*i) - 4*k + p]				P2HoldCoefs[4*k, 4*k+3] = HoldFitcoefs[(Index+4*i) - 4*k + p]									k+=1			endif			i+=1		while(i<OldNPeaks2)	endif		// Steps	DeleteFlag=0	Index += (4*OldNPeaks2)	if (OldNSteps>0)		ReDimension /N=(3*OldNSteps) Stp1Coefs, Stp1HoldCoefs		if (NewNSteps<OldNSteps)			DeleteFlag=1		endif		i=0		k=0		do			if ((DeleteFlag==1) && ((i+1) == PeakToDelete))				// Skip a peak that is marked for deletion				Print "Type 1 Step deleted!"			else					Stp1Coefs[3*k, 3*k+2] = FitCoefs[(Index+3*i) - 3*k + p]				Stp1HoldCoefs[3*k, 3*k+2] = HoldFitcoefs[(Index+3*i) - 3*k + p]									k+=1			endif			i+=1		while(i<OldNSteps)	endif		// Type 1 Doublets	DeleteFlag=0	Index +=  (3*OldNSteps)	if (OldNDoublets1>0)		ReDimension /N=(7*OldNDoublets1) D1Coefs, D1HoldCoefs		if (NewNDoublets1<OldNDoublets1)			DeleteFlag=1		endif		i=0		k=0		do			if ((DeleteFlag==1) && ((i+1) == PeakToDelete))				// Skip a peak that is marked for deletion				Print "Type 1 Peak deleted!"			else					D1Coefs[7*k, 7*k+6] = FitCoefs[(Index+7*i) - 7*k + p]				D1HoldCoefs[7*k, 7*k+6] = HoldFitcoefs[(Index+7*i) - 7*k + p]				k+=1			endif			i+=1		while(i<OldNDoublets1)	endif			// Count the total number of fit coefficients required. 	NewNCoefs = CalculateNumFitCoefs(NewPolyOrder,NewNPeaks1,NewNPeaks2,NewNSteps,NewNDoublets1)	ReDimension /N=(NewNCoefs) FitCoefs, HoldFitcoefs, FitCoefsLegend		// Read previous values back into the FitCoefs	// --------------------------------	// Background polynomial	i=0	do		ReDimension /N=(NewPolyOrder) BGCoefs, HoldBGCoefs		FitCoefs[i]=BGCoefs[i]		HoldFitcoefs[i]=HoldBGCoefs[i]		FitCoefsLegend[i] = "p"+num2str(i)		i+=1	while(i<NewPolyOrder)	i-=1	if (NewPolyOrder>OldPolyOrder)		// Make a guess for the new, unvalued coefficient		FitCoefs[i]=BGCoefs[i-1]/10	endif		// Type 1 Peaks	Index = NewPolyOrder	if (NewNPeaks1>0)		ReDimension /N=(3*NewNPeaks1) P1Coefs, P1HoldCoefs		PeakType = StringFromList(gFitPeakType1-1, gFitPeakType1List)		i=0		do			j=0			do					FitCoefs[Index+3*i+j]=P1Coefs[3*i+j]				HoldFitcoefs[Index+3*i+j]=P1HoldCoefs[3*i+j]				j+=1			while(j<3)			FitCoefsLegend[Index+3*i] = PeakType + 	" Amplitude"			FitCoefsLegend[Index+3*i+1] = 			"        Position"			FitCoefsLegend[Index+3*i+2] = 			"            Width"			i+=1		while(i<NewNPeaks1)			if (NewNPeaks1>OldNPeaks1)			if (OldNPeaks1>0)				// A new peak of type 1, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+3*i,Index+3*i+2]=FitCoefs[3*j-3*i+p]				HoldFitcoefs[Index+3*i,Index+3*i+2]=HoldFitcoefs[3*j-3*i+p]								// ... but add 2 x previous width to the position					FitCoefs[Index+3*i+1]=FitCoefs[Index+3*j+1] + 2*FitCoefs[Index+3*j+2]			else				// The first peak of type 1 ... some default coeffs. 				FitCoefs[Index,Index+2] = 1				HoldFitCoefs[Index,Index+2] = 0			endif		endif	endif		// Type 2 Peaks	Index += (3*NewNPeaks1)	if (NewNPeaks2>0)		ReDimension /N=(4*NewNPeaks2) P2Coefs, P2HoldCoefs		PeakType = StringFromList(gFitPeakType2-1, gFitPeakType2List)		i=0		do			j=0			do					FitCoefs[Index+4*i+j]=P2Coefs[4*i+j]				HoldFitcoefs[Index+4*i+j]=P2HoldCoefs[4*i+j]				j+=1			while(j<4)			// Voigt peak - requires some more care with coefficient bounds during fitting			FitCoefs[index + 4*i+3] = ClipValue(P2Coefs[4*i + 3],0.0000001,0.999999)							FitCoefsLegend[Index+4*i] = PeakType + 	" Amplitude"			FitCoefsLegend[Index+4*i+1] = 			"         Position"			FitCoefsLegend[Index+4*i+2] = 			"            Width"			FitCoefsLegend[Index+4*i+3] = 			"          Mixing"			i+=1		while(i<NewNPeaks2)				if (NewNPeaks2>OldNPeaks2)			if (OldNPeaks2>0)				// A new peak of type 2, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+4*i,Index+4*i+3]=FitCoefs[4*j-4*i+p]				HoldFitcoefs[Index+4*i,Index+4*i+3]=HoldFitcoefs[4*j-4*i+p]								// ... but add 2 x previous width to the position					FitCoefs[Index+4*i+1]=FitCoefs[Index+4*j+1] + 2*FitCoefs[Index+4*j+2]			else				// The first peak of type 2 ... some default coeffs. 				FitCoefs[Index,Index+3] = 0.5				HoldFitCoefs[Index,Index+3] = 0				// Automatically fix the Voigt width and shape parameters for any new peak				HoldFitcoefs[Index+2] = 1				HoldFitcoefs[Index+3] = 1			endif		endif	endif		// Steps	Index += (4*NewNPeaks2)	if (NewNSteps>0)		ReDimension /N=(3*NewNSteps) Stp1Coefs, Stp1HoldCoefs		StepType = StringFromList(gFitStep1Type-1, gFitStep1TypeList)		i=0		do			j=0			do					FitCoefs[Index+3*i+j]=Stp1Coefs[3*i+j]				HoldFitcoefs[Index+3*i+j]=Stp1HoldCoefs[3*i+j]				j+=1			while(j<3)			FitCoefsLegend[Index+3*i] = StepType + 	" Amplitude"			FitCoefsLegend[Index+3*i+1] = 			"       Position"			FitCoefsLegend[Index+3*i+2] = 			"           Width"			i+=1		while(i<NewNSteps)		if (NewNSteps>OldNSteps)			if (OldNSteps>0)				// A new peak of type 1, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+3*i,Index+3*i+2]=FitCoefs[3*j-3*i+p]				HoldFitcoefs[Index+3*i,Index+3*i+2]=HoldFitcoefs[3*j-3*i+p]								// ... but add 2 x previous width to the position					FitCoefs[Index+3*i+1]=FitCoefs[Index+3*j+1] + 2*FitCoefs[Index+3*j+2]			else				// The first peak of type 1 ... some default coeffs. 				FitCoefs[Index,Index+2] = 1				HoldFitCoefs[Index,Index+2] = 0			endif		endif	endif		// Type 1 Doublets	Index += (3*NewNSteps)	if (NewNDoublets1>0)		ReDimension /N=(7*NewNDoublets1) D1Coefs, D1HoldCoefs		PeakType = StringFromList(gFitDoubletType1-1, gFitDoubletType1List)		i=0		do			j=0			do					FitCoefs[Index+7*i+j]=D1Coefs[7*i+j]				HoldFitcoefs[Index+7*i+j]=D1HoldCoefs[7*i+j]				j+=1			while(j<7)			FitCoefsLegend[Index+7*i] = PeakType + 	" Doublet Amplitude"			FitCoefsLegend[Index+7*i+1] = 			"            Ampl ratio"			FitCoefsLegend[Index+7*i+2] = 			"       1st peak posn"			FitCoefsLegend[Index+7*i+3] = 			"               Splitting"			FitCoefsLegend[Index+7*i+4] = 			"      1st peak width"			FitCoefsLegend[Index+7*i+5] = 			"           Width ratio"			FitCoefsLegend[Index+7*i+6] = 			"                  Mixing"			i+=1		while(i<NewNDoublets1)		if (NewNDoublets1>OldNDoublets1)			if (OldNDoublets1>0)				// A new peak of doublet type 1, at least one existing already ...				i-=1				j=i-1				// ... so duplicate the previous peak params ...					FitCoefs[Index+7*i,Index+7*i+6]=FitCoefs[7*j-7*i+p]				HoldFitcoefs[Index+7*i,Index+7*i+6]=HoldFitcoefs[7*j-7*i+p]								// ... but add 0.75 x previous splitting to the position					FitCoefs[Index+7*i+2]=FitCoefs[Index+7*j+2] + 0.75*FitCoefs[Index+7*j+3]			else				// The first doublet of type 2 ... some default coeffs??				FitCoefs[Index,Index+6] = 1				HoldFitCoefs[Index,Index+6] = 1			endif		endif	endif		// Update the previous peak and step numbers. 	OldPolyOrder 		= NewPolyOrder	OldNPeaks1 		= NewNPeaks1	OldNPeaks2 		= NewNPeaks2	OldNSteps 			= NewNSteps	OldNDoublets1 	= NewNDoublets1		UpdateHighlightPeakControls(0)	FitCoefsToListBox()End