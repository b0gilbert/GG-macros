#pragma TextEncoding = "UTF-8"#pragma rtGlobals=1		// Use modern global access method.// *************************************************************************// *******	Note that these routines are all folder aware, and are to be used with the Spectrum procs// *************************************************************************// *******		They use more general, non-folder-aware routines found in "Useful_Plotting"// ***************************************************************************// **************** 			INITIALIZATION: MAKE GLOBAL VARIABLES AND DATA FOLDERS// ***************************************************************************Function DisplayPlottingPanel()	DoWindow SpectraPlotPanel	if (V_flag == 0)		InitLoadSpectra()		InitPlotSpectra()	// do this earlier now. 		CreatePlotSpectraPanel()		SetCommonLabels()	else		DoWindow /F SpectraPlotPanel	endifEnd// *** MAKE GLOBAL VARIABLES FOR ALL PLOTTING ROUTINESFunction InitPlotSpectra()		String OldDF = getDataFolder(1)	NewDataFolder/O/S root:SPECTRA	NewDataFolder/O/S root:SPECTRA:Plotting		String /G gMatchStr		String /G gCopySuffix = "r"		String /G gDataLocations = "memory;root;"		Make /O/N=10 nullWave=NAN		SetDataFolder ::	NewDataFolder/O/S Export		String /G gExportFormats = "axis-data;data only;fit results;axis - n column;ROD input;WT input;Profex Input;"		MakeStringIfNeeded("gExportChoice","2-column")			NewDataFolder/O Fitting	NewDataFolder/O IzeroFit			SetDataFolder $(OldDF)End// *************************************************************************// ************			Routines to append and remove traces		******************// *************************************************************************Function /T PlotDataInWindow(WindowName, DataList, DataSel, DataGroup, DataColor, PlotAllFlag,  AppendFlag, RightFlag, ErrorsFlag, PlotvsTimeFlag, AssocWavesFlag,AssocWavesFolder,TraceFormat,UserLegendFlag)	String WindowName, DataColor, AssocWavesFolder, TraceFormat	Wave /T DataList	Wave DataSel, DataGroup	Variable PlotAllFlag, AppendFlag, RightFlag, ErrorsFlag, PlotvsTimeFlag, AssocWavesFlag, UserLegendFlag		// Is this always the same? 	String FolderStem = "root:SPECTRA:Data:Load", AssocFolderStem, FirstTraceName=""		Variable i, PlotFlag, PlotSuccess = 0, FirstTrace=1	String DataNote, DataFileName, DataType, LegendText=""	String DataName, AxisName, AcqTName, DataAndFolderName, SampleName, FitName, ResidsName, TraceList, ListAssocWaves, ListDataAndAssocWaves		// Plot null wave to ensure the graph does not disappear. 	//	WAVE nullWave	= $("root:SPECTRA:Plotting:nullWave")	//	AppendtoGraph /W=$WindowName nullWave		// First loop: Remove ALL waves unless we're appending	if (AppendFlag == 0)		for (i=0;i<numpnts(DataSel);i+=1)			DataName				= DataList[i]			SampleName 			= SampleNameFromDataName(DataName)						TraceList = TraceNameList(WindowName,";",1)						ListDataAndAssocWaves = InclusiveWaveList(TraceList,SampleName,";")						if (ItemsInList(ListDataAndAssocWaves) > 0)				RemoveWavesInListFromPlot(WindowName,ListDataAndAssocWaves)			endif		endfor	endif		// Second loop: Append selected waves	for (i=0;i<numpnts(DataSel);i+=1)		DataName				= DataList[i]		DataAndFolderName	= FolderStem + num2str(DataGroup[i]) + ":" + PossiblyQuoteName(DataName)		SampleName 			= SampleNameFromDataName(DataName)				WAVE DataWave = $DataAndFolderName		if (!WaveExists(DataWave))			print "This should not occur"		endif				DataNote 				= Note(DataWave)		if (strlen(DataNote) > 0)			DataFileName 		= ReturnTextBeforeNthChar(DataNote,"\r",1) // Here we are relying on the first line of the WaveNote to have the original file name			DataType 				= StringByKey("DataType",DataNote,"=")		else			DataFileName 		= ""			DataType 				= "Unknown"		endif					// Check whether the data should be plotted		if (PlotAllFlag == 1)						// Plot all. 			PlotFlag = 1		elseif ((DataSel[i] & 2^0) != 0)		// Bit 0 is set: Normal selection. 			PlotFlag = 1		elseif  ((DataSel[i] & 2^3) != 0)		// Bit 3 is set: Shift-selection			PlotFlag = 1		else			PlotFlag = 0		endif				if (PlotvsTimeFlag == 0)			AxisName 			= AxisNameFromDataName(DataAndFolderName)		else			AxisName 			= AnyNameFromDataName(DataAndFolderName,"time")		endif				if (PlotFlag)			if (exists(DataAndFolderName) == 1)							CheckDisplayed /W=$WindowName $DataAndFolderName								if (V_flag == 0 || RightFlag==1)									if (!WaveExists($DataAndFolderName) || (!WaveExists($AxisName)))						Print " *** Problem finding one data or axis: ",DataAndFolderName,AxisName					endif										LegendText 	= LegendText + "\\s("+DataName+")"+DataFileName+"\r"									if (RightFlag == 1)						AppendtoGraph /R/W=$WindowName $DataAndFolderName vs $AxisName						// ModifyGraph axThick(right)=2					else						AppendtoGraph /W=$WindowName $DataAndFolderName vs $AxisName						ModifyGraph axThick(left)=2					endif										if (FirstTrace)						FirstTraceName 	= DataName						FirstTrace		= 0					endif					PlotSuccess = 1				endif								if (ErrorsFlag == 1)					AppendErrorBars(WindowName,DataName)				endif									if (AssocWavesFlag == 1)					if (strlen(AssocWavesFolder) == 0)						AssocFolderStem = FolderStem + num2str(DataGroup[i])					else						AssocFolderStem = FolderStem + num2str(DataGroup[i]) + ":" + AssocWavesFolder + ":" + SampleName					endif										AppendAssociatedWaves(WindowName,AxisName,SampleName,AssocFolderStem,TraceFormat,RightFlag)				endif			endif		endif	endfor		if (cmpstr(DataType,"Complex")==0)		if (RightFlag)			print "here"//			ModifyGraph cmplxMode()=2		else			ModifyGraph cmplxMode=1		endif	endif		if (Rightflag)		DoUpdate		String msg = "ModifyGraph /W="+WindowName+" fSize=18, font=\"Helvetica Light\""		Execute /P/Q msg	endif		if (UserLegendFlag)		Legend/C/N=text0/J LegendText	endif	//	CheckDisplayed /W=$WindowName nullWave//	if (V_flag == 1)//		RemoveWavesInListFromPlot(WindowName,"nullWave")//		RemoveFromGraph $(NameOfWave(nullWave))//		RemoveFromGraph /W=$WindowName $(NameOfWave(nullWave))//	endif	//	String PlotFolderName 	= "root:SPECTRA:Plotting:" + PlotName	String CopyFolderName 	= "root:SPECTRA:Plotting:"+WindowName+":DataDuplicates"	if (DataFolderExists(CopyFolderName) == 1)		DuplicateAllTracesToDataFolder(WindowName,CopyFolderName,"*",1)	endif		return FirstTraceName//	return PlotSuccessEndFunction AppendAssociatedWaves(WindowName,AxisAndFolderName,SampleName,AssocFolderName,TraceFormat,RightFlag)	String WindowName,AxisAndFolderName,SampleName,AssocFolderName,TraceFormat	Variable RightFlag		String ListAssocWaves, ListWaves2Plot	String AxisName 	= SampleName+"_axis"	String DataName 	= SampleName+"_data"	String AcqTName 	= SampleName+"_time"	String ResidName 	= SampleName+"_res"		if (DataFolderExists(AssocFolderName))		// Find associated waves ... remove the Axis, Data, Time and Error waves ... and append the data folder names		ListAssocWaves 		= FolderWaveList(AssocFolderName,SampleName + "_*",";","",-1,0)		ListAssocWaves 		= ExclusiveWaveList(ExclusiveWaveList(ExclusiveWaveList(ExclusiveWaveList(ListAssocWaves,DataName,";"),AxisName,";"),AcqTName,";"),"_sig",";")				if (cmpstr(TraceFormat,"Profex")==0)			ListWaves2Plot = ExclusiveWaveList(ListAssocWaves,ResidName,";")			ListWaves2Plot = PlotTraceFirstOrLast(ListWaves2Plot,SampleName+"_fit",0)			ListWaves2Plot = PlotTraceFirstOrLast(ListWaves2Plot,SampleName+"_data",0)			ListWaves2Plot = PlotTraceFirstOrLast(ListWaves2Plot,SampleName+"_bg",1)			ListWaves2Plot = AddPrefixOrSuffixToListItems(ListWaves2Plot,AssocFolderName+":","")			AppendWavesInListToPlot(WindowName,ListWaves2Plot,AxisAndFolderName,"",RightFlag)			FormatPlotAxis(TraceFormat,"left")						ListWaves2Plot = InclusiveWaveList(ListAssocWaves,ResidName,";")			ListWaves2Plot = AddPrefixOrSuffixToListItems(ListWaves2Plot,AssocFolderName+":","")			AppendWavesInListToPlot(WindowName,ListWaves2Plot,AxisAndFolderName,"resAxis",RightFlag)			FormatAssociatedWaves(WindowName,DataName,"green",TraceFormat)			FormatPlotAxis(TraceFormat,"resAxis")		else			if (ItemsInList(ListAssocWaves) > 0)				ListWaves2Plot = AddPrefixOrSuffixToListItems(ListAssocWaves,AssocFolderName+":","")				AppendWavesInListToPlot(WindowName,ListWaves2Plot,AxisAndFolderName,"",RightFlag)				FormatAssociatedWaves(WindowName,DataName,"green",TraceFormat)			endif		endif			endifEndFunction /S PlotTraceFirstOrLast(ListOfTraces,TraceName,EndChoice)	String ListOfTraces,TraceName	Variable EndChoice		Variable nTraces, tNum = WhichListItem(TraceName,ListOfTraces)		if (tNum > -1)		ListOfTraces 	= RemoveFromList(TraceName,ListOfTraces)		if (EndChoice == 0)			ListOfTraces 	= TraceName + ";" + ListOfTraces		else			ListOfTraces 	= AddListItem(ListOfTraces,TraceName)		endif	endif			return ListOfTracesEndFunction FormatPlotAxis(TraceFormat,AxisName)	String TraceFormat,AxisName		if (cmpstr(AxisName,"left")==0)		strswitch (TraceFormat)				case "Profex":					ModifyGraph axisEnab($AxisName)={0.15,0.98}					ModifyGraph axThick($AxisName)=2					ModifyGraph fSize($AxisName)=18					break		endswitch		else		strswitch (TraceFormat)				case "Profex":					ModifyGraph freePos($AxisName)=0					ModifyGraph axisEnab($AxisName)={0.02,0.13}										ModifyGraph axThick($AxisName)=2					ModifyGraph nticks($AxisName)=3										ModifyGraph fSize($AxisName)=18					break		endswitch	endifEndFunction FormatAssociatedWaves(WindowName,DataName,DefaultColor,TraceFormat)	String WindowName,DataName,DefaultColor,TraceFormat		Variable i=0, NumTraces	String SampleName, ListOfTraces, TraceName, Suffix		SampleName 		= SampleNameFromDataName(DataName)	ListOfTraces 	= ExclusiveWaveList(InclusiveWaveList(TraceNameList(WindowName,";",1),SampleName,";"),DataName,";")	NumTraces 		= ItemsInList(ListOfTraces)		for (i=0; i<NumTraces; i+=1)		TraceName 	= StringFromList(i,ListOfTraces)		Suffix 		= ReturnLastSuffix(TraceName,"_")				if (cmpstr("fit",Suffix) == 0)			ColorSingleTrace(WindowName,TraceName,"blue")					elseif (cmpstr("bg",Suffix) == 0)			if (cmpstr(TraceFormat,"Profex")==0)				ModifyGraph mode($TraceName)=7				ModifyGraph rgb($TraceName)=(65535,65535,65535)				ModifyGraph muloffset($TraceName)={0,0.78}			else				ColorSingleTrace(WindowName,TraceName,"gray")			endif					elseif (cmpstr("resids",Suffix) == 0)			ColorSingleTrace(WindowName,TraceName,"red")		elseif (cmpstr("res",Suffix) == 0)			ColorSingleTrace(WindowName,TraceName,"gray")		else					if (cmpstr(TraceFormat,"Profex")==0)				ModifyGraph mode($TraceName)=7				ModifyGraph muloffset($TraceName)={0,0.8}				ModifyGraph usePlusRGB($TraceName)=1,plusRGB($TraceName)=(34952,34952,34952)								else				ColorSingleTrace(WindowName,TraceName,DefaultColor)			endif				endif	endfor	EndFunction HighlightTrace(WindowName,DataName,DataColor,DataThick)	String WindowName,DataName,DataColor	Variable DataThick		ColorSingleTrace(WindowName,DataName,DataColor)	ThickSingleTrace(WindowName,DataName,DataThick)EndFunction AppendErrorBars(WindowName,DataName)	String WindowName, DataName		String AxisName = ReplaceString("_data",DataName,"_axis")		String AxisErrorsName = AxisName + "_sig"	WAVE AxisErrors 	= $AxisErrorsName	String DataErrorsName = DataName + "_sig"	WAVE DataErrors 	= $DataErrorsName						if ((waveexists(DataErrors)==1) && (waveexists(AxisErrors)==0))		ErrorBars /W=$WindowName $DataName Y,wave=(DataErrors,DataErrors)	elseif ((waveexists(DataErrors)==1) && (waveexists(AxisErrors)==1))		ErrorBars /W=$WindowName $DataName XY, wave =(AxisErrors,AxisErrors),wave=(DataErrors,DataErrors)	endifEndFunction RemoveErrorBars(WindowName,DataName)	String WindowName, DataName		ErrorBars /W=$WindowName $DataName OFFEnd// ***************************************************************************// **************** 			PLOTTING// ***************************************************************************Function SelectDataToPlot(LB_Struct) : ListboxControl 	STRUCT WMListboxAction &LB_Struct 	Variable eventCode 		= LB_Struct.eventCode	Variable row 				= LB_Struct.row		if ((eventCode == 4) || (eventCode == 5))		PlotDataInViewer()		return 0	endif		return 0End// Select data to plot using string matches. 	Function SetDataMatchString(sva) : SetVariableControl	STRUCT WMSetVariableAction &sva		String sval 		= sva.sval	Variable event 	= sva.eventCode		WAVE/T wDataList	= root:SPECTRA:wDataList	WAVE wDataSel		= root:SPECTRA:wDataSel	WAVE wDataGroup	 	= root:SPECTRA:wDataGroup		String DataList	Variable Selected, KeepSelected=1	Variable i, NData=numpnts(wDataList)		if (event == 2)		for (i=0;i<NData;i+=1)						Selected = ((wDataSel[i]&2^0 != 0) || (wDataSel[i]&2^3 != 0))						if ((!KeepSelected) || (KeepSelected && !Selected))				wDataSel[i] 	= StringMatchFromList(wDataList[i],sval)			endif		endfor	endif		return 0EndFunction StringMatchFromList(Str,MatchList)	String Str,MatchList		String MatchStr	Variable i, NMatches=ItemsInList(MatchList)		for (i=0;i<NMatches;i+=1)		MatchStr 	= StringFromList(i,MatchList)				if (StringMatch(Str,MatchStr))			return 1		endif	endfor		return 0EndFunction PlotDataInViewer()	WAVE/T wDataList	= root:SPECTRA:wDataList	WAVE wDataSel		= root:SPECTRA:wDataSel	WAVE wDataGroup	 	= root:SPECTRA:wDataGroup		SVAR gDataLocations 	= root:SPECTRA:Plotting:gDataLocations		String FirstTraceName, TraceFormat = ""	Variable PlotFlag, AppendFlag = 0, ErrorsFlag = 0, RightFlag = 0, PlotvsTime=0, AssocWavesFlag = 1		ControlInfo /W=SpectraPlotPanel DataLocationMenu	if (V_Value == 2)		return 0	endif		FirstTraceName 	= PlotDataInWindow("SpectraPlotPanel", wDataList, wDataSel, wDataGroup, "red", 0, AppendFlag, RightFlag, ErrorsFlag,PlotvsTime,AssocWavesFlag,TraceFormat,"",0)		ColorPlotTraces()		if (strlen(FirstTraceName) > 0)		SetViewerPlotFormat()		RemoveFromGraph /W=SpectraPlotPanel/Z nullWave		ShowDataNote(wDataList,wDataSel,wDataGroup,1)	endifEndFunction SetViewerPlotFormat()	ModifyGraph mirror(bottom)=2, mirror(left)=1	ModifyGraph fSize=18,axThick=1End// ***************************************************************************// **************** 			Allow User to display a subset of loaded data that matches a string// ***************************************************************************// This modifies the contents of the actual Data Load foldersFunction ReOrderLoadedData(ctrlname):ButtonControl	String ctrlname		WAVE/T wDataList	= root:SPECTRA:wDataList	WAVE wDataSel		= root:SPECTRA:wDataSel	WAVE wDataGroup		= root:SPECTRA:wDataGroup		String SelectLine, SwapLine, SelectFolder, SwapFolder, TempFolder	Variable SelectIndex, SwapIndex, startRow, Selection, NumData = numpnts(wDataSel)		if (sum(wDataSel) == 1)		// Find the top row		ControlInfo DataListBox		startRow 		= V_startRow				FindValue /V=1 wDataSel		SelectIndex 	= V_value		SelectLine		= wDataList[SelectIndex]+";"+num2str(wDataSel[SelectIndex])+";"+num2str(wDataGroup[SelectIndex])+";"				if ((cmpstr(ctrlName,"MoveDataUpButton")==0) && (SelectIndex > 0))			SwapIndex	= SelectIndex - 1		elseif ((cmpstr(ctrlName,"MoveDataDownButton")==0) && (SelectIndex < (NumData-1)))			SwapIndex	= SelectIndex + 1		else			return 1		endif				// Swap the names of the data folders		SwapFolder	= "Load" + num2str(wDataGroup[SwapIndex])		SelectFolder	= "Load" + num2str(wDataGroup[SelectIndex])		SwapDataFolderNames("root:SPECTRA:Data:",SwapFolder,SelectFolder)				SwapLine	= wDataList[SwapIndex]+";"+num2str(wDataSel[SwapIndex])+";"+num2str(wDataGroup[SwapIndex])+";"				wDataSel[SwapIndex]		= wDataSel[SelectIndex]		wDataList[SwapIndex]	= wDataList[SelectIndex]				wDataList[SelectIndex]	= StringFromList(0,SwapLine)		wDataSel[SelectIndex]	= str2num(StringFromList(1,SwapLine))		if (cmpstr(ctrlName,"MoveDataUpButton")==0)			Selection = SelectIndex-1			if (Selection <= startRow+1)				ListBox DataListBox, row=(SelectIndex-2)			endif		elseif (cmpstr(ctrlName,"MoveDataDownButton")==0)			Selection = SelectIndex+1			if (Selection >= startRow+7)				ListBox DataListBox, row=(SelectIndex-6)			endif		endif	endifEnd// ***************************************************************************// **************** 			Update list of root vs. memory data folders// ***************************************************************************Function UpdateDataListBox(Location)	String Location		WAVE/T DataList	= root:SPECTRA:wDataList	WAVE DataSel		= root:SPECTRA:wDataSel	WAVE DataGroup	= root:SPECTRA:wDataGroup		String DataListStr	= ListOfRootOrMemoryData(Location,0)	String GroupListStr	= ListOfRootOrMemoryData(Location,1)		Variable i, NumData = ItemsInList(DataListStr)	ReDimension /N=(NumData) DataList	ReDimension /N=(NumData) DataSel, DataGroup		for (i=0;i<NumData;i+=1)		DataList[i] 	= StringFromList(i,DataListStr)		DataGroup[i] 	= str2num(StringFromList(i,GroupListStr))	endfor		ListBox DataListBox, win=SpectraPlotPanel, selRow=0EndFunction /T ListOfRootOrMemoryData(Location,GroupFlag)	String Location	Variable GroupFlag		String DataFolderName, LoadDataFolderName, Datas, DataList="", GroupList=""	Variable i, NumLoads, GpNum		// Searching the ROOT directory	if (cmpstr("root",Location) == 0)		if (GroupFlag == 1)			return ""		else			return FolderWaveList("root:","*",";","",-1,0)		endif	endif		// Searching the LOAD directories	DataFolderName		= "root:SPECTRA:Data"	NumLoads = CountObjects(DataFolderName, 4 )		for (i=0;i<(NumLoads);i+=1)		// This orders things by their creation date ...		LoadDataFolderName = GetIndexedObjName(DataFolderName, 4, i )		if (strsearch(LoadDataFolderName,"Load",0) > -1)			GpNum = ReturnLastNumber(LoadDataFolderName)						Datas 		= FolderWaveList(DataFolderName +":"+LoadDataFolderName,"*"+"_data",";","",-1,0)			if (strlen(Datas) ==0)				print " *** Debug: Deleting orphan data folder:",LoadDataFolderName				DeleteSingleDataOrGroup(GpNum,1)			else				GroupList += num2str(GpNum)+";"				DataList += FolderWaveList(DataFolderName +":"+LoadDataFolderName,"*"+"_data",";","",-1,0)			endif		endif	endfor		// .. so need to re-order according to new group number. 	if (GroupFlag == 1)		GroupList	= SortListByKey(GroupList, GroupList)		return GroupList	else		DataList 	= SortListByKey(DataList, GroupList)		return DataList	endifEnd// ***************************************************************************// **************** 			Adopt axis, data and errors from root:// ***************************************************************************Function AdoptRootDataButtonProcs(ctrlname):ButtonControl	String ctrlname		WAVE/T DataList	= root:SPECTRA:wDataList	WAVE DataSel		= root:SPECTRA:wDataSel	WAVE DataGroup	= root:SPECTRA:wDataGroup		String RootImportFolder = "root:SPECTRA:Data:RootImport"	NewDataFolder /O $(RootImportFolder)		SVAR gRootDataName	= $(RootImportFolder+":gRootDataName")	SVAR gDataLocations 	= root:SPECTRA:Plotting:gDataLocations		String SelWaveName, ImportName		FindValue /V=1 DataSel	if (V_value > -1)		SelWaveName = DataList[V_value]				if (cmpstr(ctrlname,"SelectRootAxisButton")==0)			Duplicate /O/D $("root:"+SelWaveName), $(RootImportFolder+":axis")					elseif (cmpstr(ctrlname,"SelectRootDataButton")==0)			String /G $(RootImportFolder+":gRootDataName") = SelWaveName			Duplicate /O/D $("root:"+SelWaveName), $(RootImportFolder+":data")					elseif (cmpstr(ctrlname,"SelectRootAxisSigButton")==0)			Duplicate /O/D $("root:"+SelWaveName), $(RootImportFolder+":axis_sig")					elseif (cmpstr(ctrlname,"SelectRootDataSigButton")==0)			Duplicate /O/D $("root:"+SelWaveName), $(RootImportFolder+":data_sig")					elseif (cmpstr(ctrlname,"AdoptRootDataButton")==0)			if ((WaveExists($(RootImportFolder+":axis")) == 1) && (WaveExists($(RootImportFolder+":data")) == 1))						PopupMenu DataLocationMenu, mode=1				UpdateDataListBox("memory")				RootDataButtonDisplay(1)	// <--- Must do this BEFORE trying to adopt! 								AdoptAxisAndDataFromMemory("axis","axis_sig",RootImportFolder,"data","data_sig",RootImportFolder,gRootDataName,"",1,0,1)				KillAllWavesInFolder(RootImportFolder,"*")			endif		endif	endifEndFunction RootDataButtonDisplay(DisableFlag)	Variable DisableFlag		Button SelectRootAxisButton,disable=(DisableFlag)	Button SelectRootDataButton,disable=(DisableFlag)	Button SelectRootAxisSigButton,disable=(DisableFlag)	Button SelectRootDataSigButton,disable=(DisableFlag)	Button AdoptRootDataButton,disable=(DisableFlag)	Button DeleteRootButton,disable=(DisableFlag)	//	Button DataToRootButton,disable=(!DisableFlag)	SetVariable DataNote,disable=(!DisableFlag)	//	SetVariable DatanameMatchString,disable=(!DisableFlag)	Button SelectAllButton,disable=!(DisableFlag)	Button DeselectAllButton,disable=!(DisableFlag)End// ***************************************************************************// **************** 			Plot Panel controls// ***************************************************************************// NOTE: These functions won't be compatible with ROOT: data, and probably should be disabled when root: data is shown. //Function PlotDataButtonProcs(ctrlname):ButtonControl//	String ctrlname//Function ButtonProc(ba) : ButtonControl//	STRUCT WMButtonAction &ba////	switch( ba.eventCode )//		case 2: // mouse up//			// click code here//			break//		case -1: // control being killed//			break//	endswitch////	return 0//EndFunction PlotDataButtonProcs(B_Struct) : ButtonControl	STRUCT WMButtonAction &B_Struct		String ctrlName 		= B_Struct.ctrlName	String WindowName 	= B_Struct.win	Variable eventCode 	= B_Struct.eventCode	Variable eventMod 	= B_Struct.eventMod	//	print eventCode	//	if (eventCode != 2)	if (eventCode != 1)		return 0	// Mouse up after pressing	endif		// Display a full-screen wide plot if shift is held	Variable WideFlag 	= ((eventMod & 2^1) != 0) ? 1 : 0		WAVE/T DataList	= root:SPECTRA:wDataList	WAVE DataSel		= root:SPECTRA:wDataSel	WAVE DataGroup	= root:SPECTRA:wDataGroup		SVAR gCopySuffix = root:SPECTRA:Plotting:gCopySuffix	NVAR PlotAssd 	= root:SPECTRA:Plotting:gPlotAssociatedFlag//	NVAR PlotTime 	= root:SPECTRA:Plotting:gPlotvsTimeFlag		Variable PlotTime = NumVAROrDefault("root:SPECTRA:Plotting:gPlotvsTimeFlag",0)			Variable i	String SelString, PlotFolderName, PlotName		if (cmpstr(ctrlname,"PlotSelectedDataButton")==0)		SetCommonLabels()		if (mean(DataSel) > 0)			PlotSelectedData(0,WideFlag)		endif	elseif (cmpstr(ctrlname,"PlotAllDataButton")==0)		PlotSelectedData(1,WideFlag)			elseif (cmpstr(ctrlname,"AppendLSelectedDataButton")==0)		PlotName = WinName(1,1)		if (strlen(PlotName) > 0)			PlotDataInWindow(PlotName, DataList, DataSel, DataGroup, "red", 0, 1, 0, 0, PlotTime, PlotAssd,"","",0)			UpdatePlottedTraceLists(PlotName)		endif			elseif (cmpstr(ctrlname,"AppendRSelectedDataButton")==0)		PlotName = WinName(1,1)		NVAR gTabChoice				= $("root:SPECTRA:Plotting:"+PlotName+":gTabChoice")			if (strlen(PlotName) > 0)			PlotDataInWindow(PlotName, DataList, DataSel, DataGroup, "red", 0, 1, 1, 0, PlotTime, PlotAssd,"","",0)			UpdatePlottedTraceLists(PlotName)						TabControlOfPlotLabelControls(gTabChoice,2,0,0,0,1,PlotName)			TabControlOfPlotControls(gTabChoice,0,"RAXES_",PlotName,0)						// This is the only place to work out some axis ranges			PlotFolderName = "root:SPECTRA:Plotting:" + PlotName			NVAR gLogYRight		= $(PlotFolderName + ":gLogYRight")			NVAR gPlotRightMin	= $(PlotFolderName + ":gPlotRightMin")			NVAR gPlotRightMax	= $(PlotFolderName + ":gPlotRightMax")						gPlotRightMin = ReturnAxisMinOrMaxIntensity(PlotName,"right",gLogYRight,0,0,0,0)			gPlotRightMax = ReturnAxisMinOrMaxIntensity(PlotName,"right",gLogYRight,0,0,0,1)			Variable RightInc = abs(gPlotRightMax - gPlotRightMin)/100			SetVariable RAXES_MinRightAxisSetVar,win=$PlotName,limits={-Inf,Inf,RightInc}			SetVariable RAXES_MaxRightAxisSetVar,win=$PlotName,limits={-Inf,Inf,RightInc}		endif		elseif (cmpstr(ctrlname,"SaveDataButton")==0)		SaveSelectedData(DataList,DataSel,DataGroup,0)	elseif (cmpstr(ctrlname,"SaveAllDataButton")==0)		SaveSelectedData(DataList,DataSel,DataGroup,1)	elseif (cmpstr(ctrlname,"RenameDataButton")==0)		RenameSelectedData(DataList,DataSel,DataGroup)//		UpdatePlottedTraceLists(PlotName)	<--- obviously this does not work - need to generate a list of all windows. 	elseif (cmpstr(ctrlname,"DuplicateDataButton")==0)		DuplicateSelectedData(DataList,DataSel,DataGroup,gCopySuffix,WideFlag)	elseif (cmpstr(ctrlname,"EditDataButton")==0)		EditSelectedData(DataList, DataSel, DataGroup,1,0)	elseif (cmpstr(ctrlname,"NameDataButton")==0)		EditSelectedData(DataList, DataSel, DataGroup,0,1)	elseif (cmpstr(ctrlname,"RevertDataButton")==0)		RevertSelectedData(DataList,DataSel,DataGroup,1,1,0)	elseif (cmpstr(ctrlname,"RevertAllDataButton")==0)		RevertSelectedData(DataList,DataSel,DataGroup,1,1,1)	elseif (cmpstr(ctrlname,"AverageDataButton")==0)		if (WideFlag)			Average2DData(DataList, DataSel, DataGroup,0)		else			AverageSelectedData(DataList,DataSel,DataGroup,0)		endif	elseif (cmpstr(ctrlname,"AverageAllDataButton")==0)		if (WideFlag)			Average2DData(DataList, DataSel, DataGroup,1)		else			AverageSelectedData(DataList,DataSel,DataGroup,1)		endif	elseif (cmpstr(ctrlname,"SwapDataAxisButton")==0)		SwapDataAndAxes(DataList,DataSel,DataGroup)	elseif (cmpstr(ctrlname,"DataToRootButton")==0)		CopyDataToRoot(DataList,DataSel,DataGroup)	elseif (cmpstr(ctrlname,"DeleteRootButton")==0)		DeleteAllDataInRoot()		ControlInfo DataLocationMenu		UpdateDataListBox(S_value)	elseif (cmpstr(ctrlname,"DeleteAllDataButton")==0)		DeleteAllData()	elseif (cmpstr(ctrlname,"DeleteSelectedDataButton")==0)		DeleteSelectedData(DataList, DataSel, DataGroup)	elseif (cmpstr(ctrlname,"DisplayDataNoteButton")==0)		ShowDataNote(DataList,DataSel,DataGroup,2)	elseif (cmpstr(ctrlname,"DeselectAllButton")==0)		DataSel = 0	elseif (cmpstr(ctrlname,"SelectAllButton")==0)		DataSel = 1	endifEndFunction UpdatePlottedTraceLists(WindowName)	String WindowName		SVAR gLeftPlottedList			= $("root:SPECTRA:Plotting:" + WindowName +":gLeftPlottedList")	SVAR gRightPlottedList		= $("root:SPECTRA:Plotting:" + WindowName +":gRightPlottedList")	SVAR gPlottedDisplayList1	= $("root:SPECTRA:Plotting:" + WindowName +":gPlottedDisplayList1")	SVAR gPlottedDisplayList2	= $("root:SPECTRA:Plotting:" + WindowName +":gPlottedDisplayList2")		gLeftPlottedList		= AxisTraceListBG(WindowName, "left","data")	gRightPlottedList		= AxisTraceListBG(WindowName, "right","data")		gPlottedDisplayList1 	= "_none_;_all_;"+RemoveFromList("polynomial",gLeftPlottedList)	gPlottedDisplayList2 	= gLeftPlottedList+gRightPlottedListEndFunction PlotterPopupProcs(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		if (cmpstr(ctrlname,"DataLocationMenu")==0)		UpdateDataListBox(popStr)		RootDataButtonDisplay(cmpstr("root",popStr))	endifEnd// ***************************************************************************// **************** 			Storing and modifying Data Information as Globals and WaveNotes. // ***************************************************************************Function ShowDataNote(wDataList,wDataSel,wDataGroup,ViewChoice)	Wave /T wDataList	Wave wDataSel, wDataGroup	Variable ViewChoice		String DataName, DataNote		if (sum(wDataSel) != 1)		return 0	endif		FindValue /V=1 wDataSel	DataName		= "root:SPECTRA:Data:Load" + num2str(wDataGroup[V_value]) + ":" + PossiblyQuoteName(wDataList[V_value])	DataNote 		= note($DataName)		if (ViewChoice == 1)		ShowDataNoteInViewer(DataName,DataNote)	elseif (ViewChoice == 2)		ShowDataNoteInNoteBook(DataName,DataNote)	endifEndFunction ShowDataNoteInViewer(DataName,DataNote)	String DataName,DataNote		// Backwards compatibility	MakeStringIfNeeded("root:SPECTRA:Plotting:gDataNote","")	SVAR gDataNote 	= root:SPECTRA:Plotting:gDataNote		// Save the full data wave name in the Set Variable user data called 'DataName'	SetVariable DataNote, userdata=DataName		// In the Data Plotting Panel, display only the first line of a potentially multi-line description. 	gDataNote = ReturnTextBeforeNthChar(DataNote,"\r",1)EndFunction ShowDataNoteInNoteBook(FullDataName,DataNote)	String FullDataName,DataNote		String DataName 	= ParseFilePath(0,ReplaceString("_data",FullDataName,""),":",1,0)	String nbName 	= "Note_"+DataName		DoWindow $nbName	if (!V_flag)		NewNotebook/N=$nbName/F=0/V=1/K=1/W=(167,487,696,634) as "Description of "+ReplaceString("_data",DataName,"")		Notebook $nbName defaultTab=20, statusWidth=252, backRGB=(65535,65534,49151)				SetWindow $nbName, hook(CloseDataNote)=CloseDataNoteHook		SetWindow $nbName, userData(DataName)=FullDataName		SetWindow $nbName, userData(ModFlag)="0"				NoteToNoteBook(nbName,DataNote)	endifEndFunction NoteToNoteBook(nb,DataNote)	String nb,DataNote		String DataLine	Variable i, NLines=CountCharsInText(DataNote,"\r")		if (NLines==0)		Notebook $nb text=DataNote	else		for (i=0;i<NLines;i+=1)			DataLine 	= ReturnTextBeforeNthChar(DataNote,"\r",1)//			DataLine 	= ReplaceString(";",DataLine,"\r")			DataNote	= ReplaceString(DataLine+"\r",DataNote,"",1,1)						Notebook $nb text=DataLine+"\r"		endfor				if (strlen(DataNote) > 0)			Notebook $nb text=DataNote+"\r"		endif	endifEndFunction CloseDataNoteHook(s)	STRUCT WMWinHookStruct &s		String nbName 	= s.winName	Variable event 	= s.eventCode		if (event == 11)		SetWindow $nbName, userData(ModFlag)="1"		return 0	endif		if (event != 2)		return 0	endif		Variable Modified 	= str2num(GetUserData(nbName,"","ModFlag"))	if (!Modified)		return 0	endif		Variable i, NLines	String DataName, DataLine	DataName 	= GetUserData(nbName,"","DataName")		SVAR gDataNote 	= root:SPECTRA:Plotting:gDataNote	WAVE Data 		= $DataName		// Count lines in notebook. 	NoteBook $nbName selection={startOfFile,endOfFile}	GetSelection notebook, $nbName, 2		// First update the Data Title SetVariable display	ShowDataNoteInViewer(DataName,S_selection)		// Delete existing wavenote. 	Note /K Data		NLines = CountCharsInText(S_selection,"\r")		if (NLines == 0)		Note Data, gDataNote	else		for (i=0;i<NLines;i+=1)			DataLine 		= ReturnTextBeforeNthChar(S_selection,"\r",1)			S_selection	= ReplaceString(DataLine+"\r",S_selection,"",1,1)						Note Data, DataLine		endfor				if (strlen(S_selection) > 0)			Note Data, S_selection		endif	endif		return 0EndFunction EditDataTitle(sva) : SetVariableControl	STRUCT WMSetVariableAction &sva		String sval 		= sva.sval	Variable event 	= sva.eventCode		String DataName, DataNote, DataTitle, NewNote		if (event == 2)		DataName  = sva.userdata		DataNote 	= note($DataName)		DataTitle 	= ReturnTextBeforeNthChar(DataNote,"\r",1)		if (strlen(DataTitle) == 0)			NewNote 	= sval		else			NewNote 	= ReplaceString(DataTitle,DataNote,sval)		endif		Note /K $DataName NewNote	endif		return 0End// ***************************************************************************// **************** 			CREATE THE INTERACTIVE PANEL FOR PLOTTING// ***************************************************************************Function CreatePlotSpectraPanel()		WAVE nullWave 	= root:SPECTRA:Plotting:nullWave		Display /K=0/W=(195,45,525,702)  nullWave  as "Data Plotting Panel"	DoWindow/C SpectraPlotPanel	CheckWindowPosition("SpectraPlotPanel",195,45,525,680)	ControlBar 400		// Display the wave note and allow it to be modified	String /G root:SPECTRA:Plotting:gDataNote	SetVariable DataNote,fSize=12,pos={23,360},size={300,18},proc=EditDataTitle,title=" ",value=root:SPECTRA:Plotting:gDataNote	Button DisplayDataNoteButton,pos={4,360},size={17,17},fColor=(65535,65534,49151),proc=PlotDataButtonProcs,title=" "		// Checkbox allowing the 1st line of the data Wave note to be used as a plot legend	MakeVariableIfNeeded("root:SPECTRA:Plotting:gFileNameLegendFlag",0)	CheckBox PlotFilenamLegendCheckBox1,pos={6,380},size={255,16},title="Use 1st line of description as plot legend"	CheckBox PlotFilenamLegendCheckBox1,fSize=12,variable= root:SPECTRA:Plotting:gFileNameLegendFlag		// Delete the selected file(s) ...	Button DeleteSelectedDataButton,pos={5,5},size={60,18},proc=PlotDataButtonProcs,title="Delete"	Button DeleteAllDataButton,pos={69,5},size={35,18},proc=PlotDataButtonProcs,title="All"		// Display in Table for Editing	Button EditDataButton,pos={112,5},size={55,18},proc=PlotDataButtonProcs,title="Table"	// Paste full name of Wave and Data Folder for manual operations	Button NameDataButton,pos={172,5},size={40,18},proc=PlotDataButtonProcs,title="Cmd"	// Rename selected files	Button RenameDataButton,pos={112,25},size={100,18},proc=PlotDataButtonProcs,title="Rename"		// Duplicate selected files	Button DuplicateDataButton,pos={112,45},size={55,18},proc=PlotDataButtonProcs,title="Copy"	// User choice of suffix to append while duplicating data. 	SetVariable CopySuffix,fSize=12,pos={173,45},size={40,18},title=" ",value=root:SPECTRA:Plotting:gCopySuffix		// Undo any changes to the data, reverting back to the original data as loaded. 	Button RevertDataButton,pos={5,25},size={60,18},proc=PlotDataButtonProcs,title="Revert"	Button RevertAllDataButton,pos={69,25},size={35,18},proc=PlotDataButtonProcs,title="All"		// More convenient to be able to average data with out having to first plot it. 	Button AverageDataButton,pos={5,45},size={60,18},proc=PlotDataButtonProcs,title="Average"	Button AverageAllDataButton,pos={69,45},size={35,18},proc=PlotDataButtonProcs,title="All"		// Save selected files	Button SaveDataButton,pos={5,65},size={60,18},proc=PlotDataButtonProcs,title="Save"	Button SaveAllDataButton,pos={69,65},size={35,18},proc=PlotDataButtonProcs,title="All"		// Type of data formats for export//	PopupMenu SaveDataMenu,fSize=12,pos={4,89},proc=PlotterPopupProcs,title="as",mode=1//	PopupMenu SaveDataMenu, value=#"root:SPECTRA:Export:gExportFormats"		Button SwapDataAxisButton,pos={112,65},size={100,18},proc=PlotDataButtonProcs, title="Data ↔ Axis"		// Plot the selected files(s)	Button PlotSelectedDataButton,pos={220,5},size={60,18},proc=PlotDataButtonProcs,title="Plot"	Button PlotAllDataButton,pos={285,5},size={35,18},proc=PlotDataButtonProcs,title="All"	// Plot the selected files(s)	Button AppendLSelectedDataButton,pos={220,25},size={45,18},proc=PlotDataButtonProcs,title="Add L"	Button AppendRSelectedDataButton,pos={275,25},size={45,18},proc=PlotDataButtonProcs,title="Add R"	//	MakeVariableIfNeeded("root:SPECTRA:Plotting:gPlotAssociatedFlag",0)	CheckBox PlotAssociatedCheckBox,pos={220,46},size={49,14},title="Plot fits etc."	CheckBox PlotAssociatedCheckBox,fsize=12,variable= root:SPECTRA:Plotting:gPlotAssociatedFlag	//	MakeVariableIfNeeded("root:SPECTRA:Plotting:gPlotvsTimeFlag",0)	CheckBox PlotvsTimeCheckBox,pos={220,66},size={49,14},title="Plot vs time"	CheckBox PlotvsTimeCheckBox,fsize=12,variable= root:SPECTRA:Plotting:gPlotvsTimeFlag	//	// Fit the first selected file	Button PeakFitButton,pos={220,86},size={100,18},proc=SpectraFitButton,title="Peak Fitting"		// Selecting data in Load folders, or in the root folder. 	PopupMenu DataLocationMenu,fSize=9,pos={23,117},proc=PlotterPopupProcs,title="Location",mode=1	PopupMenu DataLocationMenu, value=#"root:SPECTRA:Plotting:gDataLocations"	Button SelectRootDataButton,pos={176,116},size={45,18},proc=AdoptRootDataButtonProcs,title="Data",disable=1	Button SelectRootAxisButton,pos={176,138},size={45,18},proc=AdoptRootDataButtonProcs,title="Axis", disable=1	Button SelectRootDataSigButton,pos={226,116},size={45,18},proc=AdoptRootDataButtonProcs,title="Errors",disable=1	Button SelectRootAxisSigButton,pos={226,138},size={45,18},proc=AdoptRootDataButtonProcs,title="Errors", disable=1	Button AdoptRootDataButton,pos={276,116},size={45,40},proc=AdoptRootDataButtonProcs,title="Adopt", disable=1		// Copy the data to the root: folder for User access	Button DataToRootButton,pos={144,118},size={45,18},proc=PlotDataButtonProcs,title="2 root"	// Copy the data to the root: folder for User access	Button DeleteRootButton,pos={123,138},size={48,18},proc=PlotDataButtonProcs,title="Delete",disable=1		// Match text in dataname	SetVariable DatanameMatchString,pos={3,140},size={234,18},proc=SetDataMatchString,title="Match string:"	SetVariable DatanameMatchString,fSize=11,value=root:SPECTRA:Plotting:gMatchStr		Button DeselectAllButton,pos={284,140},size={40,17},proc=PlotDataButtonProcs,title="none"	Button SelectAllButton,pos={240,140},size={40,17},proc=PlotDataButtonProcs,title="all"		// List of the loaded data files. 	ListBox DataListBox,mode= 9,pos={24,160},size={300,194}, proc=SelectDataToPlot	ListBox DataListBox,listWave=root:SPECTRA:wDataList	ListBox DataListBox,selWave=root:SPECTRA:wDataSel		Button MoveDataUpButton, fsize=28, title="↑",pos={4,187},size={17,65}, proc=ReOrderLoadedData	Button MoveDataDownButton , fsize=28, title="↓",pos={4,258},size={17,65}, proc=ReOrderLoadedDataEnd